/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { UtilHttpError } from '../model/utilHttpError';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PinningService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * List all pin status objects
     * This endpoint lists all pin status objects
     
     */
    public pinningPinsGet(observe?: 'body', headers?: Headers): Observable<any>;
    public pinningPinsGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pinningPinsGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.APIConfiguration.basePath}/pinning/pins` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Delete a pinned object
     * This endpoint deletes a pinned object.
     * @param pinid Pin ID
     
     */
    public pinningPinsPinidDelete(pinid: string, observe?: 'body', headers?: Headers): Observable<any>;
    public pinningPinsPinidDelete(pinid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pinningPinsPinidDelete(pinid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!pinid){
            throw new Error('Required parameter pinid was null or undefined when calling pinningPinsPinidDelete.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.APIConfiguration.basePath}/pinning/pins/${encodeURIComponent(String(pinid))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get a pin status object
     * This endpoint returns a pin status object.
     * @param pinid cid
     
     */
    public pinningPinsPinidGet(pinid: string, observe?: 'body', headers?: Headers): Observable<any>;
    public pinningPinsPinidGet(pinid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pinningPinsPinidGet(pinid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!pinid){
            throw new Error('Required parameter pinid was null or undefined when calling pinningPinsPinidGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.APIConfiguration.basePath}/pinning/pins/${encodeURIComponent(String(pinid))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Replace a pinned object
     * This endpoint replaces a pinned object.
     * @param pinid Pin ID
     
     */
    public pinningPinsPinidPost(pinid: string, observe?: 'body', headers?: Headers): Observable<any>;
    public pinningPinsPinidPost(pinid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pinningPinsPinidPost(pinid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!pinid){
            throw new Error('Required parameter pinid was null or undefined when calling pinningPinsPinidPost.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/pinning/pins/${encodeURIComponent(String(pinid))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add and pin object
     * This endpoint adds a pin to the IPFS daemon.
     * @param cid cid
     * @param name name
     
     */
    public pinningPinsPost(cid: string, name: string, observe?: 'body', headers?: Headers): Observable<any>;
    public pinningPinsPost(cid: string, name: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public pinningPinsPost(cid: string, name: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!cid){
            throw new Error('Required parameter cid was null or undefined when calling pinningPinsPost.');
        }

        if (!name){
            throw new Error('Required parameter name was null or undefined when calling pinningPinsPost.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/pinning/pins` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
