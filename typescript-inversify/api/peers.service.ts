/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';


import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class PeersService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * Remove peers on Peering Service
     * This endpoint can be used to remove a Peer from the Peering Service
     
     */
    public adminPeeringPeersDelete(observe?: 'body', headers?: Headers): Observable<any>;
    public adminPeeringPeersDelete(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public adminPeeringPeersDelete(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.APIConfiguration.basePath}/admin/peering/peers` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * List all Peering peers
     * This endpoint can be used to list all peers on Peering Service
     
     */
    public adminPeeringPeersGet(observe?: 'body', headers?: Headers): Observable<any>;
    public adminPeeringPeersGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public adminPeeringPeersGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.APIConfiguration.basePath}/admin/peering/peers` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add peers on Peering Service
     * This endpoint can be used to add a Peer from the Peering Service
     
     */
    public adminPeeringPeersPost(observe?: 'body', headers?: Headers): Observable<any>;
    public adminPeeringPeersPost(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public adminPeeringPeersPost(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/admin/peering/peers` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Start Peering
     * This endpoint can be used to start the Peering Service
     
     */
    public adminPeeringStartPost(observe?: 'body', headers?: Headers): Observable<any>;
    public adminPeeringStartPost(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public adminPeeringStartPost(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/admin/peering/start` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Check Peering Status
     * This endpoint can be used to check the Peering status
     
     */
    public adminPeeringStatusGet(observe?: 'body', headers?: Headers): Observable<any>;
    public adminPeeringStatusGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public adminPeeringStatusGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.APIConfiguration.basePath}/admin/peering/status` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Stop Peering
     * This endpoint can be used to stop the Peering Service
     
     */
    public adminPeeringStopPost(observe?: 'body', headers?: Headers): Observable<any>;
    public adminPeeringStopPost(observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public adminPeeringStopPost(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/admin/peering/stop` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
