/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { MainImportDealBody } from '../model/mainImportDealBody';
import { UtilContentAddIpfsBody } from '../model/utilContentAddIpfsBody';
import { UtilContentAddResponse } from '../model/utilContentAddResponse';
import { UtilContentCreateBody } from '../model/utilContentCreateBody';
import { UtilHttpError } from '../model/utilHttpError';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class ContentService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * Add Car object
     * This endpoint is used to add a car object to the network. The object can be a file or a directory.
     * @param body Car
     * @param ignoreDupes Ignore Dupes
     * @param filename Filename
     
     */
    public contentAddCarPost(body: string, ignoreDupes?: string, filename?: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentAddCarPost(body: string, ignoreDupes?: string, filename?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentAddCarPost(body: string, ignoreDupes?: string, filename?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling contentAddCarPost.');
        }

        let queryParameters: string[] = [];
        if (ignoreDupes !== undefined) {
            queryParameters.push('ignoreDupes='+encodeURIComponent(String(ignoreDupes)));
        }
        if (filename !== undefined) {
            queryParameters.push('filename='+encodeURIComponent(String(filename)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.APIConfiguration.basePath}/content/add-car?${queryParameters.join('&')}`, body as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add IPFS object
     * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     * @param body IPFS Body
     * @param ignoreDupes Ignore Dupes
     
     */
    public contentAddIpfsPost(body: UtilContentAddIpfsBody, ignoreDupes?: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentAddIpfsPost(body: UtilContentAddIpfsBody, ignoreDupes?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentAddIpfsPost(body: UtilContentAddIpfsBody, ignoreDupes?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling contentAddIpfsPost.');
        }

        let queryParameters: string[] = [];
        if (ignoreDupes !== undefined) {
            queryParameters.push('ignoreDupes='+encodeURIComponent(String(ignoreDupes)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.APIConfiguration.basePath}/content/add-ipfs?${queryParameters.join('&')}`, body as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add new content
     * This endpoint is used to upload new content.
     * @param data File to upload
     * @param filename Filenam to use for upload
     * @param coluuid Collection UUID
     * @param replication Replication value
     * @param ignoreDupes Ignore Dupes true/false
     * @param lazyProvide Lazy Provide true/false
     * @param dir Directory
     
     */
    public contentAddPost(data: Blob, filename?: string, coluuid?: string, replication?: number, ignoreDupes?: string, lazyProvide?: string, dir?: string, observe?: 'body', headers?: Headers): Observable<UtilContentAddResponse>;
    public contentAddPost(data: Blob, filename?: string, coluuid?: string, replication?: number, ignoreDupes?: string, lazyProvide?: string, dir?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<UtilContentAddResponse>>;
    public contentAddPost(data: Blob, filename?: string, coluuid?: string, replication?: number, ignoreDupes?: string, lazyProvide?: string, dir?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!data){
            throw new Error('Required parameter data was null or undefined when calling contentAddPost.');
        }

        let queryParameters: string[] = [];
        if (coluuid !== undefined) {
            queryParameters.push('coluuid='+encodeURIComponent(String(coluuid)));
        }
        if (replication !== undefined) {
            queryParameters.push('replication='+encodeURIComponent(String(replication)));
        }
        if (ignoreDupes !== undefined) {
            queryParameters.push('ignoreDupes='+encodeURIComponent(String(ignoreDupes)));
        }
        if (lazyProvide !== undefined) {
            queryParameters.push('lazyProvide='+encodeURIComponent(String(lazyProvide)));
        }
        if (dir !== undefined) {
            queryParameters.push('dir='+encodeURIComponent(String(dir)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        let formData: FormData = new FormData();
        headers['Content-Type'] = 'application/x-www-form-urlencoded;charset=UTF-8';
        if (data !== undefined) {
            formData.append('data', <any>data);
        }
        if (filename !== undefined) {
            formData.append('filename', <any>filename);
        }

        const response: Observable<HttpResponse<UtilContentAddResponse>> = this.httpClient.post(`${this.APIConfiguration.basePath}/content/add?${queryParameters.join('&')}` as any, body, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get aggregated content stats
     * This endpoint returns aggregated content stats
     * @param content Content ID
     
     */
    public contentAggregatedContentGet(content: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentAggregatedContentGet(content: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentAggregatedContentGet(content: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!content){
            throw new Error('Required parameter content was null or undefined when calling contentAggregatedContentGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/aggregated/${encodeURIComponent(String(content))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get all deals for a user
     * This endpoint is used to get all deals for a user
     * @param begin Begin
     * @param duration Duration
     * @param all All
     
     */
    public contentAllDealsGet(begin: string, duration: string, all: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentAllDealsGet(begin: string, duration: string, all: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentAllDealsGet(begin: string, duration: string, all: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!begin){
            throw new Error('Required parameter begin was null or undefined when calling contentAllDealsGet.');
        }

        if (!duration){
            throw new Error('Required parameter duration was null or undefined when calling contentAllDealsGet.');
        }

        if (!all){
            throw new Error('Required parameter all was null or undefined when calling contentAllDealsGet.');
        }

        let queryParameters: string[] = [];
        if (begin !== undefined) {
            queryParameters.push('begin='+encodeURIComponent(String(begin)));
        }
        if (duration !== undefined) {
            queryParameters.push('duration='+encodeURIComponent(String(duration)));
        }
        if (all !== undefined) {
            queryParameters.push('all='+encodeURIComponent(String(all)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/all-deals?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get content bandwidth
     * This endpoint returns content bandwidth
     * @param content Content ID
     
     */
    public contentBwUsageContentGet(content: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentBwUsageContentGet(content: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentBwUsageContentGet(content: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!content){
            throw new Error('Required parameter content was null or undefined when calling contentBwUsageContentGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/bw-usage/${encodeURIComponent(String(content))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add a new content
     * This endpoint adds a new content
     * @param req Content
     * @param ignoreDupes Ignore Dupes
     
     */
    public contentCreatePost(req: UtilContentCreateBody, ignoreDupes?: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentCreatePost(req: UtilContentCreateBody, ignoreDupes?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentCreatePost(req: UtilContentCreateBody, ignoreDupes?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!req){
            throw new Error('Required parameter req was null or undefined when calling contentCreatePost.');
        }

        let queryParameters: string[] = [];
        if (ignoreDupes !== undefined) {
            queryParameters.push('ignoreDupes='+encodeURIComponent(String(ignoreDupes)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.APIConfiguration.basePath}/content/create?${queryParameters.join('&')}`, req as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Content with deals
     * This endpoint lists all content with deals
     * @param limit Limit
     * @param offset Offset
     
     */
    public contentDealsGet(limit?: number, offset?: number, observe?: 'body', headers?: Headers): Observable<string>;
    public contentDealsGet(limit?: number, offset?: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentDealsGet(limit?: number, offset?: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/deals?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Ensure Replication
     * This endpoint ensures that the content is replicated to the specified number of providers
     * @param datacid Data CID
     
     */
    public contentEnsureReplicationDatacidGet(datacid: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentEnsureReplicationDatacidGet(datacid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentEnsureReplicationDatacidGet(datacid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!datacid){
            throw new Error('Required parameter datacid was null or undefined when calling contentEnsureReplicationDatacidGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/ensure-replication/${encodeURIComponent(String(datacid))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * List all failures for a content
     * This endpoint returns all failures for a content
     * @param content Content ID
     
     */
    public contentFailuresContentGet(content: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentFailuresContentGet(content: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentFailuresContentGet(content: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!content){
            throw new Error('Required parameter content was null or undefined when calling contentFailuresContentGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/failures/${encodeURIComponent(String(content))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Content
     * This endpoint returns a content by its ID
     * @param id Content ID
     
     */
    public contentIdGet(id: number, observe?: 'body', headers?: Headers): Observable<string>;
    public contentIdGet(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentIdGet(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling contentIdGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/${encodeURIComponent(String(id))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Import a deal
     * This endpoint imports a deal into the shuttle.
     * @param body Import a deal
     
     */
    public contentImportdealPost(body: MainImportDealBody, observe?: 'body', headers?: Headers): Observable<string>;
    public contentImportdealPost(body: MainImportDealBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentImportdealPost(body: MainImportDealBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling contentImportdealPost.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.APIConfiguration.basePath}/content/importdeal`, body as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * List all pinned content
     * This endpoint lists all content
     
     */
    public contentListGet(observe?: 'body', headers?: Headers): Observable<string>;
    public contentListGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentListGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/list` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Read content
     * This endpoint reads content from the blockstore
     * @param cont CID
     
     */
    public contentReadContGet(cont: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentReadContGet(cont: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentReadContGet(cont: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!cont){
            throw new Error('Required parameter cont was null or undefined when calling contentReadContGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/read/${encodeURIComponent(String(cont))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get staging zone for user
     * This endpoint is used to get staging zone for user.
     
     */
    public contentStagingZonesGet(observe?: 'body', headers?: Headers): Observable<string>;
    public contentStagingZonesGet(observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentStagingZonesGet(observe: any = 'body', headers: Headers = {}): Observable<any> {
        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/staging-zones` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get content statistics
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
     * @param limit limit
     * @param offset offset
     
     */
    public contentStatsGet(limit: string, offset: string, observe?: 'body', headers?: Headers): Observable<string>;
    public contentStatsGet(limit: string, offset: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentStatsGet(limit: string, offset: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!limit){
            throw new Error('Required parameter limit was null or undefined when calling contentStatsGet.');
        }

        if (!offset){
            throw new Error('Required parameter offset was null or undefined when calling contentStatsGet.');
        }

        let queryParameters: string[] = [];
        if (limit !== undefined) {
            queryParameters.push('limit='+encodeURIComponent(String(limit)));
        }
        if (offset !== undefined) {
            queryParameters.push('offset='+encodeURIComponent(String(offset)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/stats?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Content Status
     * This endpoint returns the status of a content
     * @param id Content ID
     
     */
    public contentStatusIdGet(id: number, observe?: 'body', headers?: Headers): Observable<string>;
    public contentStatusIdGet(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public contentStatusIdGet(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling contentStatusIdGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/content/status/${encodeURIComponent(String(id))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
