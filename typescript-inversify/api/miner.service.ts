/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';


import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class MinerService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * Get all miners deals
     * This endpoint returns all miners deals
     * @param miner Filter by miner
     
     */
    public publicMinersDealsMinerGet(miner: string, observe?: 'body', headers?: Headers): Observable<any>;
    public publicMinersDealsMinerGet(miner: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public publicMinersDealsMinerGet(miner: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!miner){
            throw new Error('Required parameter miner was null or undefined when calling publicMinersDealsMinerGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.APIConfiguration.basePath}/public/miners/deals/${encodeURIComponent(String(miner))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get miner stats
     * This endpoint returns miner stats
     * @param miner Filter by miner
     
     */
    public publicMinersStatsMinerGet(miner: string, observe?: 'body', headers?: Headers): Observable<any>;
    public publicMinersStatsMinerGet(miner: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public publicMinersStatsMinerGet(miner: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!miner){
            throw new Error('Required parameter miner was null or undefined when calling publicMinersStatsMinerGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.get(`${this.APIConfiguration.basePath}/public/miners/stats/${encodeURIComponent(String(miner))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
