/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import IHttpClient from '../IHttpClient';
import { inject, injectable } from 'inversify';
import { IAPIConfiguration } from '../IAPIConfiguration';
import { Headers } from '../Headers';
import HttpResponse from '../HttpResponse';

import { MainCollection } from '../model/mainCollection';
import { MainCreateCollectionBody } from '../model/mainCreateCollectionBody';
import { UtilHttpError } from '../model/utilHttpError';

import { COLLECTION_FORMATS }  from '../variables';



@injectable()
export class CollectionsService {
    @inject('IAPIConfiguration') private APIConfiguration: IAPIConfiguration;
    @inject('IApiHttpClient') private httpClient: IHttpClient;



    /**
     * Produce a CID of the collection contents
     * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
     * @param coluuid coluuid
     
     */
    public collectionsColuuidCommitPost(coluuid: string, observe?: 'body', headers?: Headers): Observable<string>;
    public collectionsColuuidCommitPost(coluuid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public collectionsColuuidCommitPost(coluuid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!coluuid){
            throw new Error('Required parameter coluuid was null or undefined when calling collectionsColuuidCommitPost.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.post(`${this.APIConfiguration.basePath}/collections/${encodeURIComponent(String(coluuid))}/commit` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Deletes a collection
     * This endpoint is used to delete an existing collection.
     * @param coluuid Collection ID
     
     */
    public collectionsColuuidDelete(coluuid: string, observe?: 'body', headers?: Headers): Observable<any>;
    public collectionsColuuidDelete(coluuid: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public collectionsColuuidDelete(coluuid: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!coluuid){
            throw new Error('Required parameter coluuid was null or undefined when calling collectionsColuuidDelete.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.delete(`${this.APIConfiguration.basePath}/collections/${encodeURIComponent(String(coluuid))}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Get contents in a collection
     * This endpoint is used to get contents in a collection. If no colpath query param is passed
     * @param coluuid Collection UUID
     * @param dir Directory
     
     */
    public collectionsColuuidGet(coluuid: string, dir?: string, observe?: 'body', headers?: Headers): Observable<string>;
    public collectionsColuuidGet(coluuid: string, dir?: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<string>>;
    public collectionsColuuidGet(coluuid: string, dir?: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!coluuid){
            throw new Error('Required parameter coluuid was null or undefined when calling collectionsColuuidGet.');
        }

        let queryParameters: string[] = [];
        if (coluuid !== undefined) {
            queryParameters.push('coluuid='+encodeURIComponent(String(coluuid)));
        }
        if (dir !== undefined) {
            queryParameters.push('dir='+encodeURIComponent(String(dir)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<string>> = this.httpClient.get(`${this.APIConfiguration.basePath}/collections/${encodeURIComponent(String(coluuid))}?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add contents to a collection
     * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
     * @param body Content IDs to add to collection
     
     */
    public collectionsColuuidPost(body: Array<number>, observe?: 'body', headers?: Headers): Observable<{ [key: string]: string; }>;
    public collectionsColuuidPost(body: Array<number>, observe?: 'response', headers?: Headers): Observable<HttpResponse<{ [key: string]: string; }>>;
    public collectionsColuuidPost(body: Array<number>, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling collectionsColuuidPost.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<{ [key: string]: string; }>> = this.httpClient.post(`${this.APIConfiguration.basePath}/collections/${encodeURIComponent(String(coluuid))}`, body as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Add a file to a collection
     * This endpoint adds a file to a collection
     * @param coluuid Collection ID
     * @param content Content
     * @param path Path to file
     
     */
    public collectionsFsAddPost(coluuid: string, content: string, path: string, observe?: 'body', headers?: Headers): Observable<any>;
    public collectionsFsAddPost(coluuid: string, content: string, path: string, observe?: 'response', headers?: Headers): Observable<HttpResponse<any>>;
    public collectionsFsAddPost(coluuid: string, content: string, path: string, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!coluuid){
            throw new Error('Required parameter coluuid was null or undefined when calling collectionsFsAddPost.');
        }

        if (!content){
            throw new Error('Required parameter content was null or undefined when calling collectionsFsAddPost.');
        }

        if (!path){
            throw new Error('Required parameter path was null or undefined when calling collectionsFsAddPost.');
        }

        let queryParameters: string[] = [];
        if (coluuid !== undefined) {
            queryParameters.push('coluuid='+encodeURIComponent(String(coluuid)));
        }
        if (content !== undefined) {
            queryParameters.push('content='+encodeURIComponent(String(content)));
        }
        if (path !== undefined) {
            queryParameters.push('path='+encodeURIComponent(String(path)));
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<any>> = this.httpClient.post(`${this.APIConfiguration.basePath}/collections/fs/add?${queryParameters.join('&')}` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * List all collections
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @param id User ID
     
     */
    public collectionsGet(id: number, observe?: 'body', headers?: Headers): Observable<Array<MainCollection>>;
    public collectionsGet(id: number, observe?: 'response', headers?: Headers): Observable<HttpResponse<Array<MainCollection>>>;
    public collectionsGet(id: number, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!id){
            throw new Error('Required parameter id was null or undefined when calling collectionsGet.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';

        const response: Observable<HttpResponse<Array<MainCollection>>> = this.httpClient.get(`${this.APIConfiguration.basePath}/collections/` as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }


    /**
     * Create a new collection
     * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
     * @param body Collection name and description
     
     */
    public collectionsPost(body: MainCreateCollectionBody, observe?: 'body', headers?: Headers): Observable<MainCollection>;
    public collectionsPost(body: MainCreateCollectionBody, observe?: 'response', headers?: Headers): Observable<HttpResponse<MainCollection>>;
    public collectionsPost(body: MainCreateCollectionBody, observe: any = 'body', headers: Headers = {}): Observable<any> {
        if (!body){
            throw new Error('Required parameter body was null or undefined when calling collectionsPost.');
        }

        // authentication (bearerAuth) required
        if (this.APIConfiguration.apiKeys['Authorization']) {
            headers['Authorization'] = this.APIConfiguration.apiKeys['Authorization'];
        }
        headers['Accept'] = 'application/json';
        headers['Content-Type'] = 'application/json';

        const response: Observable<HttpResponse<MainCollection>> = this.httpClient.post(`${this.APIConfiguration.basePath}/collections/`, body as any, headers);
        if (observe === 'body') {
               return response.map(httpResponse => httpResponse.response);
        }
        return response;
    }

}
