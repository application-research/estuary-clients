#import <Foundation/Foundation.h>
#import "SWGMainImportDealBody.h"
#import "SWGUtilContentAddIpfsBody.h"
#import "SWGUtilContentAddResponse.h"
#import "SWGUtilContentCreateBody.h"
#import "SWGUtilHttpError.h"
#import "SWGApi.h"

/**
* Estuary API
* This is the API for the Estuary application.
*
* OpenAPI spec version: 0.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/



@interface SWGContentApi: NSObject <SWGApi>

extern NSString* kSWGContentApiErrorDomain;
extern NSInteger kSWGContentApiMissingParamErrorCode;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient NS_DESIGNATED_INITIALIZER;

/// Add Car object
/// This endpoint is used to add a car object to the network. The object can be a file or a directory.
///
/// @param body Car
/// @param ignoreDupes Ignore Dupes (optional)
/// @param filename Filename (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentAddCarPostWithBody: (NSString*) body
    ignoreDupes: (NSString*) ignoreDupes
    filename: (NSString*) filename
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Add IPFS object
/// This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
///
/// @param body IPFS Body
/// @param ignoreDupes Ignore Dupes (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentAddIpfsPostWithBody: (SWGUtilContentAddIpfsBody*) body
    ignoreDupes: (NSString*) ignoreDupes
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Add new content
/// This endpoint is used to upload new content.
///
/// @param data File to upload
/// @param filename Filenam to use for upload (optional)
/// @param coluuid Collection UUID (optional)
/// @param replication Replication value (optional)
/// @param ignoreDupes Ignore Dupes true/false (optional)
/// @param lazyProvide Lazy Provide true/false (optional)
/// @param dir Directory (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return SWGUtilContentAddResponse*
-(NSURLSessionTask*) contentAddPostWithData: (NSURL*) data
    filename: (NSString*) filename
    coluuid: (NSString*) coluuid
    replication: (NSNumber*) replication
    ignoreDupes: (NSString*) ignoreDupes
    lazyProvide: (NSString*) lazyProvide
    dir: (NSString*) dir
    completionHandler: (void (^)(SWGUtilContentAddResponse* output, NSError* error)) handler;


/// Get aggregated content stats
/// This endpoint returns aggregated content stats
///
/// @param content Content ID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentAggregatedContentGetWithContent: (NSString*) content
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get all deals for a user
/// This endpoint is used to get all deals for a user
///
/// @param begin Begin
/// @param duration Duration
/// @param all All
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentAllDealsGetWithBegin: (NSString*) begin
    duration: (NSString*) duration
    all: (NSString*) all
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get content bandwidth
/// This endpoint returns content bandwidth
///
/// @param content Content ID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentBwUsageContentGetWithContent: (NSString*) content
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Add a new content
/// This endpoint adds a new content
///
/// @param req Content
/// @param ignoreDupes Ignore Dupes (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentCreatePostWithReq: (SWGUtilContentCreateBody*) req
    ignoreDupes: (NSString*) ignoreDupes
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Content with deals
/// This endpoint lists all content with deals
///
/// @param limit Limit (optional)
/// @param offset Offset (optional)
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentDealsGetWithLimit: (NSNumber*) limit
    offset: (NSNumber*) offset
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Ensure Replication
/// This endpoint ensures that the content is replicated to the specified number of providers
///
/// @param datacid Data CID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentEnsureReplicationDatacidGetWithDatacid: (NSString*) datacid
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// List all failures for a content
/// This endpoint returns all failures for a content
///
/// @param content Content ID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentFailuresContentGetWithContent: (NSString*) content
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Content
/// This endpoint returns a content by its ID
///
/// @param _id Content ID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentIdGetWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Import a deal
/// This endpoint imports a deal into the shuttle.
///
/// @param body Import a deal
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentImportdealPostWithBody: (SWGMainImportDealBody*) body
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// List all pinned content
/// This endpoint lists all content
///
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentListGetWithCompletionHandler: 
    (void (^)(NSString* output, NSError* error)) handler;


/// Read content
/// This endpoint reads content from the blockstore
///
/// @param cont CID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentReadContGetWithCont: (NSString*) cont
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Get staging zone for user
/// This endpoint is used to get staging zone for user.
///
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentStagingZonesGetWithCompletionHandler: 
    (void (^)(NSString* output, NSError* error)) handler;


/// Get content statistics
/// This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
///
/// @param limit limit
/// @param offset offset
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentStatsGetWithLimit: (NSString*) limit
    offset: (NSString*) offset
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;


/// Content Status
/// This endpoint returns the status of a content
///
/// @param _id Content ID
/// 
///  code:200 message:"OK",
///  code:400 message:"Bad Request",
///  code:500 message:"Internal Server Error"
///
/// @return NSString*
-(NSURLSessionTask*) contentStatusIdGetWithId: (NSNumber*) _id
    completionHandler: (void (^)(NSString* output, NSError* error)) handler;



@end
