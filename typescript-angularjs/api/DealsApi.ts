/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class DealsApi {
    protected basePath = 'https://api.estuary.tech';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
     * This endpoint estimates the cost of a deal
     * @summary Estimate the cost of a deal
     * @param body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
     */
    public dealEstimatePost (body: models.MainEstimateDealBody, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/estimate';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling dealEstimatePost.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: body,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the deal info for a deal
     * @summary Get Deal Info
     * @param dealid Deal ID
     */
    public dealInfoDealidGet (dealid: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/info/{dealid}'
            .replace('{' + 'dealid' + '}', encodeURIComponent(String(dealid)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'dealid' is not null or undefined
        if (dealid === null || dealid === undefined) {
            throw new Error('Required parameter dealid was null or undefined when calling dealInfoDealidGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the proposal for a deal
     * @summary Get Proposal
     * @param propcid Proposal CID
     */
    public dealProposalPropcidGet (propcid: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/proposal/{propcid}'
            .replace('{' + 'propcid' + '}', encodeURIComponent(String(propcid)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'propcid' is not null or undefined
        if (propcid === null || propcid === undefined) {
            throw new Error('Required parameter propcid was null or undefined when calling dealProposalPropcidGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the ask for a given CID
     * @summary Query Ask
     * @param miner CID
     */
    public dealQueryMinerGet (miner: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/query/{miner}'
            .replace('{' + 'miner' + '}', encodeURIComponent(String(miner)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'miner' is not null or undefined
        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling dealQueryMinerGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * Get Deal Status by PropCid
     * @summary Get Deal Status by PropCid
     * @param propcid PropCid
     */
    public dealStatusByProposalPropcidGet (propcid: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/status-by-proposal/{propcid}'
            .replace('{' + 'propcid' + '}', encodeURIComponent(String(propcid)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'propcid' is not null or undefined
        if (propcid === null || propcid === undefined) {
            throw new Error('Required parameter propcid was null or undefined when calling dealStatusByProposalPropcidGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the status of a deal
     * @summary Deal Status
     * @param miner Miner
     * @param propcid Proposal CID
     */
    public dealStatusMinerPropcidGet (miner: string, propcid: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/status/{miner}/{propcid}'
            .replace('{' + 'miner' + '}', encodeURIComponent(String(miner)))
            .replace('{' + 'propcid' + '}', encodeURIComponent(String(propcid)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'miner' is not null or undefined
        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling dealStatusMinerPropcidGet.');
        }

        // verify required parameter 'propcid' is not null or undefined
        if (propcid === null || propcid === undefined) {
            throw new Error('Required parameter propcid was null or undefined when calling dealStatusMinerPropcidGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the in-progress transfers
     * @summary Transfer In Progress
     */
    public dealTransferInProgressGet (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/transfer/in-progress';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the status of a transfer
     * @summary Transfer Status
     */
    public dealTransferStatusPost (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deal/transfer/status';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns a list of storage failures for user
     * @summary Get storage failures for user
     */
    public dealsFailuresGet (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deals/failures';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint makes a deal for a given content and miner
     * @summary Make Deal
     * @param miner Miner
     * @param dealRequest Deal Request
     */
    public dealsMakeMinerPost (miner: string, dealRequest: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deals/make/{miner}'
            .replace('{' + 'miner' + '}', encodeURIComponent(String(miner)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'miner' is not null or undefined
        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling dealsMakeMinerPost.');
        }

        // verify required parameter 'dealRequest' is not null or undefined
        if (dealRequest === null || dealRequest === undefined) {
            throw new Error('Required parameter dealRequest was null or undefined when calling dealsMakeMinerPost.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'POST',
            url: localVarPath,
            data: dealRequest,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the status of a deal
     * @summary Get Deal Status
     * @param deal Deal ID
     */
    public dealsStatusDealGet (deal: number, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/deals/status/{deal}'
            .replace('{' + 'deal' + '}', encodeURIComponent(String(deal)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'deal' is not null or undefined
        if (deal === null || deal === undefined) {
            throw new Error('Required parameter deal was null or undefined when calling dealsStatusDealGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns a list of storage failures
     * @summary Get storage failures
     */
    public publicDealsFailuresGet (extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/public/deals/failures';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
     * This endpoint returns the ask for a given CID
     * @summary Query Ask
     * @param miner CID
     */
    public publicMinersStorageQueryMinerGet (miner: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<{}> {
        const localVarPath = this.basePath + '/public/miners/storage/query/{miner}'
            .replace('{' + 'miner' + '}', encodeURIComponent(String(miner)));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'miner' is not null or undefined
        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling publicMinersStorageQueryMinerGet.');
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
            params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
