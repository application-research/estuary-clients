/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.ContentApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is the API for the Estuary application.
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0 Apache-2.0 OR MIT
 * https://github.com/application-research/estuary/blob/master/LICENSE.md
 */

goog.provide('API.Client.ContentApi');

goog.require('API.Client.MainImportDealBody');
goog.require('API.Client.UtilContentAddIpfsBody');
goog.require('API.Client.util.ContentAddResponse');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.ContentApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('ContentApiBasePath') ?
                   /** @type {!string} */ ($injector.get('ContentApiBasePath')) :
                   'https://api.estuary.tech';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('ContentApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('ContentApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.ContentApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Add Car object
 * This endpoint is used to add a car object to the network. The object can be a file or a directory.
 * @param {!string} body Car
 * @param {!string=} opt_filename Filename
 * @param {!string=} opt_commp Commp
 * @param {!string=} opt_size Size
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentAddCarPost = function(body, opt_filename, opt_commp, opt_size, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/add-car';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling contentAddCarPost');
  }
  if (opt_filename !== undefined) {
    queryParameters['filename'] = opt_filename;
  }

  if (opt_commp !== undefined) {
    queryParameters['commp'] = opt_commp;
  }

  if (opt_size !== undefined) {
    queryParameters['size'] = opt_size;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add IPFS object
 * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
 * @param {!UtilContentAddIpfsBody} body IPFS Body
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentAddIpfsPost = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/add-ipfs';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling contentAddIpfsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add new content
 * This endpoint is used to upload new content.
 * @param {!Object} file File to upload
 * @param {!string} coluuid Collection UUID
 * @param {!string} dir Directory
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.util.ContentAddResponse>}
 */
API.Client.ContentApi.prototype.contentAddPost = function(file, coluuid, dir, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/add'
      .replace('{' + 'coluuid' + '}', String(coluuid))
      .replace('{' + 'dir' + '}', String(dir));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var formParams = {};

  // verify required parameter 'file' is set
  if (!file) {
    throw new Error('Missing required parameter file when calling contentAddPost');
  }
  // verify required parameter 'coluuid' is set
  if (!coluuid) {
    throw new Error('Missing required parameter coluuid when calling contentAddPost');
  }
  // verify required parameter 'dir' is set
  if (!dir) {
    throw new Error('Missing required parameter dir when calling contentAddPost');
  }
  headerParams['Content-Type'] = 'application/x-www-form-urlencoded';

  formParams['file'] = file;

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: false,
        data: this.httpParamSerializer(formParams),
    params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get aggregated content stats
 * This endpoint returns aggregated content stats
 * @param {!string} content Content ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ContentApi.prototype.contentAggregatedContentGet = function(content, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/aggregated/{content}'
      .replace('{' + 'content' + '}', String(content));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'content' is set
  if (!content) {
    throw new Error('Missing required parameter content when calling contentAggregatedContentGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get all deals for a user
 * This endpoint is used to get all deals for a user
 * @param {!string} begin Begin
 * @param {!string} duration Duration
 * @param {!string} all All
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentAllDealsGet = function(begin, duration, all, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/all-deals';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'begin' is set
  if (!begin) {
    throw new Error('Missing required parameter begin when calling contentAllDealsGet');
  }
  // verify required parameter 'duration' is set
  if (!duration) {
    throw new Error('Missing required parameter duration when calling contentAllDealsGet');
  }
  // verify required parameter 'all' is set
  if (!all) {
    throw new Error('Missing required parameter all when calling contentAllDealsGet');
  }
  if (begin !== undefined) {
    queryParameters['begin'] = begin;
  }

  if (duration !== undefined) {
    queryParameters['duration'] = duration;
  }

  if (all !== undefined) {
    queryParameters['all'] = all;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get content bandwidth
 * This endpoint returns content bandwidth
 * @param {!string} content Content ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentBwUsageContentGet = function(content, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/bw-usage/{content}'
      .replace('{' + 'content' + '}', String(content));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'content' is set
  if (!content) {
    throw new Error('Missing required parameter content when calling contentBwUsageContentGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add a new content
 * This endpoint adds a new content
 * @param {!string} body Content
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentCreatePost = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/create';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling contentCreatePost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Content with deals
 * This endpoint lists all content with deals
 * @param {!number=} opt_limit Limit
 * @param {!number=} opt_offset Offset
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentDealsGet = function(opt_limit, opt_offset, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/deals';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  if (opt_limit !== undefined) {
    queryParameters['limit'] = opt_limit;
  }

  if (opt_offset !== undefined) {
    queryParameters['offset'] = opt_offset;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Ensure Replication
 * This endpoint ensures that the content is replicated to the specified number of providers
 * @param {!string} datacid Data CID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentEnsureReplicationDatacidGet = function(datacid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/ensure-replication/{datacid}'
      .replace('{' + 'datacid' + '}', String(datacid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'datacid' is set
  if (!datacid) {
    throw new Error('Missing required parameter datacid when calling contentEnsureReplicationDatacidGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List all failures for a content
 * This endpoint returns all failures for a content
 * @param {!string} content Content ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.ContentApi.prototype.contentFailuresContentGet = function(content, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/failures/{content}'
      .replace('{' + 'content' + '}', String(content));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'content' is set
  if (!content) {
    throw new Error('Missing required parameter content when calling contentFailuresContentGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Import a deal
 * This endpoint imports a deal into the shuttle.
 * @param {!MainImportDealBody} body Import a deal
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentImportdealPost = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/importdeal';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling contentImportdealPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List all pinned content
 * This endpoint lists all content
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!string>>}
 */
API.Client.ContentApi.prototype.contentListGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/list';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Read content
 * This endpoint reads content from the blockstore
 * @param {!string} cont CID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentReadContGet = function(cont, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/read/{cont}'
      .replace('{' + 'cont' + '}', String(cont));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'cont' is set
  if (!cont) {
    throw new Error('Missing required parameter cont when calling contentReadContGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get staging zone for user
 * This endpoint is used to get staging zone for user.
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentStagingZonesGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/staging-zones';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get content statistics
 * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
 * @param {!string} limit limit
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentStatsGet = function(limit, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/stats'
      .replace('{' + 'limit' + '}', String(limit));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'limit' is set
  if (!limit) {
    throw new Error('Missing required parameter limit when calling contentStatsGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Content Status
 * This endpoint returns the status of a content
 * @param {!number} id Content ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.ContentApi.prototype.contentStatusIdGet = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/content/status/{id}'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling contentStatusIdGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
