/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.PinningApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is the API for the Estuary application.
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0 Apache-2.0 OR MIT
 * https://github.com/application-research/estuary/blob/master/LICENSE.md
 */

goog.provide('API.Client.PinningApi');

goog.require('API.Client.TypesIpfsPin');
goog.require('API.Client.types.IpfsListPinStatusResponse');
goog.require('API.Client.types.IpfsPinStatusResponse');
goog.require('API.Client.util.HttpError');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.PinningApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('PinningApiBasePath') ?
                   /** @type {!string} */ ($injector.get('PinningApiBasePath')) :
                   'https://api.estuary.tech';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('PinningApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('PinningApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.PinningApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * List all pin status objects
 * This endpoint lists all pin status objects
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.types.IpfsListPinStatusResponse>}
 */
API.Client.PinningApi.prototype.pinningPinsGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/pinning/pins';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Delete a pinned object
 * This endpoint deletes a pinned object.
 * @param {!string} pinid Pin ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.PinningApi.prototype.pinningPinsPinidDelete = function(pinid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/pinning/pins/{pinid}'
      .replace('{' + 'pinid' + '}', String(pinid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'pinid' is set
  if (!pinid) {
    throw new Error('Missing required parameter pinid when calling pinningPinsPinidDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get a pin status object
 * This endpoint returns a pin status object.
 * @param {!string} pinid cid
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.types.IpfsPinStatusResponse>}
 */
API.Client.PinningApi.prototype.pinningPinsPinidGet = function(pinid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/pinning/pins/{pinid}'
      .replace('{' + 'pinid' + '}', String(pinid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'pinid' is set
  if (!pinid) {
    throw new Error('Missing required parameter pinid when calling pinningPinsPinidGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Replace a pinned object
 * This endpoint replaces a pinned object.
 * @param {!string} pinid Pin ID
 * @param {!string} cid CID of new pin
 * @param {!string=} opt_name Name (filename) of new pin
 * @param {!string=} opt_origins Origins of new pin
 * @param {!string=} opt_meta Meta information of new pin
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.types.IpfsPinStatusResponse>}
 */
API.Client.PinningApi.prototype.pinningPinsPinidPost = function(pinid, cid, opt_name, opt_origins, opt_meta, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/pinning/pins/{pinid}'
      .replace('{' + 'pinid' + '}', String(pinid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'pinid' is set
  if (!pinid) {
    throw new Error('Missing required parameter pinid when calling pinningPinsPinidPost');
  }
  // verify required parameter 'cid' is set
  if (!cid) {
    throw new Error('Missing required parameter cid when calling pinningPinsPinidPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: opt_meta,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add and pin object
 * This endpoint adds a pin to the IPFS daemon.
 * @param {!TypesIpfsPin} pin Pin Body {cid:cid, name:name}
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.types.IpfsPinStatusResponse>}
 */
API.Client.PinningApi.prototype.pinningPinsPost = function(pin, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/pinning/pins';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'pin' is set
  if (!pin) {
    throw new Error('Missing required parameter pin when calling pinningPinsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: pin,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
