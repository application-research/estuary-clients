/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.DealsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is the API for the Estuary application.
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0 Apache-2.0 OR MIT
 * https://github.com/application-research/estuary/blob/master/LICENSE.md
 */

goog.provide('API.Client.DealsApi');

goog.require('API.Client.MainEstimateDealBody');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.DealsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('DealsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('DealsApiBasePath')) :
                   'https://api.estuary.tech';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('DealsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('DealsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.DealsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Estimate the cost of a deal
 * This endpoint estimates the cost of a deal
 * @param {!MainEstimateDealBody} body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealEstimatePost = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/estimate';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling dealEstimatePost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Deal Info
 * This endpoint returns the deal info for a deal
 * @param {!number} dealid Deal ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealInfoDealidGet = function(dealid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/info/{dealid}'
      .replace('{' + 'dealid' + '}', String(dealid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'dealid' is set
  if (!dealid) {
    throw new Error('Missing required parameter dealid when calling dealInfoDealidGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Proposal
 * This endpoint returns the proposal for a deal
 * @param {!string} propcid Proposal CID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealProposalPropcidGet = function(propcid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/proposal/{propcid}'
      .replace('{' + 'propcid' + '}', String(propcid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'propcid' is set
  if (!propcid) {
    throw new Error('Missing required parameter propcid when calling dealProposalPropcidGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Query Ask
 * This endpoint returns the ask for a given CID
 * @param {!string} miner CID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealQueryMinerGet = function(miner, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/query/{miner}'
      .replace('{' + 'miner' + '}', String(miner));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'miner' is set
  if (!miner) {
    throw new Error('Missing required parameter miner when calling dealQueryMinerGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Deal Status by PropCid
 * Get Deal Status by PropCid
 * @param {!string} propcid PropCid
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealStatusByProposalPropcidGet = function(propcid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/status-by-proposal/{propcid}'
      .replace('{' + 'propcid' + '}', String(propcid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'propcid' is set
  if (!propcid) {
    throw new Error('Missing required parameter propcid when calling dealStatusByProposalPropcidGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deal Status
 * This endpoint returns the status of a deal
 * @param {!string} miner Miner
 * @param {!string} propcid Proposal CID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealStatusMinerPropcidGet = function(miner, propcid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/status/{miner}/{propcid}'
      .replace('{' + 'miner' + '}', String(miner))
      .replace('{' + 'propcid' + '}', String(propcid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'miner' is set
  if (!miner) {
    throw new Error('Missing required parameter miner when calling dealStatusMinerPropcidGet');
  }
  // verify required parameter 'propcid' is set
  if (!propcid) {
    throw new Error('Missing required parameter propcid when calling dealStatusMinerPropcidGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Transfer In Progress
 * This endpoint returns the in-progress transfers
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealTransferInProgressGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/transfer/in-progress';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Transfer Status
 * This endpoint returns the status of a transfer
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealTransferStatusPost = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deal/transfer/status';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get storage failures for user
 * This endpoint returns a list of storage failures for user
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealsFailuresGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deals/failures';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Make Deal
 * This endpoint makes a deal for a given content and miner
 * @param {!string} miner Miner
 * @param {!string} dealRequest Deal Request
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealsMakeMinerPost = function(miner, dealRequest, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deals/make/{miner}'
      .replace('{' + 'miner' + '}', String(miner));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'miner' is set
  if (!miner) {
    throw new Error('Missing required parameter miner when calling dealsMakeMinerPost');
  }
  // verify required parameter 'dealRequest' is set
  if (!dealRequest) {
    throw new Error('Missing required parameter dealRequest when calling dealsMakeMinerPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: dealRequest,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get Deal Status
 * This endpoint returns the status of a deal
 * @param {!number} deal Deal ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.dealsStatusDealGet = function(deal, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/deals/status/{deal}'
      .replace('{' + 'deal' + '}', String(deal));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'deal' is set
  if (!deal) {
    throw new Error('Missing required parameter deal when calling dealsStatusDealGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get storage failures
 * This endpoint returns a list of storage failures
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.publicDealsFailuresGet = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/public/deals/failures';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Query Ask
 * This endpoint returns the ask for a given CID
 * @param {!string} miner CID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.DealsApi.prototype.publicMinersStorageQueryMinerGet = function(miner, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/public/miners/storage/query/{miner}'
      .replace('{' + 'miner' + '}', String(miner));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'miner' is set
  if (!miner) {
    throw new Error('Missing required parameter miner when calling publicMinersStorageQueryMinerGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
