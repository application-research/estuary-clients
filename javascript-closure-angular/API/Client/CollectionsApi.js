/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.CollectionsApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * This is the API for the Estuary application.
 * Version: 0.0.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
/**
 * @license Apache 2.0 Apache-2.0 OR MIT
 * https://github.com/application-research/estuary/blob/master/LICENSE.md
 */

goog.provide('API.Client.CollectionsApi');

goog.require('API.Client.MainCreateCollectionBody');
goog.require('API.Client.main.Collection');
goog.require('API.Client.util.HttpError');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.CollectionsApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('CollectionsApiBasePath') ?
                   /** @type {!string} */ ($injector.get('CollectionsApiBasePath')) :
                   'https://api.estuary.tech';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('CollectionsApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('CollectionsApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.CollectionsApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * Produce a CID of the collection contents
 * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
 * @param {!string} coluuid coluuid
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CollectionsApi.prototype.collectionsColuuidCommitPost = function(coluuid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/{coluuid}/commit'
      .replace('{' + 'coluuid' + '}', String(coluuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'coluuid' is set
  if (!coluuid) {
    throw new Error('Missing required parameter coluuid when calling collectionsColuuidCommitPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Deletes a collection
 * This endpoint is used to delete an existing collection.
 * @param {!string} coluuid Collection ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CollectionsApi.prototype.collectionsColuuidDelete = function(coluuid, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/{coluuid}'
      .replace('{' + 'coluuid' + '}', String(coluuid));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'coluuid' is set
  if (!coluuid) {
    throw new Error('Missing required parameter coluuid when calling collectionsColuuidDelete');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'DELETE',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Get contents in a collection
 * This endpoint is used to get contents in a collection. If no colpath query param is passed
 * @param {!string} coluuid Collection UUID
 * @param {!string=} opt_dir Directory
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.CollectionsApi.prototype.collectionsColuuidGet = function(coluuid, opt_dir, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/{coluuid}';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'coluuid' is set
  if (!coluuid) {
    throw new Error('Missing required parameter coluuid when calling collectionsColuuidGet');
  }
  if (coluuid !== undefined) {
    queryParameters['coluuid'] = coluuid;
  }

  if (opt_dir !== undefined) {
    queryParameters['dir'] = opt_dir;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add contents to a collection
 * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
 * @param {!Array<!number>} body Content IDs to add to collection
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Object<!string, string>>}
 */
API.Client.CollectionsApi.prototype.collectionsColuuidPost = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/{coluuid}';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling collectionsColuuidPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Add a file to a collection
 * This endpoint adds a file to a collection
 * @param {!string} coluuid Collection ID
 * @param {!string} content Content
 * @param {!string} path Path to file
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise}
 */
API.Client.CollectionsApi.prototype.collectionsFsAddPost = function(coluuid, content, path, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/fs/add';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'coluuid' is set
  if (!coluuid) {
    throw new Error('Missing required parameter coluuid when calling collectionsFsAddPost');
  }
  // verify required parameter 'content' is set
  if (!content) {
    throw new Error('Missing required parameter content when calling collectionsFsAddPost');
  }
  // verify required parameter 'path' is set
  if (!path) {
    throw new Error('Missing required parameter path when calling collectionsFsAddPost');
  }
  if (coluuid !== undefined) {
    queryParameters['coluuid'] = coluuid;
  }

  if (content !== undefined) {
    queryParameters['content'] = content;
  }

  if (path !== undefined) {
    queryParameters['path'] = path;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * List all collections
 * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
 * @param {!number} id User ID
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!Array<!API.Client.main.Collection>>}
 */
API.Client.CollectionsApi.prototype.collectionsGet = function(id, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/'
      .replace('{' + 'id' + '}', String(id));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'id' is set
  if (!id) {
    throw new Error('Missing required parameter id when calling collectionsGet');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * Create a new collection
 * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
 * @param {!MainCreateCollectionBody} body Collection name and description
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.main.Collection>}
 */
API.Client.CollectionsApi.prototype.collectionsPost = function(body, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/collections/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'body' is set
  if (!body) {
    throw new Error('Missing required parameter body when calling collectionsPost');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'POST',
    url: path,
    json: true,
    data: body,
        params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
