//
// PinningAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PinningAPI {
    /**
     List all pin status objects
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pinningPinsGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pinningPinsGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all pin status objects
     - GET /pinning/pins
     - This endpoint lists all pin status objects
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func pinningPinsGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/pinning/pins"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Delete a pinned object
     
     - parameter pinid: (path) Pin ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pinningPinsPinidDelete(pinid: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pinningPinsPinidDeleteWithRequestBuilder(pinid: pinid).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Delete a pinned object
     - DELETE /pinning/pins/{pinid}
     - This endpoint deletes a pinned object.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter pinid: (path) Pin ID 

     - returns: RequestBuilder<Void> 
     */
    open class func pinningPinsPinidDeleteWithRequestBuilder(pinid: String) -> RequestBuilder<Void> {
        var path = "/pinning/pins/{pinid}"
        let pinidPreEscape = "\(pinid)"
        let pinidPostEscape = pinidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinid}", with: pinidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get a pin status object
     
     - parameter pinid: (path) cid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pinningPinsPinidGet(pinid: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pinningPinsPinidGetWithRequestBuilder(pinid: pinid).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Get a pin status object
     - GET /pinning/pins/{pinid}
     - This endpoint returns a pin status object.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter pinid: (path) cid 

     - returns: RequestBuilder<Void> 
     */
    open class func pinningPinsPinidGetWithRequestBuilder(pinid: String) -> RequestBuilder<Void> {
        var path = "/pinning/pins/{pinid}"
        let pinidPreEscape = "\(pinid)"
        let pinidPostEscape = pinidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinid}", with: pinidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Replace a pinned object
     
     - parameter pinid: (path) Pin ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pinningPinsPinidPost(pinid: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pinningPinsPinidPostWithRequestBuilder(pinid: pinid).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Replace a pinned object
     - POST /pinning/pins/{pinid}
     - This endpoint replaces a pinned object.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter pinid: (path) Pin ID 

     - returns: RequestBuilder<Void> 
     */
    open class func pinningPinsPinidPostWithRequestBuilder(pinid: String) -> RequestBuilder<Void> {
        var path = "/pinning/pins/{pinid}"
        let pinidPreEscape = "\(pinid)"
        let pinidPostEscape = pinidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{pinid}", with: pinidPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add and pin object
     
     - parameter cid: (path) cid 
     - parameter name: (path) name 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func pinningPinsPost(cid: String, name: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        pinningPinsPostWithRequestBuilder(cid: cid, name: name).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add and pin object
     - POST /pinning/pins
     - This endpoint adds a pin to the IPFS daemon.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter cid: (path) cid 
     - parameter name: (path) name 

     - returns: RequestBuilder<Void> 
     */
    open class func pinningPinsPostWithRequestBuilder(cid: String, name: String) -> RequestBuilder<Void> {
        var path = "/pinning/pins"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let namePreEscape = "\(name)"
        let namePostEscape = namePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{name}", with: namePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
