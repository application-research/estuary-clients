//
// PeersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class PeersAPI {
    /**
     Remove peers on Peering Service
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminPeeringPeersDelete(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminPeeringPeersDeleteWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Remove peers on Peering Service
     - DELETE /admin/peering/peers
     - This endpoint can be used to remove a Peer from the Peering Service
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func adminPeeringPeersDeleteWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/admin/peering/peers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List all Peering peers
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminPeeringPeersGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminPeeringPeersGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     List all Peering peers
     - GET /admin/peering/peers
     - This endpoint can be used to list all peers on Peering Service
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func adminPeeringPeersGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/admin/peering/peers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Add peers on Peering Service
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminPeeringPeersPost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminPeeringPeersPostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Add peers on Peering Service
     - POST /admin/peering/peers
     - This endpoint can be used to add a Peer from the Peering Service
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func adminPeeringPeersPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/admin/peering/peers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Start Peering
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminPeeringStartPost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminPeeringStartPostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Start Peering
     - POST /admin/peering/start
     - This endpoint can be used to start the Peering Service
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func adminPeeringStartPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/admin/peering/start"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Check Peering Status
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminPeeringStatusGet(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminPeeringStatusGetWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Check Peering Status
     - GET /admin/peering/status
     - This endpoint can be used to check the Peering status
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func adminPeeringStatusGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/admin/peering/status"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Stop Peering
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func adminPeeringStopPost(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        adminPeeringStopPostWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Stop Peering
     - POST /admin/peering/stop
     - This endpoint can be used to stop the Peering Service
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    open class func adminPeeringStopPostWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/admin/peering/stop"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
