//
// UtilContent.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation


public struct UtilContent: Codable {


    public var active: Bool?

    public var aggregate: Bool?

    /** TODO: shift most of the &#x27;state&#x27; booleans in here into a single state field, should make reasoning about things much simpler */
    public var aggregatedIn: Int?

    public var cid: UtilDbCID?

    public var createdAt: String?

    /** If set, this content is part of a split dag. In such a case, the &#x27;root&#x27; content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates) */
    public var dagSplit: Bool?

    public var dealStatus: String?

    public var _description: String?

    public var failed: Bool?

    public var _id: Int?

    public var location: String?

    public var name: String?

    public var offloaded: Bool?

    public var origins: String?

    public var pinMeta: String?

    public var pinning: Bool?

    public var pinningStatus: String?

    public var replace: Bool?

    public var replication: Int?

    public var size: Int?

    public var splitFrom: Int?

    public var type: UtilContentType?

    public var updatedAt: String?

    public var userId: Int?
    public init(active: Bool? = nil, aggregate: Bool? = nil, aggregatedIn: Int? = nil, cid: UtilDbCID? = nil, createdAt: String? = nil, dagSplit: Bool? = nil, dealStatus: String? = nil, _description: String? = nil, failed: Bool? = nil, _id: Int? = nil, location: String? = nil, name: String? = nil, offloaded: Bool? = nil, origins: String? = nil, pinMeta: String? = nil, pinning: Bool? = nil, pinningStatus: String? = nil, replace: Bool? = nil, replication: Int? = nil, size: Int? = nil, splitFrom: Int? = nil, type: UtilContentType? = nil, updatedAt: String? = nil, userId: Int? = nil) { 
        self.active = active
        self.aggregate = aggregate
        self.aggregatedIn = aggregatedIn
        self.cid = cid
        self.createdAt = createdAt
        self.dagSplit = dagSplit
        self.dealStatus = dealStatus
        self._description = _description
        self.failed = failed
        self._id = _id
        self.location = location
        self.name = name
        self.offloaded = offloaded
        self.origins = origins
        self.pinMeta = pinMeta
        self.pinning = pinning
        self.pinningStatus = pinningStatus
        self.replace = replace
        self.replication = replication
        self.size = size
        self.splitFrom = splitFrom
        self.type = type
        self.updatedAt = updatedAt
        self.userId = userId
    }
    public enum CodingKeys: String, CodingKey { 
        case active
        case aggregate
        case aggregatedIn
        case cid
        case createdAt
        case dagSplit
        case dealStatus
        case _description = "description"
        case failed
        case _id = "id"
        case location
        case name
        case offloaded
        case origins
        case pinMeta
        case pinning
        case pinningStatus
        case replace
        case replication
        case size
        case splitFrom
        case type
        case updatedAt
        case userId
    }

}
