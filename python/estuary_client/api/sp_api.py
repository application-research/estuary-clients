# coding: utf-8

"""
    Estuary API

    This is the API for the Estuary application.  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from estuary_client.api_client import ApiClient


class SpApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def storage_providers_claim_post(self, body, **kwargs):  # noqa: E501
        """Claim Storage Provider  # noqa: E501

        This endpoint lets a user claim a storage provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_claim_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MinerClaimMinerBody body: Claim Storage Provider Body (required)
        :return: GithubComApplicationResearchEstuaryApiV2ClaimResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_claim_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_claim_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def storage_providers_claim_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Claim Storage Provider  # noqa: E501

        This endpoint lets a user claim a storage provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_claim_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MinerClaimMinerBody body: Claim Storage Provider Body (required)
        :return: GithubComApplicationResearchEstuaryApiV2ClaimResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_claim_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_providers_claim_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/claim', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GithubComApplicationResearchEstuaryApiV2ClaimResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_claim_sp_get(self, sp, **kwargs):  # noqa: E501
        """Get Claim Storage Provider  # noqa: E501

        This endpoint lets a user get the message in order to claim a storage provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_claim_sp_get(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Storage Provider claim message (required)
        :return: GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_claim_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_claim_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_claim_sp_get_with_http_info(self, sp, **kwargs):  # noqa: E501
        """Get Claim Storage Provider  # noqa: E501

        This endpoint lets a user get the message in order to claim a storage provider  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_claim_sp_get_with_http_info(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Storage Provider claim message (required)
        :return: GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_claim_sp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_claim_sp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/claim/{sp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_deals_sp_get(self, sp, **kwargs):  # noqa: E501
        """Get all storage providers deals  # noqa: E501

        This endpoint returns all storage providers deals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_deals_sp_get(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Filter by storage provider (required)
        :param str ignore_failed: Ignore Failed
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_deals_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_deals_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_deals_sp_get_with_http_info(self, sp, **kwargs):  # noqa: E501
        """Get all storage providers deals  # noqa: E501

        This endpoint returns all storage providers deals  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_deals_sp_get_with_http_info(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Filter by storage provider (required)
        :param str ignore_failed: Ignore Failed
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sp', 'ignore_failed']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_deals_sp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_deals_sp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []
        if 'ignore_failed' in params:
            query_params.append(('ignore-failed', params['ignore_failed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/deals/{sp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_failures_sp_get(self, sp, **kwargs):  # noqa: E501
        """Get all storage providers  # noqa: E501

        This endpoint returns all storage providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_failures_sp_get(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Filter by storage provider (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_failures_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_failures_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_failures_sp_get_with_http_info(self, sp, **kwargs):  # noqa: E501
        """Get all storage providers  # noqa: E501

        This endpoint returns all storage providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_failures_sp_get_with_http_info(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Filter by storage provider (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_failures_sp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_failures_sp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/failures/{sp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_get(self, **kwargs):  # noqa: E501
        """Get all storage providers  # noqa: E501

        This endpoint returns all storage providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiStorageProviderResp]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def storage_providers_get_with_http_info(self, **kwargs):  # noqa: E501
        """Get all storage providers  # noqa: E501

        This endpoint returns all storage providers  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[ApiStorageProviderResp]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[ApiStorageProviderResp]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_set_info_sp_put(self, body, sp, **kwargs):  # noqa: E501
        """Set Storage Provider Info  # noqa: E501

        This endpoint lets a user set storage provider info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_set_info_sp_put(body, sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MinerMinerSetInfoParams body: Storage Provider set info params (required)
        :param str sp: Storage Provider to set info for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_set_info_sp_put_with_http_info(body, sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_set_info_sp_put_with_http_info(body, sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_set_info_sp_put_with_http_info(self, body, sp, **kwargs):  # noqa: E501
        """Set Storage Provider Info  # noqa: E501

        This endpoint lets a user set storage provider info.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_set_info_sp_put_with_http_info(body, sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MinerMinerSetInfoParams body: Storage Provider set info params (required)
        :param str sp: Storage Provider to set info for (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_set_info_sp_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_providers_set_info_sp_put`")  # noqa: E501
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_set_info_sp_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/set-info/{sp}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_stats_sp_get(self, sp, **kwargs):  # noqa: E501
        """Get storage provider stats  # noqa: E501

        This endpoint returns storage provider stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_stats_sp_get(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Filter by storage provider (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_stats_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_stats_sp_get_with_http_info(sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_stats_sp_get_with_http_info(self, sp, **kwargs):  # noqa: E501
        """Get storage provider stats  # noqa: E501

        This endpoint returns storage provider stats  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_stats_sp_get_with_http_info(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Filter by storage provider (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_stats_sp_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_stats_sp_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/stats/{sp}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_suspend_sp_post(self, body, sp, **kwargs):  # noqa: E501
        """Suspend Storage Provider  # noqa: E501

        This endpoint lets a user suspend a storage provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_suspend_sp_post(body, sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MinerSuspendMinerBody body: Suspend Storage Provider Body (required)
        :param str sp: Storage Provider to suspend (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_suspend_sp_post_with_http_info(body, sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_suspend_sp_post_with_http_info(body, sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_suspend_sp_post_with_http_info(self, body, sp, **kwargs):  # noqa: E501
        """Suspend Storage Provider  # noqa: E501

        This endpoint lets a user suspend a storage provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_suspend_sp_post_with_http_info(body, sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MinerSuspendMinerBody body: Suspend Storage Provider Body (required)
        :param str sp: Storage Provider to suspend (required)
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'sp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_suspend_sp_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `storage_providers_suspend_sp_post`")  # noqa: E501
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_suspend_sp_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/suspend/{sp}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='dict(str, str)',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def storage_providers_unsuspend_sp_put(self, sp, **kwargs):  # noqa: E501
        """Unuspend Storage Provider  # noqa: E501

        This endpoint lets a user unsuspend a Storage Provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_unsuspend_sp_put(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Storage Provider to unsuspend (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.storage_providers_unsuspend_sp_put_with_http_info(sp, **kwargs)  # noqa: E501
        else:
            (data) = self.storage_providers_unsuspend_sp_put_with_http_info(sp, **kwargs)  # noqa: E501
            return data

    def storage_providers_unsuspend_sp_put_with_http_info(self, sp, **kwargs):  # noqa: E501
        """Unuspend Storage Provider  # noqa: E501

        This endpoint lets a user unsuspend a Storage Provider.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.storage_providers_unsuspend_sp_put_with_http_info(sp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str sp: Storage Provider to unsuspend (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method storage_providers_unsuspend_sp_put" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sp' is set
        if ('sp' not in params or
                params['sp'] is None):
            raise ValueError("Missing the required parameter `sp` when calling `storage_providers_unsuspend_sp_put`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sp' in params:
            path_params['sp'] = params['sp']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/storage-providers/unsuspend/{sp}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
