# coding: utf-8

"""
    Estuary API

    This is the API for the Estuary application.  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UtilUserSettings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content_adding_disabled': 'bool',
        'deal_duration': 'int',
        'deal_making_disabled': 'bool',
        'file_staging_threshold': 'int',
        'flags': 'int',
        'replication': 'int',
        'upload_endpoints': 'list[str]',
        'verified': 'bool'
    }

    attribute_map = {
        'content_adding_disabled': 'contentAddingDisabled',
        'deal_duration': 'dealDuration',
        'deal_making_disabled': 'dealMakingDisabled',
        'file_staging_threshold': 'fileStagingThreshold',
        'flags': 'flags',
        'replication': 'replication',
        'upload_endpoints': 'uploadEndpoints',
        'verified': 'verified'
    }

    def __init__(self, content_adding_disabled=None, deal_duration=None, deal_making_disabled=None, file_staging_threshold=None, flags=None, replication=None, upload_endpoints=None, verified=None):  # noqa: E501
        """UtilUserSettings - a model defined in Swagger"""  # noqa: E501
        self._content_adding_disabled = None
        self._deal_duration = None
        self._deal_making_disabled = None
        self._file_staging_threshold = None
        self._flags = None
        self._replication = None
        self._upload_endpoints = None
        self._verified = None
        self.discriminator = None
        if content_adding_disabled is not None:
            self.content_adding_disabled = content_adding_disabled
        if deal_duration is not None:
            self.deal_duration = deal_duration
        if deal_making_disabled is not None:
            self.deal_making_disabled = deal_making_disabled
        if file_staging_threshold is not None:
            self.file_staging_threshold = file_staging_threshold
        if flags is not None:
            self.flags = flags
        if replication is not None:
            self.replication = replication
        if upload_endpoints is not None:
            self.upload_endpoints = upload_endpoints
        if verified is not None:
            self.verified = verified

    @property
    def content_adding_disabled(self):
        """Gets the content_adding_disabled of this UtilUserSettings.  # noqa: E501


        :return: The content_adding_disabled of this UtilUserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._content_adding_disabled

    @content_adding_disabled.setter
    def content_adding_disabled(self, content_adding_disabled):
        """Sets the content_adding_disabled of this UtilUserSettings.


        :param content_adding_disabled: The content_adding_disabled of this UtilUserSettings.  # noqa: E501
        :type: bool
        """

        self._content_adding_disabled = content_adding_disabled

    @property
    def deal_duration(self):
        """Gets the deal_duration of this UtilUserSettings.  # noqa: E501


        :return: The deal_duration of this UtilUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._deal_duration

    @deal_duration.setter
    def deal_duration(self, deal_duration):
        """Sets the deal_duration of this UtilUserSettings.


        :param deal_duration: The deal_duration of this UtilUserSettings.  # noqa: E501
        :type: int
        """

        self._deal_duration = deal_duration

    @property
    def deal_making_disabled(self):
        """Gets the deal_making_disabled of this UtilUserSettings.  # noqa: E501


        :return: The deal_making_disabled of this UtilUserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._deal_making_disabled

    @deal_making_disabled.setter
    def deal_making_disabled(self, deal_making_disabled):
        """Sets the deal_making_disabled of this UtilUserSettings.


        :param deal_making_disabled: The deal_making_disabled of this UtilUserSettings.  # noqa: E501
        :type: bool
        """

        self._deal_making_disabled = deal_making_disabled

    @property
    def file_staging_threshold(self):
        """Gets the file_staging_threshold of this UtilUserSettings.  # noqa: E501


        :return: The file_staging_threshold of this UtilUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._file_staging_threshold

    @file_staging_threshold.setter
    def file_staging_threshold(self, file_staging_threshold):
        """Sets the file_staging_threshold of this UtilUserSettings.


        :param file_staging_threshold: The file_staging_threshold of this UtilUserSettings.  # noqa: E501
        :type: int
        """

        self._file_staging_threshold = file_staging_threshold

    @property
    def flags(self):
        """Gets the flags of this UtilUserSettings.  # noqa: E501


        :return: The flags of this UtilUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags):
        """Sets the flags of this UtilUserSettings.


        :param flags: The flags of this UtilUserSettings.  # noqa: E501
        :type: int
        """

        self._flags = flags

    @property
    def replication(self):
        """Gets the replication of this UtilUserSettings.  # noqa: E501


        :return: The replication of this UtilUserSettings.  # noqa: E501
        :rtype: int
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this UtilUserSettings.


        :param replication: The replication of this UtilUserSettings.  # noqa: E501
        :type: int
        """

        self._replication = replication

    @property
    def upload_endpoints(self):
        """Gets the upload_endpoints of this UtilUserSettings.  # noqa: E501


        :return: The upload_endpoints of this UtilUserSettings.  # noqa: E501
        :rtype: list[str]
        """
        return self._upload_endpoints

    @upload_endpoints.setter
    def upload_endpoints(self, upload_endpoints):
        """Sets the upload_endpoints of this UtilUserSettings.


        :param upload_endpoints: The upload_endpoints of this UtilUserSettings.  # noqa: E501
        :type: list[str]
        """

        self._upload_endpoints = upload_endpoints

    @property
    def verified(self):
        """Gets the verified of this UtilUserSettings.  # noqa: E501


        :return: The verified of this UtilUserSettings.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this UtilUserSettings.


        :param verified: The verified of this UtilUserSettings.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UtilUserSettings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilUserSettings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
