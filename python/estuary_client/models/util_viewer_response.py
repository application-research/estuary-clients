# coding: utf-8

"""
    Estuary API

    This is the API for the Estuary application.  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UtilViewerResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'auth_expiry': 'str',
        'id': 'int',
        'miners': 'list[str]',
        'perms': 'int',
        'settings': 'UtilUserSettings',
        'username': 'str'
    }

    attribute_map = {
        'address': 'address',
        'auth_expiry': 'auth_expiry',
        'id': 'id',
        'miners': 'miners',
        'perms': 'perms',
        'settings': 'settings',
        'username': 'username'
    }

    def __init__(self, address=None, auth_expiry=None, id=None, miners=None, perms=None, settings=None, username=None):  # noqa: E501
        """UtilViewerResponse - a model defined in Swagger"""  # noqa: E501
        self._address = None
        self._auth_expiry = None
        self._id = None
        self._miners = None
        self._perms = None
        self._settings = None
        self._username = None
        self.discriminator = None
        if address is not None:
            self.address = address
        if auth_expiry is not None:
            self.auth_expiry = auth_expiry
        if id is not None:
            self.id = id
        if miners is not None:
            self.miners = miners
        if perms is not None:
            self.perms = perms
        if settings is not None:
            self.settings = settings
        if username is not None:
            self.username = username

    @property
    def address(self):
        """Gets the address of this UtilViewerResponse.  # noqa: E501


        :return: The address of this UtilViewerResponse.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this UtilViewerResponse.


        :param address: The address of this UtilViewerResponse.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def auth_expiry(self):
        """Gets the auth_expiry of this UtilViewerResponse.  # noqa: E501


        :return: The auth_expiry of this UtilViewerResponse.  # noqa: E501
        :rtype: str
        """
        return self._auth_expiry

    @auth_expiry.setter
    def auth_expiry(self, auth_expiry):
        """Sets the auth_expiry of this UtilViewerResponse.


        :param auth_expiry: The auth_expiry of this UtilViewerResponse.  # noqa: E501
        :type: str
        """

        self._auth_expiry = auth_expiry

    @property
    def id(self):
        """Gets the id of this UtilViewerResponse.  # noqa: E501


        :return: The id of this UtilViewerResponse.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UtilViewerResponse.


        :param id: The id of this UtilViewerResponse.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def miners(self):
        """Gets the miners of this UtilViewerResponse.  # noqa: E501


        :return: The miners of this UtilViewerResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._miners

    @miners.setter
    def miners(self, miners):
        """Sets the miners of this UtilViewerResponse.


        :param miners: The miners of this UtilViewerResponse.  # noqa: E501
        :type: list[str]
        """

        self._miners = miners

    @property
    def perms(self):
        """Gets the perms of this UtilViewerResponse.  # noqa: E501


        :return: The perms of this UtilViewerResponse.  # noqa: E501
        :rtype: int
        """
        return self._perms

    @perms.setter
    def perms(self, perms):
        """Sets the perms of this UtilViewerResponse.


        :param perms: The perms of this UtilViewerResponse.  # noqa: E501
        :type: int
        """

        self._perms = perms

    @property
    def settings(self):
        """Gets the settings of this UtilViewerResponse.  # noqa: E501


        :return: The settings of this UtilViewerResponse.  # noqa: E501
        :rtype: UtilUserSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings):
        """Sets the settings of this UtilViewerResponse.


        :param settings: The settings of this UtilViewerResponse.  # noqa: E501
        :type: UtilUserSettings
        """

        self._settings = settings

    @property
    def username(self):
        """Gets the username of this UtilViewerResponse.  # noqa: E501


        :return: The username of this UtilViewerResponse.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UtilViewerResponse.


        :param username: The username of this UtilViewerResponse.  # noqa: E501
        :type: str
        """

        self._username = username

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UtilViewerResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilViewerResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
