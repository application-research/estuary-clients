# coding: utf-8

"""
    Estuary API

    This is the API for the Estuary application.  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UtilContent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'aggregate': 'bool',
        'aggregated_in': 'int',
        'cid': 'UtilDbCID',
        'created_at': 'str',
        'dag_split': 'bool',
        'deal_status': 'str',
        'description': 'str',
        'failed': 'bool',
        'id': 'int',
        'location': 'str',
        'name': 'str',
        'offloaded': 'bool',
        'origins': 'str',
        'pin_meta': 'str',
        'pinning': 'bool',
        'pinning_status': 'str',
        'replace': 'bool',
        'replication': 'int',
        'size': 'int',
        'split_from': 'int',
        'type': 'UtilContentType',
        'updated_at': 'str',
        'user_id': 'int'
    }

    attribute_map = {
        'active': 'active',
        'aggregate': 'aggregate',
        'aggregated_in': 'aggregatedIn',
        'cid': 'cid',
        'created_at': 'createdAt',
        'dag_split': 'dagSplit',
        'deal_status': 'dealStatus',
        'description': 'description',
        'failed': 'failed',
        'id': 'id',
        'location': 'location',
        'name': 'name',
        'offloaded': 'offloaded',
        'origins': 'origins',
        'pin_meta': 'pinMeta',
        'pinning': 'pinning',
        'pinning_status': 'pinningStatus',
        'replace': 'replace',
        'replication': 'replication',
        'size': 'size',
        'split_from': 'splitFrom',
        'type': 'type',
        'updated_at': 'updatedAt',
        'user_id': 'userId'
    }

    def __init__(self, active=None, aggregate=None, aggregated_in=None, cid=None, created_at=None, dag_split=None, deal_status=None, description=None, failed=None, id=None, location=None, name=None, offloaded=None, origins=None, pin_meta=None, pinning=None, pinning_status=None, replace=None, replication=None, size=None, split_from=None, type=None, updated_at=None, user_id=None):  # noqa: E501
        """UtilContent - a model defined in Swagger"""  # noqa: E501
        self._active = None
        self._aggregate = None
        self._aggregated_in = None
        self._cid = None
        self._created_at = None
        self._dag_split = None
        self._deal_status = None
        self._description = None
        self._failed = None
        self._id = None
        self._location = None
        self._name = None
        self._offloaded = None
        self._origins = None
        self._pin_meta = None
        self._pinning = None
        self._pinning_status = None
        self._replace = None
        self._replication = None
        self._size = None
        self._split_from = None
        self._type = None
        self._updated_at = None
        self._user_id = None
        self.discriminator = None
        if active is not None:
            self.active = active
        if aggregate is not None:
            self.aggregate = aggregate
        if aggregated_in is not None:
            self.aggregated_in = aggregated_in
        if cid is not None:
            self.cid = cid
        if created_at is not None:
            self.created_at = created_at
        if dag_split is not None:
            self.dag_split = dag_split
        if deal_status is not None:
            self.deal_status = deal_status
        if description is not None:
            self.description = description
        if failed is not None:
            self.failed = failed
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if offloaded is not None:
            self.offloaded = offloaded
        if origins is not None:
            self.origins = origins
        if pin_meta is not None:
            self.pin_meta = pin_meta
        if pinning is not None:
            self.pinning = pinning
        if pinning_status is not None:
            self.pinning_status = pinning_status
        if replace is not None:
            self.replace = replace
        if replication is not None:
            self.replication = replication
        if size is not None:
            self.size = size
        if split_from is not None:
            self.split_from = split_from
        if type is not None:
            self.type = type
        if updated_at is not None:
            self.updated_at = updated_at
        if user_id is not None:
            self.user_id = user_id

    @property
    def active(self):
        """Gets the active of this UtilContent.  # noqa: E501


        :return: The active of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this UtilContent.


        :param active: The active of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def aggregate(self):
        """Gets the aggregate of this UtilContent.  # noqa: E501


        :return: The aggregate of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._aggregate

    @aggregate.setter
    def aggregate(self, aggregate):
        """Sets the aggregate of this UtilContent.


        :param aggregate: The aggregate of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._aggregate = aggregate

    @property
    def aggregated_in(self):
        """Gets the aggregated_in of this UtilContent.  # noqa: E501

        TODO: shift most of the 'state' booleans in here into a single state field, should make reasoning about things much simpler  # noqa: E501

        :return: The aggregated_in of this UtilContent.  # noqa: E501
        :rtype: int
        """
        return self._aggregated_in

    @aggregated_in.setter
    def aggregated_in(self, aggregated_in):
        """Sets the aggregated_in of this UtilContent.

        TODO: shift most of the 'state' booleans in here into a single state field, should make reasoning about things much simpler  # noqa: E501

        :param aggregated_in: The aggregated_in of this UtilContent.  # noqa: E501
        :type: int
        """

        self._aggregated_in = aggregated_in

    @property
    def cid(self):
        """Gets the cid of this UtilContent.  # noqa: E501


        :return: The cid of this UtilContent.  # noqa: E501
        :rtype: UtilDbCID
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this UtilContent.


        :param cid: The cid of this UtilContent.  # noqa: E501
        :type: UtilDbCID
        """

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this UtilContent.  # noqa: E501


        :return: The created_at of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this UtilContent.


        :param created_at: The created_at of this UtilContent.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def dag_split(self):
        """Gets the dag_split of this UtilContent.  # noqa: E501

        If set, this content is part of a split dag. In such a case, the 'root' content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates)  # noqa: E501

        :return: The dag_split of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._dag_split

    @dag_split.setter
    def dag_split(self, dag_split):
        """Sets the dag_split of this UtilContent.

        If set, this content is part of a split dag. In such a case, the 'root' content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates)  # noqa: E501

        :param dag_split: The dag_split of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._dag_split = dag_split

    @property
    def deal_status(self):
        """Gets the deal_status of this UtilContent.  # noqa: E501


        :return: The deal_status of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._deal_status

    @deal_status.setter
    def deal_status(self, deal_status):
        """Sets the deal_status of this UtilContent.


        :param deal_status: The deal_status of this UtilContent.  # noqa: E501
        :type: str
        """

        self._deal_status = deal_status

    @property
    def description(self):
        """Gets the description of this UtilContent.  # noqa: E501


        :return: The description of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UtilContent.


        :param description: The description of this UtilContent.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def failed(self):
        """Gets the failed of this UtilContent.  # noqa: E501


        :return: The failed of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._failed

    @failed.setter
    def failed(self, failed):
        """Sets the failed of this UtilContent.


        :param failed: The failed of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._failed = failed

    @property
    def id(self):
        """Gets the id of this UtilContent.  # noqa: E501


        :return: The id of this UtilContent.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UtilContent.


        :param id: The id of this UtilContent.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this UtilContent.  # noqa: E501


        :return: The location of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UtilContent.


        :param location: The location of this UtilContent.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this UtilContent.  # noqa: E501


        :return: The name of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UtilContent.


        :param name: The name of this UtilContent.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def offloaded(self):
        """Gets the offloaded of this UtilContent.  # noqa: E501


        :return: The offloaded of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._offloaded

    @offloaded.setter
    def offloaded(self, offloaded):
        """Sets the offloaded of this UtilContent.


        :param offloaded: The offloaded of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._offloaded = offloaded

    @property
    def origins(self):
        """Gets the origins of this UtilContent.  # noqa: E501


        :return: The origins of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._origins

    @origins.setter
    def origins(self, origins):
        """Sets the origins of this UtilContent.


        :param origins: The origins of this UtilContent.  # noqa: E501
        :type: str
        """

        self._origins = origins

    @property
    def pin_meta(self):
        """Gets the pin_meta of this UtilContent.  # noqa: E501


        :return: The pin_meta of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._pin_meta

    @pin_meta.setter
    def pin_meta(self, pin_meta):
        """Sets the pin_meta of this UtilContent.


        :param pin_meta: The pin_meta of this UtilContent.  # noqa: E501
        :type: str
        """

        self._pin_meta = pin_meta

    @property
    def pinning(self):
        """Gets the pinning of this UtilContent.  # noqa: E501


        :return: The pinning of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._pinning

    @pinning.setter
    def pinning(self, pinning):
        """Sets the pinning of this UtilContent.


        :param pinning: The pinning of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._pinning = pinning

    @property
    def pinning_status(self):
        """Gets the pinning_status of this UtilContent.  # noqa: E501


        :return: The pinning_status of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._pinning_status

    @pinning_status.setter
    def pinning_status(self, pinning_status):
        """Sets the pinning_status of this UtilContent.


        :param pinning_status: The pinning_status of this UtilContent.  # noqa: E501
        :type: str
        """

        self._pinning_status = pinning_status

    @property
    def replace(self):
        """Gets the replace of this UtilContent.  # noqa: E501


        :return: The replace of this UtilContent.  # noqa: E501
        :rtype: bool
        """
        return self._replace

    @replace.setter
    def replace(self, replace):
        """Sets the replace of this UtilContent.


        :param replace: The replace of this UtilContent.  # noqa: E501
        :type: bool
        """

        self._replace = replace

    @property
    def replication(self):
        """Gets the replication of this UtilContent.  # noqa: E501


        :return: The replication of this UtilContent.  # noqa: E501
        :rtype: int
        """
        return self._replication

    @replication.setter
    def replication(self, replication):
        """Sets the replication of this UtilContent.


        :param replication: The replication of this UtilContent.  # noqa: E501
        :type: int
        """

        self._replication = replication

    @property
    def size(self):
        """Gets the size of this UtilContent.  # noqa: E501


        :return: The size of this UtilContent.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this UtilContent.


        :param size: The size of this UtilContent.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def split_from(self):
        """Gets the split_from of this UtilContent.  # noqa: E501


        :return: The split_from of this UtilContent.  # noqa: E501
        :rtype: int
        """
        return self._split_from

    @split_from.setter
    def split_from(self, split_from):
        """Sets the split_from of this UtilContent.


        :param split_from: The split_from of this UtilContent.  # noqa: E501
        :type: int
        """

        self._split_from = split_from

    @property
    def type(self):
        """Gets the type of this UtilContent.  # noqa: E501


        :return: The type of this UtilContent.  # noqa: E501
        :rtype: UtilContentType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UtilContent.


        :param type: The type of this UtilContent.  # noqa: E501
        :type: UtilContentType
        """

        self._type = type

    @property
    def updated_at(self):
        """Gets the updated_at of this UtilContent.  # noqa: E501


        :return: The updated_at of this UtilContent.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this UtilContent.


        :param updated_at: The updated_at of this UtilContent.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def user_id(self):
        """Gets the user_id of this UtilContent.  # noqa: E501


        :return: The user_id of this UtilContent.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UtilContent.


        :param user_id: The user_id of this UtilContent.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UtilContent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilContent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
