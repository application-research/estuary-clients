# coding: utf-8

"""
    Estuary API

    This is the API for the Estuary application.  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UtilContentCreateBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'coluuid': 'str',
        'dir': 'str',
        'location': 'str',
        'name': 'str',
        'root': 'str',
        'type': 'int'
    }

    attribute_map = {
        'coluuid': 'coluuid',
        'dir': 'dir',
        'location': 'location',
        'name': 'name',
        'root': 'root',
        'type': 'type'
    }

    def __init__(self, coluuid=None, dir=None, location=None, name=None, root=None, type=None):  # noqa: E501
        """UtilContentCreateBody - a model defined in Swagger"""  # noqa: E501
        self._coluuid = None
        self._dir = None
        self._location = None
        self._name = None
        self._root = None
        self._type = None
        self.discriminator = None
        if coluuid is not None:
            self.coluuid = coluuid
        if dir is not None:
            self.dir = dir
        if location is not None:
            self.location = location
        if name is not None:
            self.name = name
        if root is not None:
            self.root = root
        if type is not None:
            self.type = type

    @property
    def coluuid(self):
        """Gets the coluuid of this UtilContentCreateBody.  # noqa: E501


        :return: The coluuid of this UtilContentCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._coluuid

    @coluuid.setter
    def coluuid(self, coluuid):
        """Sets the coluuid of this UtilContentCreateBody.


        :param coluuid: The coluuid of this UtilContentCreateBody.  # noqa: E501
        :type: str
        """

        self._coluuid = coluuid

    @property
    def dir(self):
        """Gets the dir of this UtilContentCreateBody.  # noqa: E501


        :return: The dir of this UtilContentCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir):
        """Sets the dir of this UtilContentCreateBody.


        :param dir: The dir of this UtilContentCreateBody.  # noqa: E501
        :type: str
        """

        self._dir = dir

    @property
    def location(self):
        """Gets the location of this UtilContentCreateBody.  # noqa: E501


        :return: The location of this UtilContentCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this UtilContentCreateBody.


        :param location: The location of this UtilContentCreateBody.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def name(self):
        """Gets the name of this UtilContentCreateBody.  # noqa: E501


        :return: The name of this UtilContentCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UtilContentCreateBody.


        :param name: The name of this UtilContentCreateBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def root(self):
        """Gets the root of this UtilContentCreateBody.  # noqa: E501


        :return: The root of this UtilContentCreateBody.  # noqa: E501
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root):
        """Sets the root of this UtilContentCreateBody.


        :param root: The root of this UtilContentCreateBody.  # noqa: E501
        :type: str
        """

        self._root = root

    @property
    def type(self):
        """Gets the type of this UtilContentCreateBody.  # noqa: E501


        :return: The type of this UtilContentCreateBody.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UtilContentCreateBody.


        :param type: The type of this UtilContentCreateBody.  # noqa: E501
        :type: int
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UtilContentCreateBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UtilContentCreateBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
