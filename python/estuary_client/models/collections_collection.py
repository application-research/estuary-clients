# coding: utf-8

"""
    Estuary API

    This is the API for the Estuary application.  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CollectionsCollection(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cid': 'str',
        'created_at': 'str',
        'description': 'str',
        'name': 'str',
        'user_id': 'int',
        'uuid': 'str'
    }

    attribute_map = {
        'cid': 'cid',
        'created_at': 'createdAt',
        'description': 'description',
        'name': 'name',
        'user_id': 'userId',
        'uuid': 'uuid'
    }

    def __init__(self, cid=None, created_at=None, description=None, name=None, user_id=None, uuid=None):  # noqa: E501
        """CollectionsCollection - a model defined in Swagger"""  # noqa: E501
        self._cid = None
        self._created_at = None
        self._description = None
        self._name = None
        self._user_id = None
        self._uuid = None
        self.discriminator = None
        if cid is not None:
            self.cid = cid
        if created_at is not None:
            self.created_at = created_at
        if description is not None:
            self.description = description
        if name is not None:
            self.name = name
        if user_id is not None:
            self.user_id = user_id
        if uuid is not None:
            self.uuid = uuid

    @property
    def cid(self):
        """Gets the cid of this CollectionsCollection.  # noqa: E501


        :return: The cid of this CollectionsCollection.  # noqa: E501
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid):
        """Sets the cid of this CollectionsCollection.


        :param cid: The cid of this CollectionsCollection.  # noqa: E501
        :type: str
        """

        self._cid = cid

    @property
    def created_at(self):
        """Gets the created_at of this CollectionsCollection.  # noqa: E501


        :return: The created_at of this CollectionsCollection.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CollectionsCollection.


        :param created_at: The created_at of this CollectionsCollection.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this CollectionsCollection.  # noqa: E501


        :return: The description of this CollectionsCollection.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CollectionsCollection.


        :param description: The description of this CollectionsCollection.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this CollectionsCollection.  # noqa: E501


        :return: The name of this CollectionsCollection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CollectionsCollection.


        :param name: The name of this CollectionsCollection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def user_id(self):
        """Gets the user_id of this CollectionsCollection.  # noqa: E501


        :return: The user_id of this CollectionsCollection.  # noqa: E501
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CollectionsCollection.


        :param user_id: The user_id of this CollectionsCollection.  # noqa: E501
        :type: int
        """

        self._user_id = user_id

    @property
    def uuid(self):
        """Gets the uuid of this CollectionsCollection.  # noqa: E501


        :return: The uuid of this CollectionsCollection.  # noqa: E501
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this CollectionsCollection.


        :param uuid: The uuid of this CollectionsCollection.  # noqa: E501
        :type: str
        """

        self._uuid = uuid

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CollectionsCollection, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CollectionsCollection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
