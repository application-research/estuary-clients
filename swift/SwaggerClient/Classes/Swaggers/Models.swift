// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            }

            // Decoder for ISOFullDate
            Decoders.addDecoder(clazz: ISOFullDate.self, decoder: { (source: AnyObject) -> ISOFullDate in
                if let string = source as? String,
                   let isoDate = ISOFullDate.from(string: string) {
                    return isoDate
                }
                fatalError("formatter failed to parse \(source)")
            }) 

            // Decoder for [MainCollection]
            Decoders.addDecoder(clazz: [MainCollection].self) { (source: AnyObject) -> [MainCollection] in
                return Decoders.decode(clazz: [MainCollection].self, source: source)
            }
            // Decoder for MainCollection
            Decoders.addDecoder(clazz: MainCollection.self) { (source: AnyObject) -> MainCollection in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MainCollection()
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.createdAt = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.userId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"])
                instance.uuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"])
                return instance
            }


            // Decoder for [MainCreateCollectionBody]
            Decoders.addDecoder(clazz: [MainCreateCollectionBody].self) { (source: AnyObject) -> [MainCreateCollectionBody] in
                return Decoders.decode(clazz: [MainCreateCollectionBody].self, source: source)
            }
            // Decoder for MainCreateCollectionBody
            Decoders.addDecoder(clazz: MainCreateCollectionBody.self) { (source: AnyObject) -> MainCreateCollectionBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MainCreateCollectionBody()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [MainEstimateDealBody]
            Decoders.addDecoder(clazz: [MainEstimateDealBody].self) { (source: AnyObject) -> [MainEstimateDealBody] in
                return Decoders.decode(clazz: [MainEstimateDealBody].self, source: source)
            }
            // Decoder for MainEstimateDealBody
            Decoders.addDecoder(clazz: MainEstimateDealBody.self) { (source: AnyObject) -> MainEstimateDealBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MainEstimateDealBody()
                instance.durationBlks = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationBlks"])
                instance.replication = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["replication"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.verified = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"])
                return instance
            }


            // Decoder for [MainGetApiKeysResp]
            Decoders.addDecoder(clazz: [MainGetApiKeysResp].self) { (source: AnyObject) -> [MainGetApiKeysResp] in
                return Decoders.decode(clazz: [MainGetApiKeysResp].self, source: source)
            }
            // Decoder for MainGetApiKeysResp
            Decoders.addDecoder(clazz: MainGetApiKeysResp.self) { (source: AnyObject) -> MainGetApiKeysResp in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MainGetApiKeysResp()
                instance.expiry = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiry"])
                instance.token = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"])
                return instance
            }


            // Decoder for [MainImportDealBody]
            Decoders.addDecoder(clazz: [MainImportDealBody].self) { (source: AnyObject) -> [MainImportDealBody] in
                return Decoders.decode(clazz: [MainImportDealBody].self, source: source)
            }
            // Decoder for MainImportDealBody
            Decoders.addDecoder(clazz: MainImportDealBody.self) { (source: AnyObject) -> MainImportDealBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MainImportDealBody()
                instance.coluuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coluuid"])
                instance.dealIDs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["dealIDs"])
                instance.dir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dir"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [MainUserStatsResponse]
            Decoders.addDecoder(clazz: [MainUserStatsResponse].self) { (source: AnyObject) -> [MainUserStatsResponse] in
                return Decoders.decode(clazz: [MainUserStatsResponse].self, source: source)
            }
            // Decoder for MainUserStatsResponse
            Decoders.addDecoder(clazz: MainUserStatsResponse.self) { (source: AnyObject) -> MainUserStatsResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = MainUserStatsResponse()
                instance.numPins = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numPins"])
                instance.totalSize = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalSize"])
                return instance
            }


            // Decoder for [UtilContentAddIpfsBody]
            Decoders.addDecoder(clazz: [UtilContentAddIpfsBody].self) { (source: AnyObject) -> [UtilContentAddIpfsBody] in
                return Decoders.decode(clazz: [UtilContentAddIpfsBody].self, source: source)
            }
            // Decoder for UtilContentAddIpfsBody
            Decoders.addDecoder(clazz: UtilContentAddIpfsBody.self) { (source: AnyObject) -> UtilContentAddIpfsBody in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UtilContentAddIpfsBody()
                instance.coluuid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coluuid"])
                instance.dir = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dir"])
                instance.filename = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"])
                instance.peers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["peers"])
                instance.root = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["root"])
                return instance
            }


            // Decoder for [UtilContentAddResponse]
            Decoders.addDecoder(clazz: [UtilContentAddResponse].self) { (source: AnyObject) -> [UtilContentAddResponse] in
                return Decoders.decode(clazz: [UtilContentAddResponse].self, source: source)
            }
            // Decoder for UtilContentAddResponse
            Decoders.addDecoder(clazz: UtilContentAddResponse.self) { (source: AnyObject) -> UtilContentAddResponse in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UtilContentAddResponse()
                instance.cid = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"])
                instance.estuaryId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estuaryId"])
                instance.providers = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["providers"])
                instance.retrievalUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["retrieval_url"])
                return instance
            }


            // Decoder for [UtilHttpError]
            Decoders.addDecoder(clazz: [UtilHttpError].self) { (source: AnyObject) -> [UtilHttpError] in
                return Decoders.decode(clazz: [UtilHttpError].self, source: source)
            }
            // Decoder for UtilHttpError
            Decoders.addDecoder(clazz: UtilHttpError.self) { (source: AnyObject) -> UtilHttpError in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = UtilHttpError()
                instance.code = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"])
                instance.details = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"])
                instance.reason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"])
                return instance
            }
        }
    }
}
