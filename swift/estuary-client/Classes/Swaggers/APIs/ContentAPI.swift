//
// ContentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class ContentAPI: APIBase {
    /**
     Add Car object
     
     - parameter body: (body) Car 
     - parameter ignoreDupes: (query) Ignore Dupes (optional)
     - parameter filename: (query) Filename (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentAddCarPost(body body: String, ignoreDupes: String? = nil, filename: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        contentAddCarPostWithRequestBuilder(body: body, ignoreDupes: ignoreDupes, filename: filename).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add Car object
     - POST /content/add-car
     - This endpoint is used to add a car object to the network. The object can be a file or a directory.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter body: (body) Car 
     - parameter ignoreDupes: (query) Ignore Dupes (optional)
     - parameter filename: (query) Filename (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func contentAddCarPostWithRequestBuilder(body body: String, ignoreDupes: String? = nil, filename: String? = nil) -> RequestBuilder<Void> {
        let path = "/content/add-car"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Add IPFS object
     
     - parameter body: (body) IPFS Body 
     - parameter ignoreDupes: (query) Ignore Dupes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentAddIpfsPost(body body: UtilContentAddIpfsBody, ignoreDupes: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        contentAddIpfsPostWithRequestBuilder(body: body, ignoreDupes: ignoreDupes).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add IPFS object
     - POST /content/add-ipfs
     - This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter body: (body) IPFS Body 
     - parameter ignoreDupes: (query) Ignore Dupes (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func contentAddIpfsPostWithRequestBuilder(body body: UtilContentAddIpfsBody, ignoreDupes: String? = nil) -> RequestBuilder<Void> {
        let path = "/content/add-ipfs"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Add new content
     
     - parameter data: (form) File to upload 
     - parameter filename: (form) Filenam to use for upload (optional)
     - parameter coluuid: (query) Collection UUID (optional)
     - parameter replication: (query) Replication value (optional)
     - parameter ignoreDupes: (query) Ignore Dupes true/false (optional)
     - parameter lazyProvide: (query) Lazy Provide true/false (optional)
     - parameter dir: (query) Directory (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentAddPost(data data: NSURL, filename: String? = nil, coluuid: String? = nil, replication: Int32? = nil, ignoreDupes: String? = nil, lazyProvide: String? = nil, dir: String? = nil, completion: ((data: UtilContentAddResponse?, error: ErrorType?) -> Void)) {
        contentAddPostWithRequestBuilder(data: data, filename: filename, coluuid: coluuid, replication: replication, ignoreDupes: ignoreDupes, lazyProvide: lazyProvide, dir: dir).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add new content
     - POST /content/add
     - This endpoint is used to upload new content.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={"empty": false}}]
     
     - parameter data: (form) File to upload 
     - parameter filename: (form) Filenam to use for upload (optional)
     - parameter coluuid: (query) Collection UUID (optional)
     - parameter replication: (query) Replication value (optional)
     - parameter ignoreDupes: (query) Ignore Dupes true/false (optional)
     - parameter lazyProvide: (query) Lazy Provide true/false (optional)
     - parameter dir: (query) Directory (optional)

     - returns: RequestBuilder<UtilContentAddResponse> 
     */
    public class func contentAddPostWithRequestBuilder(data data: NSURL, filename: String? = nil, coluuid: String? = nil, replication: Int32? = nil, ignoreDupes: String? = nil, lazyProvide: String? = nil, dir: String? = nil) -> RequestBuilder<UtilContentAddResponse> {
        let path = "/content/add"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "coluuid": coluuid,
            "replication": replication?.encodeToJSON(),
            "ignore-dupes": ignoreDupes,
            "lazy-provide": lazyProvide,
            "dir": dir
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<UtilContentAddResponse>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: falsefalse)
    }

    /**
     Get aggregated content stats
     
     - parameter content: (path) Content ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentAggregatedContentGet(content content: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        contentAggregatedContentGetWithRequestBuilder(content: content).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get aggregated content stats
     - GET /content/aggregated/{content}
     - This endpoint returns aggregated content stats
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter content: (path) Content ID 

     - returns: RequestBuilder<String> 
     */
    public class func contentAggregatedContentGetWithRequestBuilder(content content: String) -> RequestBuilder<String> {
        var path = "/content/aggregated/{content}"
        path = path.stringByReplacingOccurrencesOfString("{content}", withString: "\(content)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get all deals for a user
     
     - parameter begin: (query) Begin 
     - parameter duration: (query) Duration 
     - parameter all: (query) All 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentAllDealsGet(begin begin: String, duration: String, all: String, completion: ((error: ErrorType?) -> Void)) {
        contentAllDealsGetWithRequestBuilder(begin: begin, duration: duration, all: all).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get all deals for a user
     - GET /content/all-deals
     - This endpoint is used to get all deals for a user
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter begin: (query) Begin 
     - parameter duration: (query) Duration 
     - parameter all: (query) All 

     - returns: RequestBuilder<Void> 
     */
    public class func contentAllDealsGetWithRequestBuilder(begin begin: String, duration: String, all: String) -> RequestBuilder<Void> {
        let path = "/content/all-deals"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "begin": begin,
            "duration": duration,
            "all": all
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get content bandwidth
     
     - parameter content: (path) Content ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentBwUsageContentGet(content content: String, completion: ((error: ErrorType?) -> Void)) {
        contentBwUsageContentGetWithRequestBuilder(content: content).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get content bandwidth
     - GET /content/bw-usage/{content}
     - This endpoint returns content bandwidth
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter content: (path) Content ID 

     - returns: RequestBuilder<Void> 
     */
    public class func contentBwUsageContentGetWithRequestBuilder(content content: String) -> RequestBuilder<Void> {
        var path = "/content/bw-usage/{content}"
        path = path.stringByReplacingOccurrencesOfString("{content}", withString: "\(content)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a new content
     
     - parameter req: (body) Content 
     - parameter ignoreDupes: (query) Ignore Dupes (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentCreatePost(req req: UtilContentCreateBody, ignoreDupes: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        contentCreatePostWithRequestBuilder(req: req, ignoreDupes: ignoreDupes).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Add a new content
     - POST /content/create
     - This endpoint adds a new content
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter req: (body) Content 
     - parameter ignoreDupes: (query) Ignore Dupes (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func contentCreatePostWithRequestBuilder(req req: UtilContentCreateBody, ignoreDupes: String? = nil) -> RequestBuilder<Void> {
        let path = "/content/create"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = req.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Content with deals
     
     - parameter limit: (query) Limit (optional)
     - parameter offset: (query) Offset (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentDealsGet(limit limit: Int32? = nil, offset: Int32? = nil, completion: ((error: ErrorType?) -> Void)) {
        contentDealsGetWithRequestBuilder(limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Content with deals
     - GET /content/deals
     - This endpoint lists all content with deals
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter limit: (query) Limit (optional)
     - parameter offset: (query) Offset (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func contentDealsGetWithRequestBuilder(limit limit: Int32? = nil, offset: Int32? = nil) -> RequestBuilder<Void> {
        let path = "/content/deals"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Ensure Replication
     
     - parameter datacid: (path) Data CID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentEnsureReplicationDatacidGet(datacid datacid: String, completion: ((error: ErrorType?) -> Void)) {
        contentEnsureReplicationDatacidGetWithRequestBuilder(datacid: datacid).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Ensure Replication
     - GET /content/ensure-replication/{datacid}
     - This endpoint ensures that the content is replicated to the specified number of providers
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter datacid: (path) Data CID 

     - returns: RequestBuilder<Void> 
     */
    public class func contentEnsureReplicationDatacidGetWithRequestBuilder(datacid datacid: String) -> RequestBuilder<Void> {
        var path = "/content/ensure-replication/{datacid}"
        path = path.stringByReplacingOccurrencesOfString("{datacid}", withString: "\(datacid)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List all failures for a content
     
     - parameter content: (path) Content ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentFailuresContentGet(content content: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        contentFailuresContentGetWithRequestBuilder(content: content).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List all failures for a content
     - GET /content/failures/{content}
     - This endpoint returns all failures for a content
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter content: (path) Content ID 

     - returns: RequestBuilder<String> 
     */
    public class func contentFailuresContentGetWithRequestBuilder(content content: String) -> RequestBuilder<String> {
        var path = "/content/failures/{content}"
        path = path.stringByReplacingOccurrencesOfString("{content}", withString: "\(content)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Content
     
     - parameter id: (path) Content ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentIdGet(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        contentIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Content
     - GET /content/{id}
     - This endpoint returns a content by its ID
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter id: (path) Content ID 

     - returns: RequestBuilder<Void> 
     */
    public class func contentIdGetWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/content/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Import a deal
     
     - parameter body: (body) Import a deal 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentImportdealPost(body body: MainImportDealBody, completion: ((error: ErrorType?) -> Void)) {
        contentImportdealPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Import a deal
     - POST /content/importdeal
     - This endpoint imports a deal into the shuttle.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter body: (body) Import a deal 

     - returns: RequestBuilder<Void> 
     */
    public class func contentImportdealPostWithRequestBuilder(body body: MainImportDealBody) -> RequestBuilder<Void> {
        let path = "/content/importdeal"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List all pinned content
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentListGet(completion: ((data: [String]?, error: ErrorType?) -> Void)) {
        contentListGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List all pinned content
     - GET /content/list
     - This endpoint lists all content
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={}}]

     - returns: RequestBuilder<[String]> 
     */
    public class func contentListGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/content/list"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[String]>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Read content
     
     - parameter cont: (path) CID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentReadContGet(cont cont: String, completion: ((error: ErrorType?) -> Void)) {
        contentReadContGetWithRequestBuilder(cont: cont).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Read content
     - GET /content/read/{cont}
     - This endpoint reads content from the blockstore
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter cont: (path) CID 

     - returns: RequestBuilder<Void> 
     */
    public class func contentReadContGetWithRequestBuilder(cont cont: String) -> RequestBuilder<Void> {
        var path = "/content/read/{cont}"
        path = path.stringByReplacingOccurrencesOfString("{cont}", withString: "\(cont)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get staging zone for user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentStagingZonesGet(completion: ((error: ErrorType?) -> Void)) {
        contentStagingZonesGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get staging zone for user
     - GET /content/staging-zones
     - This endpoint is used to get staging zone for user.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth

     - returns: RequestBuilder<Void> 
     */
    public class func contentStagingZonesGetWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/content/staging-zones"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get content statistics
     
     - parameter limit: (query) limit 
     - parameter offset: (query) offset 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentStatsGet(limit limit: String, offset: String, completion: ((error: ErrorType?) -> Void)) {
        contentStatsGetWithRequestBuilder(limit: limit, offset: offset).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get content statistics
     - GET /content/stats
     - This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter limit: (query) limit 
     - parameter offset: (query) offset 

     - returns: RequestBuilder<Void> 
     */
    public class func contentStatsGetWithRequestBuilder(limit limit: String, offset: String) -> RequestBuilder<Void> {
        let path = "/content/stats"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "limit": limit,
            "offset": offset
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Content Status
     
     - parameter id: (path) Content ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func contentStatusIdGet(id id: Int32, completion: ((error: ErrorType?) -> Void)) {
        contentStatusIdGetWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Content Status
     - GET /content/status/{id}
     - This endpoint returns the status of a content
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     
     - parameter id: (path) Content ID 

     - returns: RequestBuilder<Void> 
     */
    public class func contentStatusIdGetWithRequestBuilder(id id: Int32) -> RequestBuilder<Void> {
        var path = "/content/status/{id}"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
