//
// DealsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class DealsAPI: APIBase {
    /**
     Estimate the cost of a deal
     
     - parameter body: (body) The size of the deal in bytes, the replication factor, and the duration of the deal in blocks 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealEstimatePost(body body: MainEstimateDealBody, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealEstimatePostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Estimate the cost of a deal
     - POST /deal/estimate
     - This endpoint estimates the cost of a deal
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter body: (body) The size of the deal in bytes, the replication factor, and the duration of the deal in blocks 

     - returns: RequestBuilder<String> 
     */
    public class func dealEstimatePostWithRequestBuilder(body body: MainEstimateDealBody) -> RequestBuilder<String> {
        let path = "/deal/estimate"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Deal Info
     
     - parameter dealid: (path) Deal ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealInfoDealidGet(dealid dealid: Int32, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealInfoDealidGetWithRequestBuilder(dealid: dealid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Deal Info
     - GET /deal/info/{dealid}
     - This endpoint returns the deal info for a deal
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter dealid: (path) Deal ID 

     - returns: RequestBuilder<String> 
     */
    public class func dealInfoDealidGetWithRequestBuilder(dealid dealid: Int32) -> RequestBuilder<String> {
        var path = "/deal/info/{dealid}"
        path = path.stringByReplacingOccurrencesOfString("{dealid}", withString: "\(dealid)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Proposal
     
     - parameter propcid: (path) Proposal CID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealProposalPropcidGet(propcid propcid: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealProposalPropcidGetWithRequestBuilder(propcid: propcid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Proposal
     - GET /deal/proposal/{propcid}
     - This endpoint returns the proposal for a deal
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter propcid: (path) Proposal CID 

     - returns: RequestBuilder<String> 
     */
    public class func dealProposalPropcidGetWithRequestBuilder(propcid propcid: String) -> RequestBuilder<String> {
        var path = "/deal/proposal/{propcid}"
        path = path.stringByReplacingOccurrencesOfString("{propcid}", withString: "\(propcid)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query Ask
     
     - parameter miner: (path) CID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealQueryMinerGet(miner miner: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealQueryMinerGetWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query Ask
     - GET /deal/query/{miner}
     - This endpoint returns the ask for a given CID
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter miner: (path) CID 

     - returns: RequestBuilder<String> 
     */
    public class func dealQueryMinerGetWithRequestBuilder(miner miner: String) -> RequestBuilder<String> {
        var path = "/deal/query/{miner}"
        path = path.stringByReplacingOccurrencesOfString("{miner}", withString: "\(miner)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Deal Status by PropCid
     
     - parameter propcid: (path) PropCid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealStatusByProposalPropcidGet(propcid propcid: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealStatusByProposalPropcidGetWithRequestBuilder(propcid: propcid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Deal Status by PropCid
     - GET /deal/status-by-proposal/{propcid}
     - Get Deal Status by PropCid
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter propcid: (path) PropCid 

     - returns: RequestBuilder<String> 
     */
    public class func dealStatusByProposalPropcidGetWithRequestBuilder(propcid propcid: String) -> RequestBuilder<String> {
        var path = "/deal/status-by-proposal/{propcid}"
        path = path.stringByReplacingOccurrencesOfString("{propcid}", withString: "\(propcid)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Deal Status
     
     - parameter miner: (path) Miner 
     - parameter propcid: (path) Proposal CID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealStatusMinerPropcidGet(miner miner: String, propcid: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealStatusMinerPropcidGetWithRequestBuilder(miner: miner, propcid: propcid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Deal Status
     - GET /deal/status/{miner}/{propcid}
     - This endpoint returns the status of a deal
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter miner: (path) Miner 
     - parameter propcid: (path) Proposal CID 

     - returns: RequestBuilder<String> 
     */
    public class func dealStatusMinerPropcidGetWithRequestBuilder(miner miner: String, propcid: String) -> RequestBuilder<String> {
        var path = "/deal/status/{miner}/{propcid}"
        path = path.stringByReplacingOccurrencesOfString("{miner}", withString: "\(miner)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{propcid}", withString: "\(propcid)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Transfer In Progress
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealTransferInProgressGet(completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealTransferInProgressGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Transfer In Progress
     - GET /deal/transfer/in-progress
     - This endpoint returns the in-progress transfers
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]

     - returns: RequestBuilder<String> 
     */
    public class func dealTransferInProgressGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/deal/transfer/in-progress"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Transfer Status
     
     - parameter chanid: (body) Channel ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealTransferStatusPost(chanid chanid: MainChannelIDParam, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealTransferStatusPostWithRequestBuilder(chanid: chanid).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Transfer Status
     - POST /deal/transfer/status
     - This endpoint returns the status of a transfer
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter chanid: (body) Channel ID 

     - returns: RequestBuilder<String> 
     */
    public class func dealTransferStatusPostWithRequestBuilder(chanid chanid: MainChannelIDParam) -> RequestBuilder<String> {
        let path = "/deal/transfer/status"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = chanid.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get storage failures for user
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealsFailuresGet(completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealsFailuresGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get storage failures for user
     - GET /deals/failures
     - This endpoint returns a list of storage failures for user
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]

     - returns: RequestBuilder<String> 
     */
    public class func dealsFailuresGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/deals/failures"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Make Deal
     
     - parameter miner: (path) Miner 
     - parameter dealRequest: (body) Deal Request 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealsMakeMinerPost(miner miner: String, dealRequest: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealsMakeMinerPostWithRequestBuilder(miner: miner, dealRequest: dealRequest).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Make Deal
     - POST /deals/make/{miner}
     - This endpoint makes a deal for a given content and miner
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter miner: (path) Miner 
     - parameter dealRequest: (body) Deal Request 

     - returns: RequestBuilder<String> 
     */
    public class func dealsMakeMinerPostWithRequestBuilder(miner miner: String, dealRequest: String) -> RequestBuilder<String> {
        var path = "/deals/make/{miner}"
        path = path.stringByReplacingOccurrencesOfString("{miner}", withString: "\(miner)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters = dealRequest.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Deal Status
     
     - parameter deal: (path) Deal ID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func dealsStatusDealGet(deal deal: Int32, completion: ((data: String?, error: ErrorType?) -> Void)) {
        dealsStatusDealGetWithRequestBuilder(deal: deal).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Deal Status
     - GET /deals/status/{deal}
     - This endpoint returns the status of a deal
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter deal: (path) Deal ID 

     - returns: RequestBuilder<String> 
     */
    public class func dealsStatusDealGetWithRequestBuilder(deal deal: Int32) -> RequestBuilder<String> {
        var path = "/deals/status/{deal}"
        path = path.stringByReplacingOccurrencesOfString("{deal}", withString: "\(deal)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get storage failures
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func publicDealsFailuresGet(completion: ((data: String?, error: ErrorType?) -> Void)) {
        publicDealsFailuresGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get storage failures
     - GET /public/deals/failures
     - This endpoint returns a list of storage failures
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]

     - returns: RequestBuilder<String> 
     */
    public class func publicDealsFailuresGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/public/deals/failures"
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Query Ask
     
     - parameter miner: (path) CID 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func publicMinersStorageQueryMinerGet(miner miner: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        publicMinersStorageQueryMinerGetWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Query Ask
     - GET /public/miners/storage/query/{miner}
     - This endpoint returns the ask for a given CID
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "bytes": [],
  "empty": true
}}]
     
     - parameter miner: (path) CID 

     - returns: RequestBuilder<String> 
     */
    public class func publicMinersStorageQueryMinerGetWithRequestBuilder(miner miner: String) -> RequestBuilder<String> {
        var path = "/public/miners/storage/query/{miner}"
        path = path.stringByReplacingOccurrencesOfString("{miner}", withString: "\(miner)", options: .LiteralSearch, range: nil)
        let URLString = estuary-clientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
