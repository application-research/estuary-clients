/**
* Estuary API
* This is the API for the Estuary application.
*
* OpenAPI spec version: 0.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package io.swagger.server

import io.ktor.application.ApplicationCall
import io.ktor.http.HttpMethod
import io.ktor.locations.*
import io.ktor.pipeline.PipelineContext
import io.ktor.routing.Route
import io.ktor.routing.method
import io.swagger.server.models.*


// NOTE: ktor-location@0.9.0 is missing extension for Route.delete. This includes it.
inline fun <reified T : Any> Route.delete(noinline body: suspend PipelineContext<Unit, ApplicationCall>.(T) -> Unit): Route {
    return location(T::class) {
        method(HttpMethod.Delete) {
            handle(body)
        }
    }
}

object Paths {
    /**
     * Remove peers on Peering Service
     * This endpoint can be used to remove a Peer from the Peering Service
     */
    @Location("/admin/peering/peers") class adminPeeringPeersDelete()

    /**
     * List all Peering peers
     * This endpoint can be used to list all peers on Peering Service
     */
    @Location("/admin/peering/peers") class adminPeeringPeersGet()

    /**
     * Check Peering Status
     * This endpoint can be used to check the Peering status
     */
    @Location("/admin/peering/status") class adminPeeringStatusGet()

    /**
     * Get systems(estuary/shuttle) config
     * This endpoint is used to get system configs.
     */
    @Location("/admin/system/config") class adminSystemConfigGet()

    /**
     * Get all users
     * This endpoint is used to get all users.
     */
    @Location("/admin/users") class adminUsersGet()

    /**
     * List autoretrieve servers
     * This endpoint lists all registered autoretrieve servers
     */
    @Location("/admin/autoretrieve/list") class adminAutoretrieveListGet()

    /**
     * Deletes a collection
     * This endpoint is used to delete an existing collection.
     * @param coluuid Collection ID 
     */
    @Location("/collections/{coluuid}") class collectionsColuuidDelete(val coluuid: kotlin.String)

    /**
     * Get contents in a collection
     * This endpoint is used to get contents in a collection. If no colpath query param is passed
     * @param coluuid Collection UUID 
     * @param dir Directory (optional)
     */
    @Location("/collections/{coluuid}") class collectionsColuuidGet(val coluuid: kotlin.String, val dir: kotlin.String)

    /**
     * List all collections
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @param id User ID 
     */
    @Location("/collections/") class collectionsGet(val id: kotlin.Int)

    /**
     * Get aggregated content stats
     * This endpoint returns aggregated content stats
     * @param content Content ID 
     */
    @Location("/content/aggregated/{content}") class contentAggregatedContentGet(val content: kotlin.String)

    /**
     * Get all deals for a user
     * This endpoint is used to get all deals for a user
     * @param begin Begin 
     * @param duration Duration 
     * @param all All 
     */
    @Location("/content/all-deals") class contentAllDealsGet(val begin: kotlin.String, val duration: kotlin.String, val all: kotlin.String)

    /**
     * Get content bandwidth
     * This endpoint returns content bandwidth
     * @param content Content ID 
     */
    @Location("/content/bw-usage/{content}") class contentBwUsageContentGet(val content: kotlin.String)

    /**
     * Content with deals
     * This endpoint lists all content with deals
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     */
    @Location("/content/deals") class contentDealsGet(val limit: kotlin.Int, val offset: kotlin.Int)

    /**
     * Ensure Replication
     * This endpoint ensures that the content is replicated to the specified number of providers
     * @param datacid Data CID 
     */
    @Location("/content/ensure-replication/{datacid}") class contentEnsureReplicationDatacidGet(val datacid: kotlin.String)

    /**
     * List all failures for a content
     * This endpoint returns all failures for a content
     * @param content Content ID 
     */
    @Location("/content/failures/{content}") class contentFailuresContentGet(val content: kotlin.String)

    /**
     * List all pinned content
     * This endpoint lists all content
     */
    @Location("/content/list") class contentListGet()

    /**
     * Read content
     * This endpoint reads content from the blockstore
     * @param cont CID 
     */
    @Location("/content/read/{cont}") class contentReadContGet(val cont: kotlin.String)

    /**
     * Get staging zone for user
     * This endpoint is used to get staging zone for user.
     */
    @Location("/content/staging-zones") class contentStagingZonesGet()

    /**
     * Get content statistics
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
     * @param limit limit 
     */
    @Location("/content/stats") class contentStatsGet(val limit: kotlin.String)

    /**
     * Content Status
     * This endpoint returns the status of a content
     * @param id Content ID 
     */
    @Location("/content/status/{id}") class contentStatusIdGet(val id: kotlin.Int)

    /**
     * Get Deal Info
     * This endpoint returns the deal info for a deal
     * @param dealid Deal ID 
     */
    @Location("/deal/info/{dealid}") class dealInfoDealidGet(val dealid: kotlin.Int)

    /**
     * Get Proposal
     * This endpoint returns the proposal for a deal
     * @param propcid Proposal CID 
     */
    @Location("/deal/proposal/{propcid}") class dealProposalPropcidGet(val propcid: kotlin.String)

    /**
     * Query Ask
     * This endpoint returns the ask for a given CID
     * @param miner CID 
     */
    @Location("/deal/query/{miner}") class dealQueryMinerGet(val miner: kotlin.String)

    /**
     * Get Deal Status by PropCid
     * Get Deal Status by PropCid
     * @param propcid PropCid 
     */
    @Location("/deal/status-by-proposal/{propcid}") class dealStatusByProposalPropcidGet(val propcid: kotlin.String)

    /**
     * Deal Status
     * This endpoint returns the status of a deal
     * @param miner Miner 
     * @param propcid Proposal CID 
     */
    @Location("/deal/status/{miner}/{propcid}") class dealStatusMinerPropcidGet(val miner: kotlin.String, val propcid: kotlin.String)

    /**
     * Transfer In Progress
     * This endpoint returns the in-progress transfers
     */
    @Location("/deal/transfer/in-progress") class dealTransferInProgressGet()

    /**
     * Get storage failures for user
     * This endpoint returns a list of storage failures for user
     */
    @Location("/deals/failures") class dealsFailuresGet()

    /**
     * Get Deal Status
     * This endpoint returns the status of a deal
     * @param deal Deal ID 
     */
    @Location("/deals/status/{deal}") class dealsStatusDealGet(val deal: kotlin.Int)

    /**
     * Get storage failures
     * This endpoint returns a list of storage failures
     */
    @Location("/public/deals/failures") class publicDealsFailuresGet()

    /**
     * Query Ask
     * This endpoint returns the ask for a given CID
     * @param miner CID 
     */
    @Location("/public/miners/storage/query/{miner}") class publicMinersStorageQueryMinerGet(val miner: kotlin.String)

    /**
     * Get deal metrics
     * This endpoint is used to get deal metrics
     */
    @Location("/public/metrics/deals-on-chain") class publicMetricsDealsOnChainGet()

    /**
     * Get all miners deals
     * This endpoint returns all miners deals
     * @param miner Filter by miner 
     */
    @Location("/public/miners/deals/{miner}") class publicMinersDealsMinerGet(val miner: kotlin.String)

    /**
     * Get miner stats
     * This endpoint returns miner stats
     * @param miner Filter by miner 
     */
    @Location("/public/miners/stats/{miner}") class publicMinersStatsMinerGet(val miner: kotlin.String)

    /**
     * Net Addrs
     * This endpoint is used to get net addrs
     */
    @Location("/net/addrs") class netAddrsGet()

    /**
     * Get all miners
     * This endpoint returns all miners
     * @param miner Filter by miner 
     */
    @Location("/public/miners/failures/{miner}") class publicMinersFailuresMinerGet(val miner: kotlin.String)

    /**
     * Get all miners
     * This endpoint returns all miners
     */
    @Location("/public/miners") class publicMinersGet()

    /**
     * Net Addrs
     * This endpoint is used to get net addrs
     */
    @Location("/public/net/addrs") class publicNetAddrsGet()

    /**
     * Net Peers
     * This endpoint is used to get net peers
     */
    @Location("/public/net/peers") class publicNetPeersGet()

    /**
     * Remove peers on Peering Service
     * This endpoint can be used to remove a Peer from the Peering Service
     */
    @Location("/admin/peering/peers") class adminPeeringPeersDelete()

    /**
     * List all Peering peers
     * This endpoint can be used to list all peers on Peering Service
     */
    @Location("/admin/peering/peers") class adminPeeringPeersGet()

    /**
     * Check Peering Status
     * This endpoint can be used to check the Peering status
     */
    @Location("/admin/peering/status") class adminPeeringStatusGet()

    /**
     * Remove peers on Peering Service
     * This endpoint can be used to remove a Peer from the Peering Service
     */
    @Location("/admin/peering/peers") class adminPeeringPeersDelete()

    /**
     * List all Peering peers
     * This endpoint can be used to list all peers on Peering Service
     */
    @Location("/admin/peering/peers") class adminPeeringPeersGet()

    /**
     * Check Peering Status
     * This endpoint can be used to check the Peering status
     */
    @Location("/admin/peering/status") class adminPeeringStatusGet()

    /**
     * List all pin status objects
     * This endpoint lists all pin status objects
     */
    @Location("/pinning/pins") class pinningPinsGet()

    /**
     * Delete a pinned object
     * This endpoint deletes a pinned object.
     * @param pinid Pin ID 
     */
    @Location("/pinning/pins/{pinid}") class pinningPinsPinidDelete(val pinid: kotlin.String)

    /**
     * Get a pin status object
     * This endpoint returns a pin status object.
     * @param pinid cid 
     */
    @Location("/pinning/pins/{pinid}") class pinningPinsPinidGet(val pinid: kotlin.String)

    /**
     * Get Content by Cid
     * This endpoint returns the content associated with a CID
     * @param cid Cid 
     */
    @Location("/public/by-cid/{cid}") class publicByCidCidGet(val cid: kotlin.String)

    /**
     * Get public node info
     * This endpoint returns information about the node
     */
    @Location("/public/info") class publicInfoGet()

    /**
     * Get deal metrics
     * This endpoint is used to get deal metrics
     */
    @Location("/public/metrics/deals-on-chain") class publicMetricsDealsOnChainGet()

    /**
     * Get all miners deals
     * This endpoint returns all miners deals
     * @param miner Filter by miner 
     */
    @Location("/public/miners/deals/{miner}") class publicMinersDealsMinerGet(val miner: kotlin.String)

    /**
     * Get all miners
     * This endpoint returns all miners
     * @param miner Filter by miner 
     */
    @Location("/public/miners/failures/{miner}") class publicMinersFailuresMinerGet(val miner: kotlin.String)

    /**
     * Get all miners
     * This endpoint returns all miners
     */
    @Location("/public/miners") class publicMinersGet()

    /**
     * Get miner stats
     * This endpoint returns miner stats
     * @param miner Filter by miner 
     */
    @Location("/public/miners/stats/{miner}") class publicMinersStatsMinerGet(val miner: kotlin.String)

    /**
     * Net Addrs
     * This endpoint is used to get net addrs
     */
    @Location("/public/net/addrs") class publicNetAddrsGet()

    /**
     * Net Peers
     * This endpoint is used to get net peers
     */
    @Location("/public/net/peers") class publicNetPeersGet()

    /**
     * Public stats
     * This endpoint is used to get public stats.
     */
    @Location("/public/stats") class publicStatsGet()

    /**
     * Get API keys for a user
     * This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.
     */
    @Location("/user/api-keys") class userApiKeysGet()

    /**
     * Revoke a User API Key.
     * This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily use to access all estuary features. This endpoint can be used to revoke the API key thats assigned to the user.
     * @param key Key 
     */
    @Location("/user/api-keys/{key}") class userApiKeysKeyDelete(val key: kotlin.String)

    /**
     * Export user data
     * This endpoint is used to get API keys for a user.
     */
    @Location("/user/export") class userExportGet()

    /**
     * Create API keys for a user
     * This endpoint is used to create API keys for a user.
     */
    @Location("/user/stats") class userStatsGet()

}
