# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from estuary-client.models.base_model_ import Model
from estuary-client import util


class CollectionsCollection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cid: str=None, created_at: str=None, description: str=None, name: str=None, user_id: int=None, uuid: str=None):  # noqa: E501
        """CollectionsCollection - a model defined in Swagger

        :param cid: The cid of this CollectionsCollection.  # noqa: E501
        :type cid: str
        :param created_at: The created_at of this CollectionsCollection.  # noqa: E501
        :type created_at: str
        :param description: The description of this CollectionsCollection.  # noqa: E501
        :type description: str
        :param name: The name of this CollectionsCollection.  # noqa: E501
        :type name: str
        :param user_id: The user_id of this CollectionsCollection.  # noqa: E501
        :type user_id: int
        :param uuid: The uuid of this CollectionsCollection.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'cid': str,
            'created_at': str,
            'description': str,
            'name': str,
            'user_id': int,
            'uuid': str
        }

        self.attribute_map = {
            'cid': 'cid',
            'created_at': 'createdAt',
            'description': 'description',
            'name': 'name',
            'user_id': 'userId',
            'uuid': 'uuid'
        }
        self._cid = cid
        self._created_at = created_at
        self._description = description
        self._name = name
        self._user_id = user_id
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'CollectionsCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The collections.Collection of this CollectionsCollection.  # noqa: E501
        :rtype: CollectionsCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cid(self) -> str:
        """Gets the cid of this CollectionsCollection.


        :return: The cid of this CollectionsCollection.
        :rtype: str
        """
        return self._cid

    @cid.setter
    def cid(self, cid: str):
        """Sets the cid of this CollectionsCollection.


        :param cid: The cid of this CollectionsCollection.
        :type cid: str
        """

        self._cid = cid

    @property
    def created_at(self) -> str:
        """Gets the created_at of this CollectionsCollection.


        :return: The created_at of this CollectionsCollection.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this CollectionsCollection.


        :param created_at: The created_at of this CollectionsCollection.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def description(self) -> str:
        """Gets the description of this CollectionsCollection.


        :return: The description of this CollectionsCollection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CollectionsCollection.


        :param description: The description of this CollectionsCollection.
        :type description: str
        """

        self._description = description

    @property
    def name(self) -> str:
        """Gets the name of this CollectionsCollection.


        :return: The name of this CollectionsCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CollectionsCollection.


        :param name: The name of this CollectionsCollection.
        :type name: str
        """

        self._name = name

    @property
    def user_id(self) -> int:
        """Gets the user_id of this CollectionsCollection.


        :return: The user_id of this CollectionsCollection.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: int):
        """Sets the user_id of this CollectionsCollection.


        :param user_id: The user_id of this CollectionsCollection.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def uuid(self) -> str:
        """Gets the uuid of this CollectionsCollection.


        :return: The uuid of this CollectionsCollection.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this CollectionsCollection.


        :param uuid: The uuid of this CollectionsCollection.
        :type uuid: str
        """

        self._uuid = uuid
