# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from estuary-client.models.base_model_ import Model
from estuary-client.models.util_user_settings import UtilUserSettings  # noqa: F401,E501
from estuary-client import util


class UtilViewerResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, address: str=None, auth_expiry: str=None, id: int=None, miners: List[str]=None, perms: int=None, settings: UtilUserSettings=None, username: str=None):  # noqa: E501
        """UtilViewerResponse - a model defined in Swagger

        :param address: The address of this UtilViewerResponse.  # noqa: E501
        :type address: str
        :param auth_expiry: The auth_expiry of this UtilViewerResponse.  # noqa: E501
        :type auth_expiry: str
        :param id: The id of this UtilViewerResponse.  # noqa: E501
        :type id: int
        :param miners: The miners of this UtilViewerResponse.  # noqa: E501
        :type miners: List[str]
        :param perms: The perms of this UtilViewerResponse.  # noqa: E501
        :type perms: int
        :param settings: The settings of this UtilViewerResponse.  # noqa: E501
        :type settings: UtilUserSettings
        :param username: The username of this UtilViewerResponse.  # noqa: E501
        :type username: str
        """
        self.swagger_types = {
            'address': str,
            'auth_expiry': str,
            'id': int,
            'miners': List[str],
            'perms': int,
            'settings': UtilUserSettings,
            'username': str
        }

        self.attribute_map = {
            'address': 'address',
            'auth_expiry': 'auth_expiry',
            'id': 'id',
            'miners': 'miners',
            'perms': 'perms',
            'settings': 'settings',
            'username': 'username'
        }
        self._address = address
        self._auth_expiry = auth_expiry
        self._id = id
        self._miners = miners
        self._perms = perms
        self._settings = settings
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'UtilViewerResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The util.ViewerResponse of this UtilViewerResponse.  # noqa: E501
        :rtype: UtilViewerResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self) -> str:
        """Gets the address of this UtilViewerResponse.


        :return: The address of this UtilViewerResponse.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address: str):
        """Sets the address of this UtilViewerResponse.


        :param address: The address of this UtilViewerResponse.
        :type address: str
        """

        self._address = address

    @property
    def auth_expiry(self) -> str:
        """Gets the auth_expiry of this UtilViewerResponse.


        :return: The auth_expiry of this UtilViewerResponse.
        :rtype: str
        """
        return self._auth_expiry

    @auth_expiry.setter
    def auth_expiry(self, auth_expiry: str):
        """Sets the auth_expiry of this UtilViewerResponse.


        :param auth_expiry: The auth_expiry of this UtilViewerResponse.
        :type auth_expiry: str
        """

        self._auth_expiry = auth_expiry

    @property
    def id(self) -> int:
        """Gets the id of this UtilViewerResponse.


        :return: The id of this UtilViewerResponse.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this UtilViewerResponse.


        :param id: The id of this UtilViewerResponse.
        :type id: int
        """

        self._id = id

    @property
    def miners(self) -> List[str]:
        """Gets the miners of this UtilViewerResponse.


        :return: The miners of this UtilViewerResponse.
        :rtype: List[str]
        """
        return self._miners

    @miners.setter
    def miners(self, miners: List[str]):
        """Sets the miners of this UtilViewerResponse.


        :param miners: The miners of this UtilViewerResponse.
        :type miners: List[str]
        """

        self._miners = miners

    @property
    def perms(self) -> int:
        """Gets the perms of this UtilViewerResponse.


        :return: The perms of this UtilViewerResponse.
        :rtype: int
        """
        return self._perms

    @perms.setter
    def perms(self, perms: int):
        """Sets the perms of this UtilViewerResponse.


        :param perms: The perms of this UtilViewerResponse.
        :type perms: int
        """

        self._perms = perms

    @property
    def settings(self) -> UtilUserSettings:
        """Gets the settings of this UtilViewerResponse.


        :return: The settings of this UtilViewerResponse.
        :rtype: UtilUserSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings: UtilUserSettings):
        """Sets the settings of this UtilViewerResponse.


        :param settings: The settings of this UtilViewerResponse.
        :type settings: UtilUserSettings
        """

        self._settings = settings

    @property
    def username(self) -> str:
        """Gets the username of this UtilViewerResponse.


        :return: The username of this UtilViewerResponse.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UtilViewerResponse.


        :param username: The username of this UtilViewerResponse.
        :type username: str
        """

        self._username = username
