# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from estuary-client.models.base_model_ import Model
from estuary-client import util


class PeeringPeeringPeer(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, addrs: List[str]=None, connected: bool=None, id: str=None):  # noqa: E501
        """PeeringPeeringPeer - a model defined in Swagger

        :param addrs: The addrs of this PeeringPeeringPeer.  # noqa: E501
        :type addrs: List[str]
        :param connected: The connected of this PeeringPeeringPeer.  # noqa: E501
        :type connected: bool
        :param id: The id of this PeeringPeeringPeer.  # noqa: E501
        :type id: str
        """
        self.swagger_types = {
            'addrs': List[str],
            'connected': bool,
            'id': str
        }

        self.attribute_map = {
            'addrs': 'Addrs',
            'connected': 'Connected',
            'id': 'ID'
        }
        self._addrs = addrs
        self._connected = connected
        self._id = id

    @classmethod
    def from_dict(cls, dikt) -> 'PeeringPeeringPeer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The peering.PeeringPeer of this PeeringPeeringPeer.  # noqa: E501
        :rtype: PeeringPeeringPeer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addrs(self) -> List[str]:
        """Gets the addrs of this PeeringPeeringPeer.


        :return: The addrs of this PeeringPeeringPeer.
        :rtype: List[str]
        """
        return self._addrs

    @addrs.setter
    def addrs(self, addrs: List[str]):
        """Sets the addrs of this PeeringPeeringPeer.


        :param addrs: The addrs of this PeeringPeeringPeer.
        :type addrs: List[str]
        """

        self._addrs = addrs

    @property
    def connected(self) -> bool:
        """Gets the connected of this PeeringPeeringPeer.


        :return: The connected of this PeeringPeeringPeer.
        :rtype: bool
        """
        return self._connected

    @connected.setter
    def connected(self, connected: bool):
        """Sets the connected of this PeeringPeeringPeer.


        :param connected: The connected of this PeeringPeeringPeer.
        :type connected: bool
        """

        self._connected = connected

    @property
    def id(self) -> str:
        """Gets the id of this PeeringPeeringPeer.


        :return: The id of this PeeringPeeringPeer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PeeringPeeringPeer.


        :param id: The id of this PeeringPeeringPeer.
        :type id: str
        """

        self._id = id
