# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from estuary-client.models.base_model_ import Model
from estuary-client import util


class UtilUserSettings(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, content_adding_disabled: bool=None, deal_duration: int=None, deal_making_disabled: bool=None, file_staging_threshold: int=None, flags: int=None, replication: int=None, upload_endpoints: List[str]=None, verified: bool=None):  # noqa: E501
        """UtilUserSettings - a model defined in Swagger

        :param content_adding_disabled: The content_adding_disabled of this UtilUserSettings.  # noqa: E501
        :type content_adding_disabled: bool
        :param deal_duration: The deal_duration of this UtilUserSettings.  # noqa: E501
        :type deal_duration: int
        :param deal_making_disabled: The deal_making_disabled of this UtilUserSettings.  # noqa: E501
        :type deal_making_disabled: bool
        :param file_staging_threshold: The file_staging_threshold of this UtilUserSettings.  # noqa: E501
        :type file_staging_threshold: int
        :param flags: The flags of this UtilUserSettings.  # noqa: E501
        :type flags: int
        :param replication: The replication of this UtilUserSettings.  # noqa: E501
        :type replication: int
        :param upload_endpoints: The upload_endpoints of this UtilUserSettings.  # noqa: E501
        :type upload_endpoints: List[str]
        :param verified: The verified of this UtilUserSettings.  # noqa: E501
        :type verified: bool
        """
        self.swagger_types = {
            'content_adding_disabled': bool,
            'deal_duration': int,
            'deal_making_disabled': bool,
            'file_staging_threshold': int,
            'flags': int,
            'replication': int,
            'upload_endpoints': List[str],
            'verified': bool
        }

        self.attribute_map = {
            'content_adding_disabled': 'contentAddingDisabled',
            'deal_duration': 'dealDuration',
            'deal_making_disabled': 'dealMakingDisabled',
            'file_staging_threshold': 'fileStagingThreshold',
            'flags': 'flags',
            'replication': 'replication',
            'upload_endpoints': 'uploadEndpoints',
            'verified': 'verified'
        }
        self._content_adding_disabled = content_adding_disabled
        self._deal_duration = deal_duration
        self._deal_making_disabled = deal_making_disabled
        self._file_staging_threshold = file_staging_threshold
        self._flags = flags
        self._replication = replication
        self._upload_endpoints = upload_endpoints
        self._verified = verified

    @classmethod
    def from_dict(cls, dikt) -> 'UtilUserSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The util.UserSettings of this UtilUserSettings.  # noqa: E501
        :rtype: UtilUserSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_adding_disabled(self) -> bool:
        """Gets the content_adding_disabled of this UtilUserSettings.


        :return: The content_adding_disabled of this UtilUserSettings.
        :rtype: bool
        """
        return self._content_adding_disabled

    @content_adding_disabled.setter
    def content_adding_disabled(self, content_adding_disabled: bool):
        """Sets the content_adding_disabled of this UtilUserSettings.


        :param content_adding_disabled: The content_adding_disabled of this UtilUserSettings.
        :type content_adding_disabled: bool
        """

        self._content_adding_disabled = content_adding_disabled

    @property
    def deal_duration(self) -> int:
        """Gets the deal_duration of this UtilUserSettings.


        :return: The deal_duration of this UtilUserSettings.
        :rtype: int
        """
        return self._deal_duration

    @deal_duration.setter
    def deal_duration(self, deal_duration: int):
        """Sets the deal_duration of this UtilUserSettings.


        :param deal_duration: The deal_duration of this UtilUserSettings.
        :type deal_duration: int
        """

        self._deal_duration = deal_duration

    @property
    def deal_making_disabled(self) -> bool:
        """Gets the deal_making_disabled of this UtilUserSettings.


        :return: The deal_making_disabled of this UtilUserSettings.
        :rtype: bool
        """
        return self._deal_making_disabled

    @deal_making_disabled.setter
    def deal_making_disabled(self, deal_making_disabled: bool):
        """Sets the deal_making_disabled of this UtilUserSettings.


        :param deal_making_disabled: The deal_making_disabled of this UtilUserSettings.
        :type deal_making_disabled: bool
        """

        self._deal_making_disabled = deal_making_disabled

    @property
    def file_staging_threshold(self) -> int:
        """Gets the file_staging_threshold of this UtilUserSettings.


        :return: The file_staging_threshold of this UtilUserSettings.
        :rtype: int
        """
        return self._file_staging_threshold

    @file_staging_threshold.setter
    def file_staging_threshold(self, file_staging_threshold: int):
        """Sets the file_staging_threshold of this UtilUserSettings.


        :param file_staging_threshold: The file_staging_threshold of this UtilUserSettings.
        :type file_staging_threshold: int
        """

        self._file_staging_threshold = file_staging_threshold

    @property
    def flags(self) -> int:
        """Gets the flags of this UtilUserSettings.


        :return: The flags of this UtilUserSettings.
        :rtype: int
        """
        return self._flags

    @flags.setter
    def flags(self, flags: int):
        """Sets the flags of this UtilUserSettings.


        :param flags: The flags of this UtilUserSettings.
        :type flags: int
        """

        self._flags = flags

    @property
    def replication(self) -> int:
        """Gets the replication of this UtilUserSettings.


        :return: The replication of this UtilUserSettings.
        :rtype: int
        """
        return self._replication

    @replication.setter
    def replication(self, replication: int):
        """Sets the replication of this UtilUserSettings.


        :param replication: The replication of this UtilUserSettings.
        :type replication: int
        """

        self._replication = replication

    @property
    def upload_endpoints(self) -> List[str]:
        """Gets the upload_endpoints of this UtilUserSettings.


        :return: The upload_endpoints of this UtilUserSettings.
        :rtype: List[str]
        """
        return self._upload_endpoints

    @upload_endpoints.setter
    def upload_endpoints(self, upload_endpoints: List[str]):
        """Sets the upload_endpoints of this UtilUserSettings.


        :param upload_endpoints: The upload_endpoints of this UtilUserSettings.
        :type upload_endpoints: List[str]
        """

        self._upload_endpoints = upload_endpoints

    @property
    def verified(self) -> bool:
        """Gets the verified of this UtilUserSettings.


        :return: The verified of this UtilUserSettings.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: bool):
        """Sets the verified of this UtilUserSettings.


        :param verified: The verified of this UtilUserSettings.
        :type verified: bool
        """

        self._verified = verified
