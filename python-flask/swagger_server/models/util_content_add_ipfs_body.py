# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class UtilContentAddIpfsBody(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, coluuid: str=None, dir: str=None, filename: str=None, peers: List[str]=None, root: str=None):  # noqa: E501
        """UtilContentAddIpfsBody - a model defined in Swagger

        :param coluuid: The coluuid of this UtilContentAddIpfsBody.  # noqa: E501
        :type coluuid: str
        :param dir: The dir of this UtilContentAddIpfsBody.  # noqa: E501
        :type dir: str
        :param filename: The filename of this UtilContentAddIpfsBody.  # noqa: E501
        :type filename: str
        :param peers: The peers of this UtilContentAddIpfsBody.  # noqa: E501
        :type peers: List[str]
        :param root: The root of this UtilContentAddIpfsBody.  # noqa: E501
        :type root: str
        """
        self.swagger_types = {
            'coluuid': str,
            'dir': str,
            'filename': str,
            'peers': List[str],
            'root': str
        }

        self.attribute_map = {
            'coluuid': 'coluuid',
            'dir': 'dir',
            'filename': 'filename',
            'peers': 'peers',
            'root': 'root'
        }

        self._coluuid = coluuid
        self._dir = dir
        self._filename = filename
        self._peers = peers
        self._root = root

    @classmethod
    def from_dict(cls, dikt) -> 'UtilContentAddIpfsBody':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The util.ContentAddIpfsBody of this UtilContentAddIpfsBody.  # noqa: E501
        :rtype: UtilContentAddIpfsBody
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coluuid(self) -> str:
        """Gets the coluuid of this UtilContentAddIpfsBody.


        :return: The coluuid of this UtilContentAddIpfsBody.
        :rtype: str
        """
        return self._coluuid

    @coluuid.setter
    def coluuid(self, coluuid: str):
        """Sets the coluuid of this UtilContentAddIpfsBody.


        :param coluuid: The coluuid of this UtilContentAddIpfsBody.
        :type coluuid: str
        """

        self._coluuid = coluuid

    @property
    def dir(self) -> str:
        """Gets the dir of this UtilContentAddIpfsBody.


        :return: The dir of this UtilContentAddIpfsBody.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir: str):
        """Sets the dir of this UtilContentAddIpfsBody.


        :param dir: The dir of this UtilContentAddIpfsBody.
        :type dir: str
        """

        self._dir = dir

    @property
    def filename(self) -> str:
        """Gets the filename of this UtilContentAddIpfsBody.


        :return: The filename of this UtilContentAddIpfsBody.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename: str):
        """Sets the filename of this UtilContentAddIpfsBody.


        :param filename: The filename of this UtilContentAddIpfsBody.
        :type filename: str
        """

        self._filename = filename

    @property
    def peers(self) -> List[str]:
        """Gets the peers of this UtilContentAddIpfsBody.


        :return: The peers of this UtilContentAddIpfsBody.
        :rtype: List[str]
        """
        return self._peers

    @peers.setter
    def peers(self, peers: List[str]):
        """Sets the peers of this UtilContentAddIpfsBody.


        :param peers: The peers of this UtilContentAddIpfsBody.
        :type peers: List[str]
        """

        self._peers = peers

    @property
    def root(self) -> str:
        """Gets the root of this UtilContentAddIpfsBody.


        :return: The root of this UtilContentAddIpfsBody.
        :rtype: str
        """
        return self._root

    @root.setter
    def root(self, root: str):
        """Sets the root of this UtilContentAddIpfsBody.


        :param root: The root of this UtilContentAddIpfsBody.
        :type root: str
        """

        self._root = root
