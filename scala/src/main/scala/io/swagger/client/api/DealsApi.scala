/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.EstimateDealBody
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class DealsApi(
  val defBasePath: String = "https://api.estuary.tech",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new DealsApiAsyncHelper(client, config)

  /**
   * Estimate the cost of a deal
   * This endpoint estimates the cost of a deal
   *
   * @param body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks 
   * @return void
   */
  def dealEstimatePost(body: EstimateDealBody) = {
    val await = Try(Await.result(dealEstimatePostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Estimate the cost of a deal asynchronously
   * This endpoint estimates the cost of a deal
   *
   * @param body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks 
   * @return Future(void)
   */
  def dealEstimatePostAsync(body: EstimateDealBody) = {
      helper.dealEstimatePost(body)
  }

  /**
   * Get Deal Info
   * This endpoint returns the deal info for a deal
   *
   * @param dealid Deal ID 
   * @return void
   */
  def dealInfoDealidGet(dealid: Integer) = {
    val await = Try(Await.result(dealInfoDealidGetAsync(dealid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Deal Info asynchronously
   * This endpoint returns the deal info for a deal
   *
   * @param dealid Deal ID 
   * @return Future(void)
   */
  def dealInfoDealidGetAsync(dealid: Integer) = {
      helper.dealInfoDealidGet(dealid)
  }

  /**
   * Get Proposal
   * This endpoint returns the proposal for a deal
   *
   * @param propcid Proposal CID 
   * @return void
   */
  def dealProposalPropcidGet(propcid: String) = {
    val await = Try(Await.result(dealProposalPropcidGetAsync(propcid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Proposal asynchronously
   * This endpoint returns the proposal for a deal
   *
   * @param propcid Proposal CID 
   * @return Future(void)
   */
  def dealProposalPropcidGetAsync(propcid: String) = {
      helper.dealProposalPropcidGet(propcid)
  }

  /**
   * Query Ask
   * This endpoint returns the ask for a given CID
   *
   * @param miner CID 
   * @return void
   */
  def dealQueryMinerGet(miner: String) = {
    val await = Try(Await.result(dealQueryMinerGetAsync(miner), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query Ask asynchronously
   * This endpoint returns the ask for a given CID
   *
   * @param miner CID 
   * @return Future(void)
   */
  def dealQueryMinerGetAsync(miner: String) = {
      helper.dealQueryMinerGet(miner)
  }

  /**
   * Get Deal Status by PropCid
   * Get Deal Status by PropCid
   *
   * @param propcid PropCid 
   * @return void
   */
  def dealStatusByProposalPropcidGet(propcid: String) = {
    val await = Try(Await.result(dealStatusByProposalPropcidGetAsync(propcid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Deal Status by PropCid asynchronously
   * Get Deal Status by PropCid
   *
   * @param propcid PropCid 
   * @return Future(void)
   */
  def dealStatusByProposalPropcidGetAsync(propcid: String) = {
      helper.dealStatusByProposalPropcidGet(propcid)
  }

  /**
   * Deal Status
   * This endpoint returns the status of a deal
   *
   * @param miner Miner 
   * @param propcid Proposal CID 
   * @return void
   */
  def dealStatusMinerPropcidGet(miner: String, propcid: String) = {
    val await = Try(Await.result(dealStatusMinerPropcidGetAsync(miner, propcid), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Deal Status asynchronously
   * This endpoint returns the status of a deal
   *
   * @param miner Miner 
   * @param propcid Proposal CID 
   * @return Future(void)
   */
  def dealStatusMinerPropcidGetAsync(miner: String, propcid: String) = {
      helper.dealStatusMinerPropcidGet(miner, propcid)
  }

  /**
   * Transfer In Progress
   * This endpoint returns the in-progress transfers
   *
   * @return void
   */
  def dealTransferInProgressGet() = {
    val await = Try(Await.result(dealTransferInProgressGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Transfer In Progress asynchronously
   * This endpoint returns the in-progress transfers
   *
   * @return Future(void)
   */
  def dealTransferInProgressGetAsync() = {
      helper.dealTransferInProgressGet()
  }

  /**
   * Transfer Status
   * This endpoint returns the status of a transfer
   *
   * @return void
   */
  def dealTransferStatusPost() = {
    val await = Try(Await.result(dealTransferStatusPostAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Transfer Status asynchronously
   * This endpoint returns the status of a transfer
   *
   * @return Future(void)
   */
  def dealTransferStatusPostAsync() = {
      helper.dealTransferStatusPost()
  }

  /**
   * Get storage failures for user
   * This endpoint returns a list of storage failures for user
   *
   * @return void
   */
  def dealsFailuresGet() = {
    val await = Try(Await.result(dealsFailuresGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get storage failures for user asynchronously
   * This endpoint returns a list of storage failures for user
   *
   * @return Future(void)
   */
  def dealsFailuresGetAsync() = {
      helper.dealsFailuresGet()
  }

  /**
   * Make Deal
   * This endpoint makes a deal for a given content and miner
   *
   * @param miner Miner 
   * @param dealRequest Deal Request 
   * @return void
   */
  def dealsMakeMinerPost(miner: String, dealRequest: String) = {
    val await = Try(Await.result(dealsMakeMinerPostAsync(miner, dealRequest), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Make Deal asynchronously
   * This endpoint makes a deal for a given content and miner
   *
   * @param miner Miner 
   * @param dealRequest Deal Request 
   * @return Future(void)
   */
  def dealsMakeMinerPostAsync(miner: String, dealRequest: String) = {
      helper.dealsMakeMinerPost(miner, dealRequest)
  }

  /**
   * Get Deal Status
   * This endpoint returns the status of a deal
   *
   * @param deal Deal ID 
   * @return void
   */
  def dealsStatusDealGet(deal: Integer) = {
    val await = Try(Await.result(dealsStatusDealGetAsync(deal), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Deal Status asynchronously
   * This endpoint returns the status of a deal
   *
   * @param deal Deal ID 
   * @return Future(void)
   */
  def dealsStatusDealGetAsync(deal: Integer) = {
      helper.dealsStatusDealGet(deal)
  }

  /**
   * Get storage failures
   * This endpoint returns a list of storage failures
   *
   * @return void
   */
  def publicDealsFailuresGet() = {
    val await = Try(Await.result(publicDealsFailuresGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get storage failures asynchronously
   * This endpoint returns a list of storage failures
   *
   * @return Future(void)
   */
  def publicDealsFailuresGetAsync() = {
      helper.publicDealsFailuresGet()
  }

  /**
   * Query Ask
   * This endpoint returns the ask for a given CID
   *
   * @param miner CID 
   * @return void
   */
  def publicMinersStorageQueryMinerGet(miner: String) = {
    val await = Try(Await.result(publicMinersStorageQueryMinerGetAsync(miner), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Query Ask asynchronously
   * This endpoint returns the ask for a given CID
   *
   * @param miner CID 
   * @return Future(void)
   */
  def publicMinersStorageQueryMinerGetAsync(miner: String) = {
      helper.publicMinersStorageQueryMinerGet(miner)
  }

}

class DealsApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def dealEstimatePost(body: EstimateDealBody)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[EstimateDealBody]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/estimate"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling DealsApi->dealEstimatePost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealInfoDealidGet(dealid: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/info/{dealid}")
      replaceAll("\\{" + "dealid" + "\\}", dealid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealProposalPropcidGet(propcid: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/proposal/{propcid}")
      replaceAll("\\{" + "propcid" + "\\}", propcid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (propcid == null) throw new Exception("Missing required parameter 'propcid' when calling DealsApi->dealProposalPropcidGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealQueryMinerGet(miner: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/query/{miner}")
      replaceAll("\\{" + "miner" + "\\}", miner.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (miner == null) throw new Exception("Missing required parameter 'miner' when calling DealsApi->dealQueryMinerGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealStatusByProposalPropcidGet(propcid: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/status-by-proposal/{propcid}")
      replaceAll("\\{" + "propcid" + "\\}", propcid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (propcid == null) throw new Exception("Missing required parameter 'propcid' when calling DealsApi->dealStatusByProposalPropcidGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealStatusMinerPropcidGet(miner: String,
    propcid: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/status/{miner}/{propcid}")
      replaceAll("\\{" + "miner" + "\\}", miner.toString)
      replaceAll("\\{" + "propcid" + "\\}", propcid.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (miner == null) throw new Exception("Missing required parameter 'miner' when calling DealsApi->dealStatusMinerPropcidGet")

    if (propcid == null) throw new Exception("Missing required parameter 'propcid' when calling DealsApi->dealStatusMinerPropcidGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealTransferInProgressGet()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/transfer/in-progress"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealTransferStatusPost()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deal/transfer/status"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealsFailuresGet()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deals/failures"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealsMakeMinerPost(miner: String,
    dealRequest: String)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[String]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deals/make/{miner}")
      replaceAll("\\{" + "miner" + "\\}", miner.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (miner == null) throw new Exception("Missing required parameter 'miner' when calling DealsApi->dealsMakeMinerPost")

    if (dealRequest == null) throw new Exception("Missing required parameter 'dealRequest' when calling DealsApi->dealsMakeMinerPost")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(dealRequest))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def dealsStatusDealGet(deal: Integer)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/deals/status/{deal}")
      replaceAll("\\{" + "deal" + "\\}", deal.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def publicDealsFailuresGet()(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/public/deals/failures"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def publicMinersStorageQueryMinerGet(miner: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/public/miners/storage/query/{miner}")
      replaceAll("\\{" + "miner" + "\\}", miner.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (miner == null) throw new Exception("Missing required parameter 'miner' when calling DealsApi->publicMinersStorageQueryMinerGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
