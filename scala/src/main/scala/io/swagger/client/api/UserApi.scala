/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.GetApiKeysResp
import io.swagger.client.model.HttpError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class UserApi(
  val defBasePath: String = "https://api.estuary.tech",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new UserApiAsyncHelper(client, config)

  /**
   * Get API keys for a user
   * This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.
   *
   * @return List[List[GetApiKeysResp]]
   */
  def userApiKeysGet(): Option[List[List[GetApiKeysResp]]] = {
    val await = Try(Await.result(userApiKeysGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get API keys for a user asynchronously
   * This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.
   *
   * @return Future(List[List[GetApiKeysResp]])
   */
  def userApiKeysGetAsync(): Future[List[List[GetApiKeysResp]]] = {
      helper.userApiKeysGet()
  }

  /**
   * Revoke a User API Key.
   * This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily used to access all estuary features. This endpoint can be used to revoke the API key that&#39;s assigned to the user. Revoked API keys are completely deleted and are not recoverable.
   *
   * @param keyOrHash Key or Hash 
   * @return String
   */
  def userApiKeysKeyOrHashDelete(keyOrHash: String): Option[String] = {
    val await = Try(Await.result(userApiKeysKeyOrHashDeleteAsync(keyOrHash), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Revoke a User API Key. asynchronously
   * This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily used to access all estuary features. This endpoint can be used to revoke the API key that&#39;s assigned to the user. Revoked API keys are completely deleted and are not recoverable.
   *
   * @param keyOrHash Key or Hash 
   * @return Future(String)
   */
  def userApiKeysKeyOrHashDeleteAsync(keyOrHash: String): Future[String] = {
      helper.userApiKeysKeyOrHashDelete(keyOrHash)
  }

  /**
   * Create API keys for a user
   * This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features.
   *
   * @param expiry Expiration - Expiration - Valid time units are ns, us (or Âµs),  ms,  s,  m,  h.  for  example  300h (optional)
   * @param perms Permissions -- currently unused (optional)
   * @return GetApiKeysResp
   */
  def userApiKeysPost(expiry: Option[String] = None, perms: Option[String] = None): Option[GetApiKeysResp] = {
    val await = Try(Await.result(userApiKeysPostAsync(expiry, perms), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create API keys for a user asynchronously
   * This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features.
   *
   * @param expiry Expiration - Expiration - Valid time units are ns, us (or Âµs),  ms,  s,  m,  h.  for  example  300h (optional)
   * @param perms Permissions -- currently unused (optional)
   * @return Future(GetApiKeysResp)
   */
  def userApiKeysPostAsync(expiry: Option[String] = None, perms: Option[String] = None): Future[GetApiKeysResp] = {
      helper.userApiKeysPost(expiry, perms)
  }

  /**
   * Export user data
   * This endpoint is used to get API keys for a user.
   *
   * @return String
   */
  def userExportGet(): Option[String] = {
    val await = Try(Await.result(userExportGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Export user data asynchronously
   * This endpoint is used to get API keys for a user.
   *
   * @return Future(String)
   */
  def userExportGetAsync(): Future[String] = {
      helper.userExportGet()
  }

  /**
   * Create API keys for a user
   * This endpoint is used to create API keys for a user.
   *
   * @return String
   */
  def userStatsGet(): Option[String] = {
    val await = Try(Await.result(userStatsGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Create API keys for a user asynchronously
   * This endpoint is used to create API keys for a user.
   *
   * @return Future(String)
   */
  def userStatsGetAsync(): Future[String] = {
      helper.userStatsGet()
  }

}

class UserApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def userApiKeysGet()(implicit reader: ClientResponseReader[List[List[GetApiKeysResp]]]): Future[List[List[GetApiKeysResp]]] = {
    // create path and map variables
    val path = (addFmt("/user/api-keys"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userApiKeysKeyOrHashDelete(keyOrHash: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/user/api-keys/{key_or_hash}")
      replaceAll("\\{" + "key_or_hash" + "\\}", keyOrHash.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (keyOrHash == null) throw new Exception("Missing required parameter 'keyOrHash' when calling UserApi->userApiKeysKeyOrHashDelete")


    val resFuture = client.submit("DELETE", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userApiKeysPost(expiry: Option[String] = None,
    perms: Option[String] = None
    )(implicit reader: ClientResponseReader[GetApiKeysResp]): Future[GetApiKeysResp] = {
    // create path and map variables
    val path = (addFmt("/user/api-keys"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    expiry match {
      case Some(param) => queryParams += "expiry" -> param.toString
      case _ => queryParams
    }
    perms match {
      case Some(param) => queryParams += "perms" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userExportGet()(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/user/export"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def userStatsGet()(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/user/stats"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
