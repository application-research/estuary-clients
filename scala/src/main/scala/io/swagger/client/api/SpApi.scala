/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.text.SimpleDateFormat

import io.swagger.client.model.ClaimMinerBody
import io.swagger.client.model.MinerSetInfoParams
import io.swagger.client.model.SuspendMinerBody
import io.swagger.client.model.api.storageProviderResp
import io.swagger.client.model.github_com_application-research_estuary_api_v2.claimMsgResponse
import io.swagger.client.model.github_com_application-research_estuary_api_v2.claimResponse
import io.swagger.client.model.util.HttpError
import io.swagger.client.{ApiInvoker, ApiException}

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date
import java.util.TimeZone

import scala.collection.mutable.HashMap

import com.wordnik.swagger.client._
import scala.concurrent.Future
import collection.mutable

import java.net.URI

import com.wordnik.swagger.client.ClientResponseReaders.Json4sFormatsReader._
import com.wordnik.swagger.client.RequestWriters.Json4sFormatsWriter._

import scala.concurrent.ExecutionContext.Implicits.global
import scala.concurrent._
import scala.concurrent.duration._
import scala.util.{Failure, Success, Try}

import org.json4s._

class SpApi(
  val defBasePath: String = "//api.estuary.tech/",
  defApiInvoker: ApiInvoker = ApiInvoker
) {
  private lazy val dateTimeFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  private val dateFormatter = {
    val formatter = new SimpleDateFormat("yyyy-MM-dd")
    formatter.setTimeZone(TimeZone.getTimeZone("UTC"))
    formatter
  }
  implicit val formats = new org.json4s.DefaultFormats {
    override def dateFormatter = dateTimeFormatter
  }
  implicit val stringReader: ClientResponseReader[String] = ClientResponseReaders.StringReader
  implicit val unitReader: ClientResponseReader[Unit] = ClientResponseReaders.UnitReader
  implicit val jvalueReader: ClientResponseReader[JValue] = ClientResponseReaders.JValueReader
  implicit val jsonReader: ClientResponseReader[Nothing] = JsonFormatsReader
  implicit val stringWriter: RequestWriter[String] = RequestWriters.StringWriter
  implicit val jsonWriter: RequestWriter[Nothing] = JsonFormatsWriter

  var basePath: String = defBasePath
  var apiInvoker: ApiInvoker = defApiInvoker

  def addHeader(key: String, value: String): mutable.HashMap[String, String] = {
    apiInvoker.defaultHeaders += key -> value
  }

  val config: SwaggerConfig = SwaggerConfig.forUrl(new URI(defBasePath))
  val client = new RestClient(config)
  val helper = new SpApiAsyncHelper(client, config)

  /**
   * Claim Storage Provider
   * This endpoint lets a user claim a storage provider
   *
   * @param body Claim Storage Provider Body 
   * @return github_com_application-research_estuary_api_v2.claimResponse
   */
  def storageProvidersClaimPost(body: ClaimMinerBody): Option[github_com_application-research_estuary_api_v2.claimResponse] = {
    val await = Try(Await.result(storageProvidersClaimPostAsync(body), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Claim Storage Provider asynchronously
   * This endpoint lets a user claim a storage provider
   *
   * @param body Claim Storage Provider Body 
   * @return Future(github_com_application-research_estuary_api_v2.claimResponse)
   */
  def storageProvidersClaimPostAsync(body: ClaimMinerBody): Future[github_com_application-research_estuary_api_v2.claimResponse] = {
      helper.storageProvidersClaimPost(body)
  }

  /**
   * Get Claim Storage Provider
   * This endpoint lets a user get the message in order to claim a storage provider
   *
   * @param sp Storage Provider claim message 
   * @return github_com_application-research_estuary_api_v2.claimMsgResponse
   */
  def storageProvidersClaimSpGet(sp: String): Option[github_com_application-research_estuary_api_v2.claimMsgResponse] = {
    val await = Try(Await.result(storageProvidersClaimSpGetAsync(sp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get Claim Storage Provider asynchronously
   * This endpoint lets a user get the message in order to claim a storage provider
   *
   * @param sp Storage Provider claim message 
   * @return Future(github_com_application-research_estuary_api_v2.claimMsgResponse)
   */
  def storageProvidersClaimSpGetAsync(sp: String): Future[github_com_application-research_estuary_api_v2.claimMsgResponse] = {
      helper.storageProvidersClaimSpGet(sp)
  }

  /**
   * Get all storage providers deals
   * This endpoint returns all storage providers deals
   *
   * @param sp Filter by storage provider 
   * @param ignoreFailed Ignore Failed (optional)
   * @return String
   */
  def storageProvidersDealsSpGet(sp: String, ignoreFailed: Option[String] = None): Option[String] = {
    val await = Try(Await.result(storageProvidersDealsSpGetAsync(sp, ignoreFailed), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all storage providers deals asynchronously
   * This endpoint returns all storage providers deals
   *
   * @param sp Filter by storage provider 
   * @param ignoreFailed Ignore Failed (optional)
   * @return Future(String)
   */
  def storageProvidersDealsSpGetAsync(sp: String, ignoreFailed: Option[String] = None): Future[String] = {
      helper.storageProvidersDealsSpGet(sp, ignoreFailed)
  }

  /**
   * Get all storage providers
   * This endpoint returns all storage providers
   *
   * @param sp Filter by storage provider 
   * @return String
   */
  def storageProvidersFailuresSpGet(sp: String): Option[String] = {
    val await = Try(Await.result(storageProvidersFailuresSpGetAsync(sp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all storage providers asynchronously
   * This endpoint returns all storage providers
   *
   * @param sp Filter by storage provider 
   * @return Future(String)
   */
  def storageProvidersFailuresSpGetAsync(sp: String): Future[String] = {
      helper.storageProvidersFailuresSpGet(sp)
  }

  /**
   * Get all storage providers
   * This endpoint returns all storage providers
   *
   * @return List[api.storageProviderResp]
   */
  def storageProvidersGet(): Option[List[api.storageProviderResp]] = {
    val await = Try(Await.result(storageProvidersGetAsync(), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get all storage providers asynchronously
   * This endpoint returns all storage providers
   *
   * @return Future(List[api.storageProviderResp])
   */
  def storageProvidersGetAsync(): Future[List[api.storageProviderResp]] = {
      helper.storageProvidersGet()
  }

  /**
   * Set Storage Provider Info
   * This endpoint lets a user set storage provider info.
   *
   * @param body Storage Provider set info params 
   * @param sp Storage Provider to set info for 
   * @return void
   */
  def storageProvidersSetInfoSpPut(body: MinerSetInfoParams, sp: String) = {
    val await = Try(Await.result(storageProvidersSetInfoSpPutAsync(body, sp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Set Storage Provider Info asynchronously
   * This endpoint lets a user set storage provider info.
   *
   * @param body Storage Provider set info params 
   * @param sp Storage Provider to set info for 
   * @return Future(void)
   */
  def storageProvidersSetInfoSpPutAsync(body: MinerSetInfoParams, sp: String) = {
      helper.storageProvidersSetInfoSpPut(body, sp)
  }

  /**
   * Get storage provider stats
   * This endpoint returns storage provider stats
   *
   * @param sp Filter by storage provider 
   * @return String
   */
  def storageProvidersStatsSpGet(sp: String): Option[String] = {
    val await = Try(Await.result(storageProvidersStatsSpGetAsync(sp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Get storage provider stats asynchronously
   * This endpoint returns storage provider stats
   *
   * @param sp Filter by storage provider 
   * @return Future(String)
   */
  def storageProvidersStatsSpGetAsync(sp: String): Future[String] = {
      helper.storageProvidersStatsSpGet(sp)
  }

  /**
   * Suspend Storage Provider
   * This endpoint lets a user suspend a storage provider.
   *
   * @param body Suspend Storage Provider Body 
   * @param sp Storage Provider to suspend 
   * @return Map[String, String]
   */
  def storageProvidersSuspendSpPost(body: SuspendMinerBody, sp: String): Option[Map[String, String]] = {
    val await = Try(Await.result(storageProvidersSuspendSpPostAsync(body, sp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Suspend Storage Provider asynchronously
   * This endpoint lets a user suspend a storage provider.
   *
   * @param body Suspend Storage Provider Body 
   * @param sp Storage Provider to suspend 
   * @return Future(Map[String, String])
   */
  def storageProvidersSuspendSpPostAsync(body: SuspendMinerBody, sp: String): Future[Map[String, String]] = {
      helper.storageProvidersSuspendSpPost(body, sp)
  }

  /**
   * Unuspend Storage Provider
   * This endpoint lets a user unsuspend a Storage Provider.
   *
   * @param sp Storage Provider to unsuspend 
   * @return void
   */
  def storageProvidersUnsuspendSpPut(sp: String) = {
    val await = Try(Await.result(storageProvidersUnsuspendSpPutAsync(sp), Duration.Inf))
    await match {
      case Success(i) => Some(await.get)
      case Failure(t) => None
    }
  }

  /**
   * Unuspend Storage Provider asynchronously
   * This endpoint lets a user unsuspend a Storage Provider.
   *
   * @param sp Storage Provider to unsuspend 
   * @return Future(void)
   */
  def storageProvidersUnsuspendSpPutAsync(sp: String) = {
      helper.storageProvidersUnsuspendSpPut(sp)
  }

}

class SpApiAsyncHelper(client: TransportClient, config: SwaggerConfig) extends ApiClient(client, config) {

  def storageProvidersClaimPost(body: ClaimMinerBody)(implicit reader: ClientResponseReader[github_com_application-research_estuary_api_v2.claimResponse], writer: RequestWriter[ClaimMinerBody]): Future[github_com_application-research_estuary_api_v2.claimResponse] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/claim"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling SpApi->storageProvidersClaimPost")

    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersClaimSpGet(sp: String)(implicit reader: ClientResponseReader[github_com_application-research_estuary_api_v2.claimMsgResponse]): Future[github_com_application-research_estuary_api_v2.claimMsgResponse] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/claim/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersClaimSpGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersDealsSpGet(sp: String,
    ignoreFailed: Option[String] = None
    )(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/deals/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersDealsSpGet")

    ignoreFailed match {
      case Some(param) => queryParams += "ignore-failed" -> param.toString
      case _ => queryParams
    }

    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersFailuresSpGet(sp: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/failures/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersFailuresSpGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersGet()(implicit reader: ClientResponseReader[List[api.storageProviderResp]]): Future[List[api.storageProviderResp]] = {
    // create path and map variables
    val path = (addFmt("/storage-providers"))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersSetInfoSpPut(body: MinerSetInfoParams,
    sp: String)(implicit reader: ClientResponseReader[Unit], writer: RequestWriter[MinerSetInfoParams]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/set-info/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling SpApi->storageProvidersSetInfoSpPut")
    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersSetInfoSpPut")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersStatsSpGet(sp: String)(implicit reader: ClientResponseReader[String]): Future[String] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/stats/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersStatsSpGet")


    val resFuture = client.submit("GET", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersSuspendSpPost(body: SuspendMinerBody,
    sp: String)(implicit reader: ClientResponseReader[Map[String, String]], writer: RequestWriter[SuspendMinerBody]): Future[Map[String, String]] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/suspend/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (body == null) throw new Exception("Missing required parameter 'body' when calling SpApi->storageProvidersSuspendSpPost")
    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersSuspendSpPost")


    val resFuture = client.submit("POST", path, queryParams.toMap, headerParams.toMap, writer.write(body))
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }

  def storageProvidersUnsuspendSpPut(sp: String)(implicit reader: ClientResponseReader[Unit]): Future[Unit] = {
    // create path and map variables
    val path = (addFmt("/storage-providers/unsuspend/{sp}")
      replaceAll("\\{" + "sp" + "\\}", sp.toString))

    // query params
    val queryParams = new mutable.HashMap[String, String]
    val headerParams = new mutable.HashMap[String, String]

    if (sp == null) throw new Exception("Missing required parameter 'sp' when calling SpApi->storageProvidersUnsuspendSpPut")


    val resFuture = client.submit("PUT", path, queryParams.toMap, headerParams.toMap, "")
    resFuture flatMap { resp =>
      process(reader.read(resp))
    }
  }


}
