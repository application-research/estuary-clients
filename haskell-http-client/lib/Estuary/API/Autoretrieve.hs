{-
   Estuary API

   This is the API for the Estuary application.

   OpenAPI spec version: 2.0
   Estuary API API version: 0.0.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Estuary.API.Autoretrieve
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Estuary.API.Autoretrieve where

import Estuary.Core
import Estuary.MimeTypes
import Estuary.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Autoretrieve

-- *** adminAutoretrieveInitPost

-- | @POST \/admin\/autoretrieve\/init@
-- 
-- Register autoretrieve server
-- 
-- This endpoint registers a new autoretrieve server
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
adminAutoretrieveInitPost 
  :: (Consumes AdminAutoretrieveInitPost contentType, MimeRender contentType Addresses2, MimeRender contentType PubKey2)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Addresses2 -- ^ "addresses" -  Autoretrieve's comma-separated list of addresses
  -> PubKey2 -- ^ "pubKey" -  Autoretrieve's public key
  -> EstuaryRequest AdminAutoretrieveInitPost contentType res MimeJSON
adminAutoretrieveInitPost _ addresses pubKey =
  _mkRequest "POST" ["/admin/autoretrieve/init"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` addresses
    `setBodyParam` pubKey

data AdminAutoretrieveInitPost 

-- | /Body Param/ "addresses" - Autoretrieve's comma-separated list of addresses
instance HasBodyParam AdminAutoretrieveInitPost Addresses2

-- | /Body Param/ "pubKey" - Autoretrieve's public key
instance HasBodyParam AdminAutoretrieveInitPost PubKey2 
-- | @application/json@
instance Produces AdminAutoretrieveInitPost MimeJSON


-- *** adminAutoretrieveListGet

-- | @GET \/admin\/autoretrieve\/list@
-- 
-- List autoretrieve servers
-- 
-- This endpoint lists all registered autoretrieve servers
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
adminAutoretrieveListGet 
  :: EstuaryRequest AdminAutoretrieveListGet MimeNoContent res MimeJSON
adminAutoretrieveListGet =
  _mkRequest "GET" ["/admin/autoretrieve/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data AdminAutoretrieveListGet  
-- | @application/json@
instance Produces AdminAutoretrieveListGet MimeJSON


-- *** autoretrieveHeartbeatPost

-- | @POST \/autoretrieve\/heartbeat@
-- 
-- Marks autoretrieve server as up
-- 
-- This endpoint updates the lastConnection field for autoretrieve
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
autoretrieveHeartbeatPost 
  :: Token -- ^ "token" -  Autoretrieve's auth token
  -> EstuaryRequest AutoretrieveHeartbeatPost MimeNoContent res MimeJSON
autoretrieveHeartbeatPost (Token token) =
  _mkRequest "POST" ["/autoretrieve/heartbeat"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setHeader` toHeader ("token", token)

data AutoretrieveHeartbeatPost  
-- | @application/json@
instance Produces AutoretrieveHeartbeatPost MimeJSON

