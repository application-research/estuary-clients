{-
   Estuary API

   This is the API for the Estuary application.

   OpenAPI spec version: 2.0
   Estuary API API version: 0.0.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Estuary.API.Collections
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Estuary.API.Collections where

import Estuary.Core
import Estuary.MimeTypes
import Estuary.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Collections

-- *** collectionsColuuidCommitPost

-- | @POST \/collections\/{coluuid}\/commit@
-- 
-- Produce a CID of the collection contents
-- 
-- This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsColuuidCommitPost 
  :: Coluuid -- ^ "coluuid" -  coluuid
  -> EstuaryRequest CollectionsColuuidCommitPost MimeNoContent Text MimeJSON
collectionsColuuidCommitPost (Coluuid coluuid) =
  _mkRequest "POST" ["/collections/",toPath coluuid,"/commit"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data CollectionsColuuidCommitPost  
-- | @application/json@
instance Produces CollectionsColuuidCommitPost MimeJSON


-- *** collectionsColuuidContentsDelete

-- | @DELETE \/collections\/{coluuid}\/contents@
-- 
-- Deletes a content from a collection
-- 
-- This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsColuuidContentsDelete 
  :: (Consumes CollectionsColuuidContentsDelete contentType, MimeRender contentType MainDeleteContentFromCollectionBody)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> Coluuid -- ^ "coluuid" -  Collection ID
  -> Contentid -- ^ "contentid" -  Content ID
  -> MainDeleteContentFromCollectionBody -- ^ "body" -  Variable to use when filtering for files (must be either 'path' or 'content_id')
  -> EstuaryRequest CollectionsColuuidContentsDelete contentType Text MimeJSON
collectionsColuuidContentsDelete _ (Coluuid coluuid) (Contentid contentid) body =
  _mkRequest "DELETE" ["/collections/",toPath coluuid,"/contents"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` body

data CollectionsColuuidContentsDelete 

-- | /Body Param/ "body" - Variable to use when filtering for files (must be either 'path' or 'content_id')
instance HasBodyParam CollectionsColuuidContentsDelete MainDeleteContentFromCollectionBody 
-- | @application/json@
instance Produces CollectionsColuuidContentsDelete MimeJSON


-- *** collectionsColuuidDelete

-- | @DELETE \/collections\/{coluuid}@
-- 
-- Deletes a collection
-- 
-- This endpoint is used to delete an existing collection.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsColuuidDelete 
  :: Accept accept -- ^ request accept ('MimeType')
  -> Coluuid -- ^ "coluuid" -  Collection ID
  -> EstuaryRequest CollectionsColuuidDelete MimeNoContent Text accept
collectionsColuuidDelete  _ (Coluuid coluuid) =
  _mkRequest "DELETE" ["/collections/",toPath coluuid]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data CollectionsColuuidDelete  

-- *** collectionsColuuidGet

-- | @GET \/collections\/{coluuid}@
-- 
-- Get contents in a collection
-- 
-- This endpoint is used to get contents in a collection. If no colpath query param is passed
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsColuuidGet 
  :: Coluuid -- ^ "coluuid" -  coluuid
  -> EstuaryRequest CollectionsColuuidGet MimeNoContent Text MimeJSON
collectionsColuuidGet (Coluuid coluuid) =
  _mkRequest "GET" ["/collections/",toPath coluuid]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data CollectionsColuuidGet  

-- | /Optional Param/ "dir" - Directory
instance HasOptionalParam CollectionsColuuidGet Dir where
  applyOptionalParam req (Dir xs) =
    req `setQuery` toQuery ("dir", Just xs)
-- | @application/json@
instance Produces CollectionsColuuidGet MimeJSON


-- *** collectionsColuuidPost

-- | @POST \/collections\/{coluuid}@
-- 
-- Add contents to a collection
-- 
-- This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsColuuidPost 
  :: (Consumes CollectionsColuuidPost MimeJSON, MimeRender MimeJSON ContentIds)
  => Coluuid -- ^ "coluuid" -  coluuid
  -> ContentIds -- ^ "contentIds" -  Content IDs to add to collection
  -> EstuaryRequest CollectionsColuuidPost MimeJSON Text MimeJSON
collectionsColuuidPost (Coluuid coluuid) contentIds =
  _mkRequest "POST" ["/collections/",toPath coluuid]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` contentIds

data CollectionsColuuidPost 

-- | /Body Param/ "contentIDs" - Content IDs to add to collection
instance HasBodyParam CollectionsColuuidPost ContentIds 

-- | @application/json@
instance Consumes CollectionsColuuidPost MimeJSON

-- | @application/json@
instance Produces CollectionsColuuidPost MimeJSON


-- *** collectionsFsAddPost

-- | @POST \/collections\/fs\/add@
-- 
-- Add a file to a collection
-- 
-- This endpoint adds a file to a collection
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsFsAddPost 
  :: Coluuid -- ^ "coluuid" -  Collection ID
  -> Content -- ^ "content" -  Content
  -> Path -- ^ "path" -  Path to file
  -> EstuaryRequest CollectionsFsAddPost MimeNoContent Text MimeJSON
collectionsFsAddPost (Coluuid coluuid) (Content content) (Path path) =
  _mkRequest "POST" ["/collections/fs/add"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setQuery` toQuery ("coluuid", Just coluuid)
    `setQuery` toQuery ("content", Just content)
    `setQuery` toQuery ("path", Just path)

data CollectionsFsAddPost  
-- | @application/json@
instance Produces CollectionsFsAddPost MimeJSON


-- *** collectionsGet

-- | @GET \/collections\/@
-- 
-- List all collections
-- 
-- This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsGet 
  :: EstuaryRequest CollectionsGet MimeNoContent [[CollectionsCollection]] MimeJSON
collectionsGet =
  _mkRequest "GET" ["/collections/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data CollectionsGet  
-- | @application/json@
instance Produces CollectionsGet MimeJSON


-- *** collectionsPost

-- | @POST \/collections\/@
-- 
-- Create a new collection
-- 
-- This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
collectionsPost 
  :: (Consumes CollectionsPost contentType, MimeRender contentType MainCreateCollectionBody)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> MainCreateCollectionBody -- ^ "body" -  Collection name and description
  -> EstuaryRequest CollectionsPost contentType CollectionsCollection MimeJSON
collectionsPost _ body =
  _mkRequest "POST" ["/collections/"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` body

data CollectionsPost 

-- | /Body Param/ "body" - Collection name and description
instance HasBodyParam CollectionsPost MainCreateCollectionBody 
-- | @application/json@
instance Produces CollectionsPost MimeJSON

