{-
   Estuary API

   This is the API for the Estuary application.

   OpenAPI spec version: 2.0
   Estuary API API version: 0.0.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Estuary.API.Public
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Estuary.API.Public where

import Estuary.Core
import Estuary.MimeTypes
import Estuary.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Public

-- *** publicByCidCidGet

-- | @GET \/public\/by-cid\/{cid}@
-- 
-- Get Content by Cid
-- 
-- This endpoint returns the content associated with a CID
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicByCidCidGet 
  :: Cid -- ^ "cid" -  Cid
  -> EstuaryRequest PublicByCidCidGet MimeNoContent res MimeJSON
publicByCidCidGet (Cid cid) =
  _mkRequest "GET" ["/public/by-cid/",toPath cid]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicByCidCidGet  
-- | @application/json@
instance Produces PublicByCidCidGet MimeJSON


-- *** publicInfoGet

-- | @GET \/public\/info@
-- 
-- Get public node info
-- 
-- This endpoint returns information about the node
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicInfoGet 
  :: EstuaryRequest PublicInfoGet MimeNoContent res MimeJSON
publicInfoGet =
  _mkRequest "GET" ["/public/info"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicInfoGet  
-- | @application/json@
instance Produces PublicInfoGet MimeJSON


-- *** publicMetricsDealsOnChainGet

-- | @GET \/public\/metrics\/deals-on-chain@
-- 
-- Get deal metrics
-- 
-- This endpoint is used to get deal metrics
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicMetricsDealsOnChainGet 
  :: EstuaryRequest PublicMetricsDealsOnChainGet MimeNoContent res MimeJSON
publicMetricsDealsOnChainGet =
  _mkRequest "GET" ["/public/metrics/deals-on-chain"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicMetricsDealsOnChainGet  
-- | @application/json@
instance Produces PublicMetricsDealsOnChainGet MimeJSON


-- *** publicMinersDealsMinerGet

-- | @GET \/public\/miners\/deals\/{miner}@
-- 
-- Get all miners deals
-- 
-- This endpoint returns all miners deals
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicMinersDealsMinerGet 
  :: Miner -- ^ "miner" -  Filter by miner
  -> EstuaryRequest PublicMinersDealsMinerGet MimeNoContent res MimeJSON
publicMinersDealsMinerGet (Miner miner) =
  _mkRequest "GET" ["/public/miners/deals/",toPath miner]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicMinersDealsMinerGet  
-- | @application/json@
instance Produces PublicMinersDealsMinerGet MimeJSON


-- *** publicMinersFailuresMinerGet

-- | @GET \/public\/miners\/failures\/{miner}@
-- 
-- Get all miners
-- 
-- This endpoint returns all miners
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicMinersFailuresMinerGet 
  :: Miner -- ^ "miner" -  Filter by miner
  -> EstuaryRequest PublicMinersFailuresMinerGet MimeNoContent res MimeJSON
publicMinersFailuresMinerGet (Miner miner) =
  _mkRequest "GET" ["/public/miners/failures/",toPath miner]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicMinersFailuresMinerGet  
-- | @application/json@
instance Produces PublicMinersFailuresMinerGet MimeJSON


-- *** publicMinersGet

-- | @GET \/public\/miners@
-- 
-- Get all miners
-- 
-- This endpoint returns all miners
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicMinersGet 
  :: EstuaryRequest PublicMinersGet MimeNoContent res MimeJSON
publicMinersGet =
  _mkRequest "GET" ["/public/miners"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicMinersGet  
-- | @application/json@
instance Produces PublicMinersGet MimeJSON


-- *** publicMinersStatsMinerGet

-- | @GET \/public\/miners\/stats\/{miner}@
-- 
-- Get miner stats
-- 
-- This endpoint returns miner stats
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicMinersStatsMinerGet 
  :: Miner -- ^ "miner" -  Filter by miner
  -> EstuaryRequest PublicMinersStatsMinerGet MimeNoContent res MimeJSON
publicMinersStatsMinerGet (Miner miner) =
  _mkRequest "GET" ["/public/miners/stats/",toPath miner]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicMinersStatsMinerGet  
-- | @application/json@
instance Produces PublicMinersStatsMinerGet MimeJSON


-- *** publicNetAddrsGet

-- | @GET \/public\/net\/addrs@
-- 
-- Net Addrs
-- 
-- This endpoint is used to get net addrs
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
publicNetAddrsGet 
  :: EstuaryRequest PublicNetAddrsGet MimeNoContent [Text] MimeJSON
publicNetAddrsGet =
  _mkRequest "GET" ["/public/net/addrs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicNetAddrsGet  
-- | @application/json@
instance Produces PublicNetAddrsGet MimeJSON


-- *** publicNetPeersGet

-- | @GET \/public\/net\/peers@
-- 
-- Net Peers
-- 
-- This endpoint is used to get net peers
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
publicNetPeersGet 
  :: EstuaryRequest PublicNetPeersGet MimeNoContent [Text] MimeJSON
publicNetPeersGet =
  _mkRequest "GET" ["/public/net/peers"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicNetPeersGet  
-- | @application/json@
instance Produces PublicNetPeersGet MimeJSON


-- *** publicStatsGet

-- | @GET \/public\/stats@
-- 
-- Public stats
-- 
-- This endpoint is used to get public stats.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
publicStatsGet 
  :: EstuaryRequest PublicStatsGet MimeNoContent res MimeJSON
publicStatsGet =
  _mkRequest "GET" ["/public/stats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data PublicStatsGet  
-- | @application/json@
instance Produces PublicStatsGet MimeJSON

