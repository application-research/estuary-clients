{-
   Estuary API

   This is the API for the Estuary application.

   OpenAPI spec version: 2.0
   Estuary API API version: 0.0.0
   Generated by Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
-}

{-|
Module : Estuary.API.Content
-}

{-# LANGUAGE FlexibleContexts #-}
{-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE MonoLocalBinds #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE OverloadedStrings #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing -fno-warn-unused-binds -fno-warn-unused-imports #-}

module Estuary.API.Content where

import Estuary.Core
import Estuary.MimeTypes
import Estuary.Model as M

import qualified Data.Aeson as A
import qualified Data.ByteString as B
import qualified Data.ByteString.Lazy as BL
import qualified Data.Data as P (Typeable, TypeRep, typeOf, typeRep)
import qualified Data.Foldable as P
import qualified Data.Map as Map
import qualified Data.Maybe as P
import qualified Data.Proxy as P (Proxy(..))
import qualified Data.Set as Set
import qualified Data.String as P
import qualified Data.Text as T
import qualified Data.Text.Encoding as T
import qualified Data.Text.Lazy as TL
import qualified Data.Text.Lazy.Encoding as TL
import qualified Data.Time as TI
import qualified Network.HTTP.Client.MultipartFormData as NH
import qualified Network.HTTP.Media as ME
import qualified Network.HTTP.Types as NH
import qualified Web.FormUrlEncoded as WH
import qualified Web.HttpApiData as WH

import Data.Text (Text)
import GHC.Base ((<|>))

import Prelude ((==),(/=),($), (.),(<$>),(<*>),(>>=),Maybe(..),Bool(..),Char,Double,FilePath,Float,Int,Integer,String,fmap,undefined,mempty,maybe,pure,Monad,Applicative,Functor)
import qualified Prelude as P

-- * Operations


-- ** Content

-- *** contentAddCarPost

-- | @POST \/content\/add-car@
-- 
-- Add Car object
-- 
-- This endpoint is used to add a car object to the network. The object can be a file or a directory.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentAddCarPost 
  :: (Consumes ContentAddCarPost contentType, MimeRender contentType BodyText)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> BodyText -- ^ "body" -  Car
  -> EstuaryRequest ContentAddCarPost contentType res MimeJSON
contentAddCarPost _ body =
  _mkRequest "POST" ["/content/add-car"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` body

data ContentAddCarPost 

-- | /Body Param/ "body" - Car
instance HasBodyParam ContentAddCarPost BodyText 

-- | /Optional Param/ "filename" - Filename
instance HasOptionalParam ContentAddCarPost Filename where
  applyOptionalParam req (Filename xs) =
    req `setQuery` toQuery ("filename", Just xs)

-- | /Optional Param/ "commp" - Commp
instance HasOptionalParam ContentAddCarPost Commp where
  applyOptionalParam req (Commp xs) =
    req `setQuery` toQuery ("commp", Just xs)

-- | /Optional Param/ "size" - Size
instance HasOptionalParam ContentAddCarPost Size where
  applyOptionalParam req (Size xs) =
    req `setQuery` toQuery ("size", Just xs)
-- | @application/json@
instance Produces ContentAddCarPost MimeJSON


-- *** contentAddIpfsPost

-- | @POST \/content\/add-ipfs@
-- 
-- Add IPFS object
-- 
-- This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentAddIpfsPost 
  :: (Consumes ContentAddIpfsPost contentType, MimeRender contentType UtilContentAddIpfsBody)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> UtilContentAddIpfsBody -- ^ "body" -  IPFS Body
  -> EstuaryRequest ContentAddIpfsPost contentType res MimeJSON
contentAddIpfsPost _ body =
  _mkRequest "POST" ["/content/add-ipfs"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` body

data ContentAddIpfsPost 

-- | /Body Param/ "body" - IPFS Body
instance HasBodyParam ContentAddIpfsPost UtilContentAddIpfsBody 
-- | @application/json@
instance Produces ContentAddIpfsPost MimeJSON


-- *** contentAddPost

-- | @POST \/content\/add@
-- 
-- Add new content
-- 
-- This endpoint is used to upload new content.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
contentAddPost 
  :: (Consumes ContentAddPost MimeMultipartFormData)
  => File -- ^ "file" -  File to upload
  -> Coluuid -- ^ "coluuid" -  Collection UUID
  -> Dir -- ^ "dir" -  Directory
  -> EstuaryRequest ContentAddPost MimeMultipartFormData UtilContentAddResponse MimeJSON
contentAddPost (File file) (Coluuid coluuid) (Dir dir) =
  _mkRequest "POST" ["/content/add"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `_addMultiFormPart` NH.partFileSource "file" file

data ContentAddPost  

-- | @multipart/form-data@
instance Consumes ContentAddPost MimeMultipartFormData

-- | @application/json@
instance Produces ContentAddPost MimeJSON


-- *** contentAggregatedContentGet

-- | @GET \/content\/aggregated\/{content}@
-- 
-- Get aggregated content stats
-- 
-- This endpoint returns aggregated content stats
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
contentAggregatedContentGet 
  :: Content -- ^ "content" -  Content ID
  -> EstuaryRequest ContentAggregatedContentGet MimeNoContent Text MimeJSON
contentAggregatedContentGet (Content content) =
  _mkRequest "GET" ["/content/aggregated/",toPath content]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentAggregatedContentGet  
-- | @application/json@
instance Produces ContentAggregatedContentGet MimeJSON


-- *** contentAllDealsGet

-- | @GET \/content\/all-deals@
-- 
-- Get all deals for a user
-- 
-- This endpoint is used to get all deals for a user
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentAllDealsGet 
  :: Begin -- ^ "begin" -  Begin
  -> Duration -- ^ "duration" -  Duration
  -> All -- ^ "all" -  All
  -> EstuaryRequest ContentAllDealsGet MimeNoContent res MimeJSON
contentAllDealsGet (Begin begin) (Duration duration) (All all) =
  _mkRequest "GET" ["/content/all-deals"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setQuery` toQuery ("begin", Just begin)
    `setQuery` toQuery ("duration", Just duration)
    `setQuery` toQuery ("all", Just all)

data ContentAllDealsGet  
-- | @application/json@
instance Produces ContentAllDealsGet MimeJSON


-- *** contentBwUsageContentGet

-- | @GET \/content\/bw-usage\/{content}@
-- 
-- Get content bandwidth
-- 
-- This endpoint returns content bandwidth
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentBwUsageContentGet 
  :: Content -- ^ "content" -  Content ID
  -> EstuaryRequest ContentBwUsageContentGet MimeNoContent res MimeJSON
contentBwUsageContentGet (Content content) =
  _mkRequest "GET" ["/content/bw-usage/",toPath content]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentBwUsageContentGet  
-- | @application/json@
instance Produces ContentBwUsageContentGet MimeJSON


-- *** contentCreatePost

-- | @POST \/content\/create@
-- 
-- Add a new content
-- 
-- This endpoint adds a new content
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentCreatePost 
  :: (Consumes ContentCreatePost contentType, MimeRender contentType BodyText)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> BodyText -- ^ "body" -  Content
  -> EstuaryRequest ContentCreatePost contentType res MimeJSON
contentCreatePost _ body =
  _mkRequest "POST" ["/content/create"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` body

data ContentCreatePost 

-- | /Body Param/ "body" - Content
instance HasBodyParam ContentCreatePost BodyText 
-- | @application/json@
instance Produces ContentCreatePost MimeJSON


-- *** contentDealsGet

-- | @GET \/content\/deals@
-- 
-- Content with deals
-- 
-- This endpoint lists all content with deals
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentDealsGet 
  :: EstuaryRequest ContentDealsGet MimeNoContent res MimeJSON
contentDealsGet =
  _mkRequest "GET" ["/content/deals"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentDealsGet  

-- | /Optional Param/ "limit" - Limit
instance HasOptionalParam ContentDealsGet Limit where
  applyOptionalParam req (Limit xs) =
    req `setQuery` toQuery ("limit", Just xs)

-- | /Optional Param/ "offset" - Offset
instance HasOptionalParam ContentDealsGet Offset where
  applyOptionalParam req (Offset xs) =
    req `setQuery` toQuery ("offset", Just xs)
-- | @application/json@
instance Produces ContentDealsGet MimeJSON


-- *** contentEnsureReplicationDatacidGet

-- | @GET \/content\/ensure-replication\/{datacid}@
-- 
-- Ensure Replication
-- 
-- This endpoint ensures that the content is replicated to the specified number of providers
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentEnsureReplicationDatacidGet 
  :: Datacid -- ^ "datacid" -  Data CID
  -> EstuaryRequest ContentEnsureReplicationDatacidGet MimeNoContent res MimeJSON
contentEnsureReplicationDatacidGet (Datacid datacid) =
  _mkRequest "GET" ["/content/ensure-replication/",toPath datacid]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentEnsureReplicationDatacidGet  
-- | @application/json@
instance Produces ContentEnsureReplicationDatacidGet MimeJSON


-- *** contentFailuresContentGet

-- | @GET \/content\/failures\/{content}@
-- 
-- List all failures for a content
-- 
-- This endpoint returns all failures for a content
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
contentFailuresContentGet 
  :: Content -- ^ "content" -  Content ID
  -> EstuaryRequest ContentFailuresContentGet MimeNoContent Text MimeJSON
contentFailuresContentGet (Content content) =
  _mkRequest "GET" ["/content/failures/",toPath content]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentFailuresContentGet  
-- | @application/json@
instance Produces ContentFailuresContentGet MimeJSON


-- *** contentImportdealPost

-- | @POST \/content\/importdeal@
-- 
-- Import a deal
-- 
-- This endpoint imports a deal into the shuttle.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentImportdealPost 
  :: (Consumes ContentImportdealPost contentType, MimeRender contentType MainImportDealBody)
  => ContentType contentType -- ^ request content-type ('MimeType')
  -> MainImportDealBody -- ^ "body" -  Import a deal
  -> EstuaryRequest ContentImportdealPost contentType res MimeJSON
contentImportdealPost _ body =
  _mkRequest "POST" ["/content/importdeal"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)
    `setBodyParam` body

data ContentImportdealPost 

-- | /Body Param/ "body" - Import a deal
instance HasBodyParam ContentImportdealPost MainImportDealBody 
-- | @application/json@
instance Produces ContentImportdealPost MimeJSON


-- *** contentListGet

-- | @GET \/content\/list@
-- 
-- List all pinned content
-- 
-- This endpoint lists all content
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
contentListGet 
  :: EstuaryRequest ContentListGet MimeNoContent [Text] MimeJSON
contentListGet =
  _mkRequest "GET" ["/content/list"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentListGet  
-- | @application/json@
instance Produces ContentListGet MimeJSON


-- *** contentReadContGet

-- | @GET \/content\/read\/{cont}@
-- 
-- Read content
-- 
-- This endpoint reads content from the blockstore
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentReadContGet 
  :: Cont -- ^ "cont" -  CID
  -> EstuaryRequest ContentReadContGet MimeNoContent res MimeJSON
contentReadContGet (Cont cont) =
  _mkRequest "GET" ["/content/read/",toPath cont]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentReadContGet  
-- | @application/json@
instance Produces ContentReadContGet MimeJSON


-- *** contentStagingZonesGet

-- | @GET \/content\/staging-zones@
-- 
-- Get staging zone for user
-- 
-- This endpoint is used to get staging zone for user.
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentStagingZonesGet 
  :: EstuaryRequest ContentStagingZonesGet MimeNoContent res MimeJSON
contentStagingZonesGet =
  _mkRequest "GET" ["/content/staging-zones"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentStagingZonesGet  
-- | @application/json@
instance Produces ContentStagingZonesGet MimeJSON


-- *** contentStatsGet

-- | @GET \/content\/stats@
-- 
-- Get content statistics
-- 
-- This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentStatsGet 
  :: LimitText -- ^ "limit" -  limit
  -> EstuaryRequest ContentStatsGet MimeNoContent res MimeJSON
contentStatsGet (LimitText limit) =
  _mkRequest "GET" ["/content/stats"]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentStatsGet  
-- | @application/json@
instance Produces ContentStatsGet MimeJSON


-- *** contentStatusIdGet

-- | @GET \/content\/status\/{id}@
-- 
-- Content Status
-- 
-- This endpoint returns the status of a content
-- 
-- AuthMethod: 'AuthApiKeyBearerAuth'
-- 
-- Note: Has 'Produces' instances, but no response schema
-- 
contentStatusIdGet 
  :: Id -- ^ "id" -  Content ID
  -> EstuaryRequest ContentStatusIdGet MimeNoContent res MimeJSON
contentStatusIdGet (Id id) =
  _mkRequest "GET" ["/content/status/",toPath id]
    `_hasAuthType` (P.Proxy :: P.Proxy AuthApiKeyBearerAuth)

data ContentStatusIdGet  
-- | @application/json@
instance Produces ContentStatusIdGet MimeJSON

