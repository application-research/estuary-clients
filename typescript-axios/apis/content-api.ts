/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { MainImportDealBody } from '../models';
import { TypesIpfsPin } from '../models';
import { UtilContentCreateBody } from '../models';
import { UtilHttpError } from '../models';
/**
 * ContentApi - axios parameter creator
 * @export
 */
export const ContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to create an estuary invite.
         * @summary Create an Estuary invite
         * @param {string} code Invite code to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminInvitesCodePost: async (code: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'code' is not null or undefined
            if (code === null || code === undefined) {
                throw new RequiredError('code','Required parameter code was null or undefined when calling adminInvitesCodePost.');
            }
            const localVarPath = `/admin/invites/{code}`
                .replace(`{${"code"}}`, encodeURIComponent(String(code)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to list all estuary invites.
         * @summary Get Estuary invites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminInvitesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint uploads content via a car file
         * @summary Upload content via a car file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentAddCarPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/add-car`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
         * @summary Add IPFS object
         * @param {TypesIpfsPin} body IPFS Body
         * @param {string} [ignoreDupes] Ignore Dupes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentAddIpfsPost: async (body: TypesIpfsPin, ignoreDupes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling contentAddIpfsPost.');
            }
            const localVarPath = `/content/add-ipfs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ignoreDupes !== undefined) {
                localVarQueryParameter['ignore-dupes'] = ignoreDupes;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint uploads a file.
         * @summary Upload a file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentAddPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns aggregated content stats
         * @summary Get aggregated content stats
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentAggregatedContentGet: async (content: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            if (content === null || content === undefined) {
                throw new RequiredError('content','Required parameter content was null or undefined when calling contentAggregatedContentGet.');
            }
            const localVarPath = `/content/aggregated/{content}`
                .replace(`{${"content"}}`, encodeURIComponent(String(content)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get all deals for a user
         * @summary Get all deals for a user
         * @param {string} begin Begin
         * @param {string} duration Duration
         * @param {string} all All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentAllDealsGet: async (begin: string, duration: string, all: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'begin' is not null or undefined
            if (begin === null || begin === undefined) {
                throw new RequiredError('begin','Required parameter begin was null or undefined when calling contentAllDealsGet.');
            }
            // verify required parameter 'duration' is not null or undefined
            if (duration === null || duration === undefined) {
                throw new RequiredError('duration','Required parameter duration was null or undefined when calling contentAllDealsGet.');
            }
            // verify required parameter 'all' is not null or undefined
            if (all === null || all === undefined) {
                throw new RequiredError('all','Required parameter all was null or undefined when calling contentAllDealsGet.');
            }
            const localVarPath = `/content/all-deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (begin !== undefined) {
                localVarQueryParameter['begin'] = begin;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (all !== undefined) {
                localVarQueryParameter['all'] = all;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns content bandwidth
         * @summary Get content bandwidth
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentBwUsageContentGet: async (content: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            if (content === null || content === undefined) {
                throw new RequiredError('content','Required parameter content was null or undefined when calling contentBwUsageContentGet.');
            }
            const localVarPath = `/content/bw-usage/{content}`
                .replace(`{${"content"}}`, encodeURIComponent(String(content)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint adds a new content
         * @summary Add a new content
         * @param {UtilContentCreateBody} body Content
         * @param {string} [ignoreDupes] Ignore Dupes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentCreatePost: async (body: UtilContentCreateBody, ignoreDupes?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling contentCreatePost.');
            }
            const localVarPath = `/content/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ignoreDupes !== undefined) {
                localVarQueryParameter['ignore-dupes'] = ignoreDupes;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all content with deals
         * @summary Content with deals
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentDealsGet: async (limit?: number, offset?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/deals`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint ensures that the content is replicated to the specified number of providers
         * @summary Ensure Replication
         * @param {string} datacid Data CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentEnsureReplicationDatacidGet: async (datacid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'datacid' is not null or undefined
            if (datacid === null || datacid === undefined) {
                throw new RequiredError('datacid','Required parameter datacid was null or undefined when calling contentEnsureReplicationDatacidGet.');
            }
            const localVarPath = `/content/ensure-replication/{datacid}`
                .replace(`{${"datacid"}}`, encodeURIComponent(String(datacid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all failures for a content
         * @summary List all failures for a content
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentFailuresContentGet: async (content: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'content' is not null or undefined
            if (content === null || content === undefined) {
                throw new RequiredError('content','Required parameter content was null or undefined when calling contentFailuresContentGet.');
            }
            const localVarPath = `/content/failures/{content}`
                .replace(`{${"content"}}`, encodeURIComponent(String(content)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a content by its ID
         * @summary Content
         * @param {number} id Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentIdGet.');
            }
            const localVarPath = `/content/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint imports a deal into the shuttle.
         * @summary Import a deal
         * @param {MainImportDealBody} body Import a deal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentImportdealPost: async (body: MainImportDealBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling contentImportdealPost.');
            }
            const localVarPath = `/content/importdeal`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all content
         * @summary List all pinned content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint reads content from the blockstore
         * @summary Read content
         * @param {string} cont CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentReadContGet: async (cont: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cont' is not null or undefined
            if (cont === null || cont === undefined) {
                throw new RequiredError('cont','Required parameter cont was null or undefined when calling contentReadContGet.');
            }
            const localVarPath = `/content/read/{cont}`
                .replace(`{${"cont"}}`, encodeURIComponent(String(cont)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get staging zone for user.
         * @summary Get staging zone for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentStagingZonesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/content/staging-zones`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a content
         * @summary Get content statistics
         * @param {string} limit limit
         * @param {string} offset offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentStatsGet: async (limit: string, offset: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'limit' is not null or undefined
            if (limit === null || limit === undefined) {
                throw new RequiredError('limit','Required parameter limit was null or undefined when calling contentStatsGet.');
            }
            // verify required parameter 'offset' is not null or undefined
            if (offset === null || offset === undefined) {
                throw new RequiredError('offset','Required parameter offset was null or undefined when calling contentStatsGet.');
            }
            const localVarPath = `/content/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the status of a content
         * @summary Content Status
         * @param {number} id Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contentStatusIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling contentStatusIdGet.');
            }
            const localVarPath = `/content/status/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContentApi - functional programming interface
 * @export
 */
export const ContentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to create an estuary invite.
         * @summary Create an Estuary invite
         * @param {string} code Invite code to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminInvitesCodePost(code: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).adminInvitesCodePost(code, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to list all estuary invites.
         * @summary Get Estuary invites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminInvitesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).adminInvitesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint uploads content via a car file
         * @summary Upload content via a car file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAddCarPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentAddCarPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
         * @summary Add IPFS object
         * @param {TypesIpfsPin} body IPFS Body
         * @param {string} [ignoreDupes] Ignore Dupes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAddIpfsPost(body: TypesIpfsPin, ignoreDupes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentAddIpfsPost(body, ignoreDupes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint uploads a file.
         * @summary Upload a file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAddPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentAddPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns aggregated content stats
         * @summary Get aggregated content stats
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAggregatedContentGet(content: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentAggregatedContentGet(content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get all deals for a user
         * @summary Get all deals for a user
         * @param {string} begin Begin
         * @param {string} duration Duration
         * @param {string} all All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAllDealsGet(begin: string, duration: string, all: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentAllDealsGet(begin, duration, all, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns content bandwidth
         * @summary Get content bandwidth
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentBwUsageContentGet(content: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentBwUsageContentGet(content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint adds a new content
         * @summary Add a new content
         * @param {UtilContentCreateBody} body Content
         * @param {string} [ignoreDupes] Ignore Dupes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentCreatePost(body: UtilContentCreateBody, ignoreDupes?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentCreatePost(body, ignoreDupes, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lists all content with deals
         * @summary Content with deals
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDealsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentDealsGet(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint ensures that the content is replicated to the specified number of providers
         * @summary Ensure Replication
         * @param {string} datacid Data CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentEnsureReplicationDatacidGet(datacid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentEnsureReplicationDatacidGet(datacid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns all failures for a content
         * @summary List all failures for a content
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFailuresContentGet(content: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentFailuresContentGet(content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns a content by its ID
         * @summary Content
         * @param {number} id Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint imports a deal into the shuttle.
         * @summary Import a deal
         * @param {MainImportDealBody} body Import a deal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentImportdealPost(body: MainImportDealBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentImportdealPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lists all content
         * @summary List all pinned content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint reads content from the blockstore
         * @summary Read content
         * @param {string} cont CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentReadContGet(cont: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentReadContGet(cont, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get staging zone for user.
         * @summary Get staging zone for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentStagingZonesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentStagingZonesGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a content
         * @summary Get content statistics
         * @param {string} limit limit
         * @param {string} offset offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentStatsGet(limit: string, offset: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentStatsGet(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the status of a content
         * @summary Content Status
         * @param {number} id Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentStatusIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await ContentApiAxiosParamCreator(configuration).contentStatusIdGet(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ContentApi - factory interface
 * @export
 */
export const ContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint is used to create an estuary invite.
         * @summary Create an Estuary invite
         * @param {string} code Invite code to be created
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminInvitesCodePost(code: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).adminInvitesCodePost(code, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to list all estuary invites.
         * @summary Get Estuary invites
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminInvitesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).adminInvitesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint uploads content via a car file
         * @summary Upload content via a car file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAddCarPost(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentAddCarPost(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
         * @summary Add IPFS object
         * @param {TypesIpfsPin} body IPFS Body
         * @param {string} [ignoreDupes] Ignore Dupes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAddIpfsPost(body: TypesIpfsPin, ignoreDupes?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentAddIpfsPost(body, ignoreDupes, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint uploads a file.
         * @summary Upload a file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAddPost(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentAddPost(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns aggregated content stats
         * @summary Get aggregated content stats
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAggregatedContentGet(content: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentAggregatedContentGet(content, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get all deals for a user
         * @summary Get all deals for a user
         * @param {string} begin Begin
         * @param {string} duration Duration
         * @param {string} all All
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentAllDealsGet(begin: string, duration: string, all: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentAllDealsGet(begin, duration, all, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns content bandwidth
         * @summary Get content bandwidth
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentBwUsageContentGet(content: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentBwUsageContentGet(content, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint adds a new content
         * @summary Add a new content
         * @param {UtilContentCreateBody} body Content
         * @param {string} [ignoreDupes] Ignore Dupes
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentCreatePost(body: UtilContentCreateBody, ignoreDupes?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentCreatePost(body, ignoreDupes, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all content with deals
         * @summary Content with deals
         * @param {number} [limit] Limit
         * @param {number} [offset] Offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentDealsGet(limit?: number, offset?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentDealsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint ensures that the content is replicated to the specified number of providers
         * @summary Ensure Replication
         * @param {string} datacid Data CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentEnsureReplicationDatacidGet(datacid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentEnsureReplicationDatacidGet(datacid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all failures for a content
         * @summary List all failures for a content
         * @param {string} content Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentFailuresContentGet(content: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentFailuresContentGet(content, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a content by its ID
         * @summary Content
         * @param {number} id Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint imports a deal into the shuttle.
         * @summary Import a deal
         * @param {MainImportDealBody} body Import a deal
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentImportdealPost(body: MainImportDealBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentImportdealPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all content
         * @summary List all pinned content
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint reads content from the blockstore
         * @summary Read content
         * @param {string} cont CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentReadContGet(cont: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentReadContGet(cont, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get staging zone for user.
         * @summary Get staging zone for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentStagingZonesGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentStagingZonesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a content
         * @summary Get content statistics
         * @param {string} limit limit
         * @param {string} offset offset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentStatsGet(limit: string, offset: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentStatsGet(limit, offset, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the status of a content
         * @summary Content Status
         * @param {number} id Content ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contentStatusIdGet(id: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return ContentApiFp(configuration).contentStatusIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ContentApi - object-oriented interface
 * @export
 * @class ContentApi
 * @extends {BaseAPI}
 */
export class ContentApi extends BaseAPI {
    /**
     * This endpoint is used to create an estuary invite.
     * @summary Create an Estuary invite
     * @param {string} code Invite code to be created
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async adminInvitesCodePost(code: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).adminInvitesCodePost(code, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to list all estuary invites.
     * @summary Get Estuary invites
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async adminInvitesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).adminInvitesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint uploads content via a car file
     * @summary Upload content via a car file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentAddCarPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentAddCarPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     * @summary Add IPFS object
     * @param {TypesIpfsPin} body IPFS Body
     * @param {string} [ignoreDupes] Ignore Dupes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentAddIpfsPost(body: TypesIpfsPin, ignoreDupes?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentAddIpfsPost(body, ignoreDupes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint uploads a file.
     * @summary Upload a file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentAddPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentAddPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns aggregated content stats
     * @summary Get aggregated content stats
     * @param {string} content Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentAggregatedContentGet(content: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentAggregatedContentGet(content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get all deals for a user
     * @summary Get all deals for a user
     * @param {string} begin Begin
     * @param {string} duration Duration
     * @param {string} all All
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentAllDealsGet(begin: string, duration: string, all: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentAllDealsGet(begin, duration, all, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns content bandwidth
     * @summary Get content bandwidth
     * @param {string} content Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentBwUsageContentGet(content: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentBwUsageContentGet(content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint adds a new content
     * @summary Add a new content
     * @param {UtilContentCreateBody} body Content
     * @param {string} [ignoreDupes] Ignore Dupes
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentCreatePost(body: UtilContentCreateBody, ignoreDupes?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentCreatePost(body, ignoreDupes, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lists all content with deals
     * @summary Content with deals
     * @param {number} [limit] Limit
     * @param {number} [offset] Offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentDealsGet(limit?: number, offset?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentDealsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint ensures that the content is replicated to the specified number of providers
     * @summary Ensure Replication
     * @param {string} datacid Data CID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentEnsureReplicationDatacidGet(datacid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentEnsureReplicationDatacidGet(datacid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all failures for a content
     * @summary List all failures for a content
     * @param {string} content Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentFailuresContentGet(content: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentFailuresContentGet(content, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a content by its ID
     * @summary Content
     * @param {number} id Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint imports a deal into the shuttle.
     * @summary Import a deal
     * @param {MainImportDealBody} body Import a deal
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentImportdealPost(body: MainImportDealBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentImportdealPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lists all content
     * @summary List all pinned content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint reads content from the blockstore
     * @summary Read content
     * @param {string} cont CID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentReadContGet(cont: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentReadContGet(cont, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get staging zone for user.
     * @summary Get staging zone for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentStagingZonesGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentStagingZonesGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a content
     * @summary Get content statistics
     * @param {string} limit limit
     * @param {string} offset offset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentStatsGet(limit: string, offset: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentStatsGet(limit, offset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the status of a content
     * @summary Content Status
     * @param {number} id Content ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContentApi
     */
    public async contentStatusIdGet(id: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return ContentApiFp(this.configuration).contentStatusIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}
