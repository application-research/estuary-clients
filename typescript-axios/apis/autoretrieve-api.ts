/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { UtilHttpError } from '../models';
/**
 * AutoretrieveApi - axios parameter creator
 * @export
 */
export const AutoretrieveApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint registers a new autoretrieve server
         * @summary Register autoretrieve server
         * @param {string} addresses 
         * @param {string} pubKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAutoretrieveInitPostForm: async (addresses: string, pubKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addresses' is not null or undefined
            if (addresses === null || addresses === undefined) {
                throw new RequiredError('addresses','Required parameter addresses was null or undefined when calling adminAutoretrieveInitPostForm.');
            }
            // verify required parameter 'pubKey' is not null or undefined
            if (pubKey === null || pubKey === undefined) {
                throw new RequiredError('pubKey','Required parameter pubKey was null or undefined when calling adminAutoretrieveInitPostForm.');
            }
            const localVarPath = `/admin/autoretrieve/init`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


            if (addresses !== undefined) { 
                localVarFormParams.append('addresses', addresses as any);
            }

            if (pubKey !== undefined) { 
                localVarFormParams.append('pubKey', pubKey as any);
            }

            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lists all registered autoretrieve servers
         * @summary List autoretrieve servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminAutoretrieveListGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/autoretrieve/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint updates the lastConnection field for autoretrieve
         * @summary Marks autoretrieve server as up
         * @param {string} token Autoretrieve&#x27;s auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        autoretrieveHeartbeatPost: async (token: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'token' is not null or undefined
            if (token === null || token === undefined) {
                throw new RequiredError('token','Required parameter token was null or undefined when calling autoretrieveHeartbeatPost.');
            }
            const localVarPath = `/autoretrieve/heartbeat`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (token !== undefined && token !== null) {
                localVarHeaderParameter['token'] = String(token);
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoretrieveApi - functional programming interface
 * @export
 */
export const AutoretrieveApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint registers a new autoretrieve server
         * @summary Register autoretrieve server
         * @param {string} addresses 
         * @param {string} pubKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAutoretrieveInitPostForm(addresses: string, pubKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await AutoretrieveApiAxiosParamCreator(configuration).adminAutoretrieveInitPostForm(addresses, pubKey, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lists all registered autoretrieve servers
         * @summary List autoretrieve servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAutoretrieveListGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await AutoretrieveApiAxiosParamCreator(configuration).adminAutoretrieveListGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint updates the lastConnection field for autoretrieve
         * @summary Marks autoretrieve server as up
         * @param {string} token Autoretrieve&#x27;s auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autoretrieveHeartbeatPost(token: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await AutoretrieveApiAxiosParamCreator(configuration).autoretrieveHeartbeatPost(token, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AutoretrieveApi - factory interface
 * @export
 */
export const AutoretrieveApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint registers a new autoretrieve server
         * @summary Register autoretrieve server
         * @param {string} addresses 
         * @param {string} pubKey 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAutoretrieveInitPostForm(addresses: string, pubKey: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return AutoretrieveApiFp(configuration).adminAutoretrieveInitPostForm(addresses, pubKey, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lists all registered autoretrieve servers
         * @summary List autoretrieve servers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminAutoretrieveListGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return AutoretrieveApiFp(configuration).adminAutoretrieveListGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint updates the lastConnection field for autoretrieve
         * @summary Marks autoretrieve server as up
         * @param {string} token Autoretrieve&#x27;s auth token
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async autoretrieveHeartbeatPost(token: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return AutoretrieveApiFp(configuration).autoretrieveHeartbeatPost(token, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AutoretrieveApi - object-oriented interface
 * @export
 * @class AutoretrieveApi
 * @extends {BaseAPI}
 */
export class AutoretrieveApi extends BaseAPI {
    /**
     * This endpoint registers a new autoretrieve server
     * @summary Register autoretrieve server
     * @param {string} addresses 
     * @param {string} pubKey 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoretrieveApi
     */
    public async adminAutoretrieveInitPostForm(addresses: string, pubKey: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return AutoretrieveApiFp(this.configuration).adminAutoretrieveInitPostForm(addresses, pubKey, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lists all registered autoretrieve servers
     * @summary List autoretrieve servers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoretrieveApi
     */
    public async adminAutoretrieveListGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return AutoretrieveApiFp(this.configuration).adminAutoretrieveListGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint updates the lastConnection field for autoretrieve
     * @summary Marks autoretrieve server as up
     * @param {string} token Autoretrieve&#x27;s auth token
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoretrieveApi
     */
    public async autoretrieveHeartbeatPost(token: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return AutoretrieveApiFp(this.configuration).autoretrieveHeartbeatPost(token, options).then((request) => request(this.axios, this.basePath));
    }
}
