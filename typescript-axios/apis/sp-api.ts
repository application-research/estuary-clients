/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiStorageProviderResp } from '../models';
import { GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse } from '../models';
import { GithubComApplicationResearchEstuaryApiV2ClaimResponse } from '../models';
import { MinerClaimMinerBody } from '../models';
import { MinerMinerSetInfoParams } from '../models';
import { MinerSuspendMinerBody } from '../models';
import { UtilHttpError } from '../models';
/**
 * SpApi - axios parameter creator
 * @export
 */
export const SpApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint lets a user claim a storage provider
         * @summary Claim Storage Provider
         * @param {MinerClaimMinerBody} body Claim Storage Provider Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersClaimPost: async (body: MinerClaimMinerBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling storageProvidersClaimPost.');
            }
            const localVarPath = `/storage-providers/claim`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lets a user get the message in order to claim a storage provider
         * @summary Get Claim Storage Provider
         * @param {string} sp Storage Provider claim message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersClaimSpGet: async (sp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersClaimSpGet.');
            }
            const localVarPath = `/storage-providers/claim/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all storage providers deals
         * @summary Get all storage providers deals
         * @param {string} sp Filter by storage provider
         * @param {string} [ignoreFailed] Ignore Failed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersDealsSpGet: async (sp: string, ignoreFailed?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersDealsSpGet.');
            }
            const localVarPath = `/storage-providers/deals/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ignoreFailed !== undefined) {
                localVarQueryParameter['ignore-failed'] = ignoreFailed;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all storage providers
         * @summary Get all storage providers
         * @param {string} sp Filter by storage provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersFailuresSpGet: async (sp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersFailuresSpGet.');
            }
            const localVarPath = `/storage-providers/failures/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all storage providers
         * @summary Get all storage providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/storage-providers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lets a user set storage provider info.
         * @summary Set Storage Provider Info
         * @param {MinerMinerSetInfoParams} body Storage Provider set info params
         * @param {string} sp Storage Provider to set info for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersSetInfoSpPut: async (body: MinerMinerSetInfoParams, sp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling storageProvidersSetInfoSpPut.');
            }
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersSetInfoSpPut.');
            }
            const localVarPath = `/storage-providers/set-info/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns storage provider stats
         * @summary Get storage provider stats
         * @param {string} sp Filter by storage provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersStatsSpGet: async (sp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersStatsSpGet.');
            }
            const localVarPath = `/storage-providers/stats/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lets a user suspend a storage provider.
         * @summary Suspend Storage Provider
         * @param {MinerSuspendMinerBody} body Suspend Storage Provider Body
         * @param {string} sp Storage Provider to suspend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersSuspendSpPost: async (body: MinerSuspendMinerBody, sp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling storageProvidersSuspendSpPost.');
            }
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersSuspendSpPost.');
            }
            const localVarPath = `/storage-providers/suspend/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint lets a user unsuspend a Storage Provider.
         * @summary Unuspend Storage Provider
         * @param {string} sp Storage Provider to unsuspend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        storageProvidersUnsuspendSpPut: async (sp: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sp' is not null or undefined
            if (sp === null || sp === undefined) {
                throw new RequiredError('sp','Required parameter sp was null or undefined when calling storageProvidersUnsuspendSpPut.');
            }
            const localVarPath = `/storage-providers/unsuspend/{sp}`
                .replace(`{${"sp"}}`, encodeURIComponent(String(sp)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpApi - functional programming interface
 * @export
 */
export const SpApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint lets a user claim a storage provider
         * @summary Claim Storage Provider
         * @param {MinerClaimMinerBody} body Claim Storage Provider Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersClaimPost(body: MinerClaimMinerBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersClaimPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lets a user get the message in order to claim a storage provider
         * @summary Get Claim Storage Provider
         * @param {string} sp Storage Provider claim message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersClaimSpGet(sp: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersClaimSpGet(sp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns all storage providers deals
         * @summary Get all storage providers deals
         * @param {string} sp Filter by storage provider
         * @param {string} [ignoreFailed] Ignore Failed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersDealsSpGet(sp, ignoreFailed, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns all storage providers
         * @summary Get all storage providers
         * @param {string} sp Filter by storage provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersFailuresSpGet(sp: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersFailuresSpGet(sp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns all storage providers
         * @summary Get all storage providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<ApiStorageProviderResp>>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lets a user set storage provider info.
         * @summary Set Storage Provider Info
         * @param {MinerMinerSetInfoParams} body Storage Provider set info params
         * @param {string} sp Storage Provider to set info for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersSetInfoSpPut(body, sp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns storage provider stats
         * @summary Get storage provider stats
         * @param {string} sp Filter by storage provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersStatsSpGet(sp: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersStatsSpGet(sp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lets a user suspend a storage provider.
         * @summary Suspend Storage Provider
         * @param {MinerSuspendMinerBody} body Suspend Storage Provider Body
         * @param {string} sp Storage Provider to suspend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<{ [key: string]: string; }>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersSuspendSpPost(body, sp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint lets a user unsuspend a Storage Provider.
         * @summary Unuspend Storage Provider
         * @param {string} sp Storage Provider to unsuspend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersUnsuspendSpPut(sp: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await SpApiAxiosParamCreator(configuration).storageProvidersUnsuspendSpPut(sp, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpApi - factory interface
 * @export
 */
export const SpApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint lets a user claim a storage provider
         * @summary Claim Storage Provider
         * @param {MinerClaimMinerBody} body Claim Storage Provider Body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersClaimPost(body: MinerClaimMinerBody, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>> {
            return SpApiFp(configuration).storageProvidersClaimPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lets a user get the message in order to claim a storage provider
         * @summary Get Claim Storage Provider
         * @param {string} sp Storage Provider claim message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersClaimSpGet(sp: string, options?: AxiosRequestConfig): Promise<AxiosResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>> {
            return SpApiFp(configuration).storageProvidersClaimSpGet(sp, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all storage providers deals
         * @summary Get all storage providers deals
         * @param {string} sp Filter by storage provider
         * @param {string} [ignoreFailed] Ignore Failed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return SpApiFp(configuration).storageProvidersDealsSpGet(sp, ignoreFailed, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all storage providers
         * @summary Get all storage providers
         * @param {string} sp Filter by storage provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersFailuresSpGet(sp: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return SpApiFp(configuration).storageProvidersFailuresSpGet(sp, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all storage providers
         * @summary Get all storage providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<ApiStorageProviderResp>>> {
            return SpApiFp(configuration).storageProvidersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lets a user set storage provider info.
         * @summary Set Storage Provider Info
         * @param {MinerMinerSetInfoParams} body Storage Provider set info params
         * @param {string} sp Storage Provider to set info for
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SpApiFp(configuration).storageProvidersSetInfoSpPut(body, sp, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns storage provider stats
         * @summary Get storage provider stats
         * @param {string} sp Filter by storage provider
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersStatsSpGet(sp: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return SpApiFp(configuration).storageProvidersStatsSpGet(sp, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lets a user suspend a storage provider.
         * @summary Suspend Storage Provider
         * @param {MinerSuspendMinerBody} body Suspend Storage Provider Body
         * @param {string} sp Storage Provider to suspend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, options?: AxiosRequestConfig): Promise<AxiosResponse<{ [key: string]: string; }>> {
            return SpApiFp(configuration).storageProvidersSuspendSpPost(body, sp, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint lets a user unsuspend a Storage Provider.
         * @summary Unuspend Storage Provider
         * @param {string} sp Storage Provider to unsuspend
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async storageProvidersUnsuspendSpPut(sp: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return SpApiFp(configuration).storageProvidersUnsuspendSpPut(sp, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpApi - object-oriented interface
 * @export
 * @class SpApi
 * @extends {BaseAPI}
 */
export class SpApi extends BaseAPI {
    /**
     * This endpoint lets a user claim a storage provider
     * @summary Claim Storage Provider
     * @param {MinerClaimMinerBody} body Claim Storage Provider Body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersClaimPost(body: MinerClaimMinerBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>> {
        return SpApiFp(this.configuration).storageProvidersClaimPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lets a user get the message in order to claim a storage provider
     * @summary Get Claim Storage Provider
     * @param {string} sp Storage Provider claim message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersClaimSpGet(sp: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>> {
        return SpApiFp(this.configuration).storageProvidersClaimSpGet(sp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all storage providers deals
     * @summary Get all storage providers deals
     * @param {string} sp Filter by storage provider
     * @param {string} [ignoreFailed] Ignore Failed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return SpApiFp(this.configuration).storageProvidersDealsSpGet(sp, ignoreFailed, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all storage providers
     * @summary Get all storage providers
     * @param {string} sp Filter by storage provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersFailuresSpGet(sp: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return SpApiFp(this.configuration).storageProvidersFailuresSpGet(sp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all storage providers
     * @summary Get all storage providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<ApiStorageProviderResp>>> {
        return SpApiFp(this.configuration).storageProvidersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lets a user set storage provider info.
     * @summary Set Storage Provider Info
     * @param {MinerMinerSetInfoParams} body Storage Provider set info params
     * @param {string} sp Storage Provider to set info for
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SpApiFp(this.configuration).storageProvidersSetInfoSpPut(body, sp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns storage provider stats
     * @summary Get storage provider stats
     * @param {string} sp Filter by storage provider
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersStatsSpGet(sp: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return SpApiFp(this.configuration).storageProvidersStatsSpGet(sp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lets a user suspend a storage provider.
     * @summary Suspend Storage Provider
     * @param {MinerSuspendMinerBody} body Suspend Storage Provider Body
     * @param {string} sp Storage Provider to suspend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<{ [key: string]: string; }>> {
        return SpApiFp(this.configuration).storageProvidersSuspendSpPost(body, sp, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint lets a user unsuspend a Storage Provider.
     * @summary Unuspend Storage Provider
     * @param {string} sp Storage Provider to unsuspend
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpApi
     */
    public async storageProvidersUnsuspendSpPut(sp: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return SpApiFp(this.configuration).storageProvidersUnsuspendSpPut(sp, options).then((request) => request(this.axios, this.basePath));
    }
}
