/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiChannelIDParam } from '../models';
import { ApiEstimateDealBody } from '../models';
import { UtilHttpError } from '../models';
/**
 * DealsApi - axios parameter creator
 * @export
 */
export const DealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint estimates the cost of a deal
         * @summary Estimate the cost of a deal
         * @param {ApiEstimateDealBody} body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealEstimatePost: async (body: ApiEstimateDealBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dealEstimatePost.');
            }
            const localVarPath = `/deal/estimate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the deal info for a deal
         * @summary Get Deal Info
         * @param {number} dealid Deal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealInfoDealidGet: async (dealid: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'dealid' is not null or undefined
            if (dealid === null || dealid === undefined) {
                throw new RequiredError('dealid','Required parameter dealid was null or undefined when calling dealInfoDealidGet.');
            }
            const localVarPath = `/deal/info/{dealid}`
                .replace(`{${"dealid"}}`, encodeURIComponent(String(dealid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the proposal for a deal
         * @summary Get Proposal
         * @param {string} propcid Proposal CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealProposalPropcidGet: async (propcid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propcid' is not null or undefined
            if (propcid === null || propcid === undefined) {
                throw new RequiredError('propcid','Required parameter propcid was null or undefined when calling dealProposalPropcidGet.');
            }
            const localVarPath = `/deal/proposal/{propcid}`
                .replace(`{${"propcid"}}`, encodeURIComponent(String(propcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the ask for a given CID
         * @summary Query Ask
         * @param {string} miner CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealQueryMinerGet: async (miner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling dealQueryMinerGet.');
            }
            const localVarPath = `/deal/query/{miner}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Deal Status by PropCid
         * @summary Get Deal Status by PropCid
         * @param {string} propcid PropCid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealStatusByProposalPropcidGet: async (propcid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'propcid' is not null or undefined
            if (propcid === null || propcid === undefined) {
                throw new RequiredError('propcid','Required parameter propcid was null or undefined when calling dealStatusByProposalPropcidGet.');
            }
            const localVarPath = `/deal/status-by-proposal/{propcid}`
                .replace(`{${"propcid"}}`, encodeURIComponent(String(propcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the status of a deal
         * @summary Deal Status
         * @param {string} miner Miner
         * @param {string} propcid Proposal CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealStatusMinerPropcidGet: async (miner: string, propcid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling dealStatusMinerPropcidGet.');
            }
            // verify required parameter 'propcid' is not null or undefined
            if (propcid === null || propcid === undefined) {
                throw new RequiredError('propcid','Required parameter propcid was null or undefined when calling dealStatusMinerPropcidGet.');
            }
            const localVarPath = `/deal/status/{miner}/{propcid}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)))
                .replace(`{${"propcid"}}`, encodeURIComponent(String(propcid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the in-progress transfers
         * @summary Transfer In Progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealTransferInProgressGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deal/transfer/in-progress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the status of a transfer
         * @summary Transfer Status
         * @param {ApiChannelIDParam} body Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealTransferStatusPost: async (body: ApiChannelIDParam, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dealTransferStatusPost.');
            }
            const localVarPath = `/deal/transfer/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of storage failures for user
         * @summary Get storage failures for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealsFailuresGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/deals/failures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint makes a deal for a given content and miner
         * @summary Make Deal
         * @param {string} body Deal Request
         * @param {string} miner Miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealsMakeMinerPost: async (body: string, miner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling dealsMakeMinerPost.');
            }
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling dealsMakeMinerPost.');
            }
            const localVarPath = `/deals/make/{miner}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the status of a deal
         * @summary Get Deal Status
         * @param {number} deal Deal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dealsStatusDealGet: async (deal: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'deal' is not null or undefined
            if (deal === null || deal === undefined) {
                throw new RequiredError('deal','Required parameter deal was null or undefined when calling dealsStatusDealGet.');
            }
            const localVarPath = `/deals/status/{deal}`
                .replace(`{${"deal"}}`, encodeURIComponent(String(deal)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns a list of storage failures
         * @summary Get storage failures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicDealsFailuresGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/deals/failures`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the ask for a given CID
         * @summary Query Ask
         * @param {string} miner CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicMinersStorageQueryMinerGet: async (miner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling publicMinersStorageQueryMinerGet.');
            }
            const localVarPath = `/public/miners/storage/query/{miner}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DealsApi - functional programming interface
 * @export
 */
export const DealsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint estimates the cost of a deal
         * @summary Estimate the cost of a deal
         * @param {ApiEstimateDealBody} body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealEstimatePost(body: ApiEstimateDealBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealEstimatePost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the deal info for a deal
         * @summary Get Deal Info
         * @param {number} dealid Deal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealInfoDealidGet(dealid: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealInfoDealidGet(dealid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the proposal for a deal
         * @summary Get Proposal
         * @param {string} propcid Proposal CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealProposalPropcidGet(propcid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealProposalPropcidGet(propcid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the ask for a given CID
         * @summary Query Ask
         * @param {string} miner CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealQueryMinerGet(miner: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealQueryMinerGet(miner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Deal Status by PropCid
         * @summary Get Deal Status by PropCid
         * @param {string} propcid PropCid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealStatusByProposalPropcidGet(propcid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealStatusByProposalPropcidGet(propcid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the status of a deal
         * @summary Deal Status
         * @param {string} miner Miner
         * @param {string} propcid Proposal CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealStatusMinerPropcidGet(miner: string, propcid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealStatusMinerPropcidGet(miner, propcid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the in-progress transfers
         * @summary Transfer In Progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealTransferInProgressGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealTransferInProgressGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the status of a transfer
         * @summary Transfer Status
         * @param {ApiChannelIDParam} body Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealTransferStatusPost(body: ApiChannelIDParam, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealTransferStatusPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns a list of storage failures for user
         * @summary Get storage failures for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealsFailuresGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealsFailuresGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint makes a deal for a given content and miner
         * @summary Make Deal
         * @param {string} body Deal Request
         * @param {string} miner Miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealsMakeMinerPost(body: string, miner: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealsMakeMinerPost(body, miner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the status of a deal
         * @summary Get Deal Status
         * @param {number} deal Deal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealsStatusDealGet(deal: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).dealsStatusDealGet(deal, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns a list of storage failures
         * @summary Get storage failures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicDealsFailuresGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).publicDealsFailuresGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the ask for a given CID
         * @summary Query Ask
         * @param {string} miner CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersStorageQueryMinerGet(miner: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await DealsApiAxiosParamCreator(configuration).publicMinersStorageQueryMinerGet(miner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DealsApi - factory interface
 * @export
 */
export const DealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint estimates the cost of a deal
         * @summary Estimate the cost of a deal
         * @param {ApiEstimateDealBody} body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealEstimatePost(body: ApiEstimateDealBody, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealEstimatePost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the deal info for a deal
         * @summary Get Deal Info
         * @param {number} dealid Deal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealInfoDealidGet(dealid: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealInfoDealidGet(dealid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the proposal for a deal
         * @summary Get Proposal
         * @param {string} propcid Proposal CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealProposalPropcidGet(propcid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealProposalPropcidGet(propcid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the ask for a given CID
         * @summary Query Ask
         * @param {string} miner CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealQueryMinerGet(miner: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealQueryMinerGet(miner, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Deal Status by PropCid
         * @summary Get Deal Status by PropCid
         * @param {string} propcid PropCid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealStatusByProposalPropcidGet(propcid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealStatusByProposalPropcidGet(propcid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the status of a deal
         * @summary Deal Status
         * @param {string} miner Miner
         * @param {string} propcid Proposal CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealStatusMinerPropcidGet(miner: string, propcid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealStatusMinerPropcidGet(miner, propcid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the in-progress transfers
         * @summary Transfer In Progress
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealTransferInProgressGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealTransferInProgressGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the status of a transfer
         * @summary Transfer Status
         * @param {ApiChannelIDParam} body Channel ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealTransferStatusPost(body: ApiChannelIDParam, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealTransferStatusPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of storage failures for user
         * @summary Get storage failures for user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealsFailuresGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealsFailuresGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint makes a deal for a given content and miner
         * @summary Make Deal
         * @param {string} body Deal Request
         * @param {string} miner Miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealsMakeMinerPost(body: string, miner: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealsMakeMinerPost(body, miner, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the status of a deal
         * @summary Get Deal Status
         * @param {number} deal Deal ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dealsStatusDealGet(deal: number, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).dealsStatusDealGet(deal, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns a list of storage failures
         * @summary Get storage failures
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicDealsFailuresGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).publicDealsFailuresGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the ask for a given CID
         * @summary Query Ask
         * @param {string} miner CID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersStorageQueryMinerGet(miner: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return DealsApiFp(configuration).publicMinersStorageQueryMinerGet(miner, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DealsApi - object-oriented interface
 * @export
 * @class DealsApi
 * @extends {BaseAPI}
 */
export class DealsApi extends BaseAPI {
    /**
     * This endpoint estimates the cost of a deal
     * @summary Estimate the cost of a deal
     * @param {ApiEstimateDealBody} body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealEstimatePost(body: ApiEstimateDealBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealEstimatePost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the deal info for a deal
     * @summary Get Deal Info
     * @param {number} dealid Deal ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealInfoDealidGet(dealid: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealInfoDealidGet(dealid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the proposal for a deal
     * @summary Get Proposal
     * @param {string} propcid Proposal CID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealProposalPropcidGet(propcid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealProposalPropcidGet(propcid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the ask for a given CID
     * @summary Query Ask
     * @param {string} miner CID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealQueryMinerGet(miner: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealQueryMinerGet(miner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Deal Status by PropCid
     * @summary Get Deal Status by PropCid
     * @param {string} propcid PropCid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealStatusByProposalPropcidGet(propcid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealStatusByProposalPropcidGet(propcid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the status of a deal
     * @summary Deal Status
     * @param {string} miner Miner
     * @param {string} propcid Proposal CID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealStatusMinerPropcidGet(miner: string, propcid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealStatusMinerPropcidGet(miner, propcid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the in-progress transfers
     * @summary Transfer In Progress
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealTransferInProgressGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealTransferInProgressGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the status of a transfer
     * @summary Transfer Status
     * @param {ApiChannelIDParam} body Channel ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealTransferStatusPost(body: ApiChannelIDParam, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealTransferStatusPost(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of storage failures for user
     * @summary Get storage failures for user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealsFailuresGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealsFailuresGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint makes a deal for a given content and miner
     * @summary Make Deal
     * @param {string} body Deal Request
     * @param {string} miner Miner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealsMakeMinerPost(body: string, miner: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealsMakeMinerPost(body, miner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the status of a deal
     * @summary Get Deal Status
     * @param {number} deal Deal ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async dealsStatusDealGet(deal: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).dealsStatusDealGet(deal, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns a list of storage failures
     * @summary Get storage failures
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async publicDealsFailuresGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).publicDealsFailuresGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the ask for a given CID
     * @summary Query Ask
     * @param {string} miner CID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DealsApi
     */
    public async publicMinersStorageQueryMinerGet(miner: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return DealsApiFp(this.configuration).publicMinersStorageQueryMinerGet(miner, options).then((request) => request(this.axios, this.basePath));
    }
}
