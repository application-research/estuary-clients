/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { UtilHttpError } from '../models';
/**
 * PeersApi - axios parameter creator
 * @export
 */
export const PeersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint can be used to remove a Peer from the Peering Service
         * @summary Remove peers on Peering Service
         * @param {Array<boolean>} body Peer ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPeeringPeersDelete: async (body: Array<boolean>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling adminPeeringPeersDelete.');
            }
            const localVarPath = `/admin/peering/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to list all peers on Peering Service
         * @summary List all Peering peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPeeringPeersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/peering/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to add a Peer from the Peering Service
         * @summary Add peers on Peering Service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPeeringPeersPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/peering/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to start the Peering Service
         * @summary Start Peering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPeeringStartPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/peering/start`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to check the Peering status
         * @summary Check Peering Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPeeringStatusGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/peering/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint can be used to stop the Peering Service
         * @summary Stop Peering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminPeeringStopPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin/peering/stop`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeersApi - functional programming interface
 * @export
 */
export const PeersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint can be used to remove a Peer from the Peering Service
         * @summary Remove peers on Peering Service
         * @param {Array<boolean>} body Peer ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringPeersDelete(body: Array<boolean>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PeersApiAxiosParamCreator(configuration).adminPeeringPeersDelete(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint can be used to list all peers on Peering Service
         * @summary List all Peering peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringPeersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PeersApiAxiosParamCreator(configuration).adminPeeringPeersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint can be used to add a Peer from the Peering Service
         * @summary Add peers on Peering Service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringPeersPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PeersApiAxiosParamCreator(configuration).adminPeeringPeersPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint can be used to start the Peering Service
         * @summary Start Peering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringStartPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PeersApiAxiosParamCreator(configuration).adminPeeringStartPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint can be used to check the Peering status
         * @summary Check Peering Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringStatusGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PeersApiAxiosParamCreator(configuration).adminPeeringStatusGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint can be used to stop the Peering Service
         * @summary Stop Peering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringStopPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PeersApiAxiosParamCreator(configuration).adminPeeringStopPost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PeersApi - factory interface
 * @export
 */
export const PeersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint can be used to remove a Peer from the Peering Service
         * @summary Remove peers on Peering Service
         * @param {Array<boolean>} body Peer ids
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringPeersDelete(body: Array<boolean>, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PeersApiFp(configuration).adminPeeringPeersDelete(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to list all peers on Peering Service
         * @summary List all Peering peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringPeersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PeersApiFp(configuration).adminPeeringPeersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to add a Peer from the Peering Service
         * @summary Add peers on Peering Service
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringPeersPost(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PeersApiFp(configuration).adminPeeringPeersPost(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to start the Peering Service
         * @summary Start Peering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringStartPost(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PeersApiFp(configuration).adminPeeringStartPost(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to check the Peering status
         * @summary Check Peering Status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringStatusGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PeersApiFp(configuration).adminPeeringStatusGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint can be used to stop the Peering Service
         * @summary Stop Peering
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminPeeringStopPost(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PeersApiFp(configuration).adminPeeringStopPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PeersApi - object-oriented interface
 * @export
 * @class PeersApi
 * @extends {BaseAPI}
 */
export class PeersApi extends BaseAPI {
    /**
     * This endpoint can be used to remove a Peer from the Peering Service
     * @summary Remove peers on Peering Service
     * @param {Array<boolean>} body Peer ids
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeersApi
     */
    public async adminPeeringPeersDelete(body: Array<boolean>, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PeersApiFp(this.configuration).adminPeeringPeersDelete(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint can be used to list all peers on Peering Service
     * @summary List all Peering peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeersApi
     */
    public async adminPeeringPeersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PeersApiFp(this.configuration).adminPeeringPeersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint can be used to add a Peer from the Peering Service
     * @summary Add peers on Peering Service
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeersApi
     */
    public async adminPeeringPeersPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PeersApiFp(this.configuration).adminPeeringPeersPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint can be used to start the Peering Service
     * @summary Start Peering
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeersApi
     */
    public async adminPeeringStartPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PeersApiFp(this.configuration).adminPeeringStartPost(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint can be used to check the Peering status
     * @summary Check Peering Status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeersApi
     */
    public async adminPeeringStatusGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PeersApiFp(this.configuration).adminPeeringStatusGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint can be used to stop the Peering Service
     * @summary Stop Peering
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeersApi
     */
    public async adminPeeringStopPost(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PeersApiFp(this.configuration).adminPeeringStopPost(options).then((request) => request(this.axios, this.basePath));
    }
}
