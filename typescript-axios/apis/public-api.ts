/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { ApiPublicNodeInfo } from '../models';
import { UtilHttpError } from '../models';
/**
 * PublicApi - axios parameter creator
 * @export
 */
export const PublicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the content associated with a CID
         * @summary Get Full Content by Cid
         * @param {string} cid Cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCidGet: async (cid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling getCidGet.');
            }
            const localVarPath = `/get/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns the content record associated with a CID
         * @summary Get Content by Cid
         * @param {string} cid Cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicByCidCidGet: async (cid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'cid' is not null or undefined
            if (cid === null || cid === undefined) {
                throw new RequiredError('cid','Required parameter cid was null or undefined when calling publicByCidCidGet.');
            }
            const localVarPath = `/public/by-cid/{cid}`
                .replace(`{${"cid"}}`, encodeURIComponent(String(cid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns information about the node
         * @summary Get public node info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicInfoGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get deal metrics
         * @summary Get deal metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicMetricsDealsOnChainGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/metrics/deals-on-chain`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all miners deals
         * @summary Get all miners deals
         * @param {string} miner Filter by miner
         * @param {string} [ignoreFailed] Ignore Failed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicMinersDealsMinerGet: async (miner: string, ignoreFailed?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling publicMinersDealsMinerGet.');
            }
            const localVarPath = `/public/miners/deals/{miner}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (ignoreFailed !== undefined) {
                localVarQueryParameter['ignore-failed'] = ignoreFailed;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns all miners
         * @summary Get all miners
         * @param {string} miner Filter by miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicMinersFailuresMinerGet: async (miner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling publicMinersFailuresMinerGet.');
            }
            const localVarPath = `/public/miners/failures/{miner}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint returns miner stats
         * @summary Get miner stats
         * @param {string} miner Filter by miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicMinersStatsMinerGet: async (miner: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'miner' is not null or undefined
            if (miner === null || miner === undefined) {
                throw new RequiredError('miner','Required parameter miner was null or undefined when calling publicMinersStatsMinerGet.');
            }
            const localVarPath = `/public/miners/stats/{miner}`
                .replace(`{${"miner"}}`, encodeURIComponent(String(miner)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get net addrs
         * @summary Net Addrs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicNetAddrsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/net/addrs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get net peers
         * @summary Net Peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicNetPeersGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/net/peers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get public stats.
         * @summary Public stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        publicStatsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/public/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PublicApi - functional programming interface
 * @export
 */
export const PublicApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint returns the content associated with a CID
         * @summary Get Full Content by Cid
         * @param {string} cid Cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCidGet(cid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<void>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).getCidGet(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns the content record associated with a CID
         * @summary Get Content by Cid
         * @param {string} cid Cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicByCidCidGet(cid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicByCidCidGet(cid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns information about the node
         * @summary Get public node info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicInfoGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<ApiPublicNodeInfo>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicInfoGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get deal metrics
         * @summary Get deal metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMetricsDealsOnChainGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicMetricsDealsOnChainGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns all miners deals
         * @summary Get all miners deals
         * @param {string} miner Filter by miner
         * @param {string} [ignoreFailed] Ignore Failed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicMinersDealsMinerGet(miner, ignoreFailed, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns all miners
         * @summary Get all miners
         * @param {string} miner Filter by miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersFailuresMinerGet(miner: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicMinersFailuresMinerGet(miner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint returns miner stats
         * @summary Get miner stats
         * @param {string} miner Filter by miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersStatsMinerGet(miner: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicMinersStatsMinerGet(miner, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get net addrs
         * @summary Net Addrs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicNetAddrsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicNetAddrsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get net peers
         * @summary Net Peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicNetPeersGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<string>>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicNetPeersGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get public stats.
         * @summary Public stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicStatsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await PublicApiAxiosParamCreator(configuration).publicStatsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PublicApi - factory interface
 * @export
 */
export const PublicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint returns the content associated with a CID
         * @summary Get Full Content by Cid
         * @param {string} cid Cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCidGet(cid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<void>> {
            return PublicApiFp(configuration).getCidGet(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns the content record associated with a CID
         * @summary Get Content by Cid
         * @param {string} cid Cid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicByCidCidGet(cid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicApiFp(configuration).publicByCidCidGet(cid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns information about the node
         * @summary Get public node info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicInfoGet(options?: AxiosRequestConfig): Promise<AxiosResponse<ApiPublicNodeInfo>> {
            return PublicApiFp(configuration).publicInfoGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get deal metrics
         * @summary Get deal metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMetricsDealsOnChainGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicApiFp(configuration).publicMetricsDealsOnChainGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all miners deals
         * @summary Get all miners deals
         * @param {string} miner Filter by miner
         * @param {string} [ignoreFailed] Ignore Failed
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicApiFp(configuration).publicMinersDealsMinerGet(miner, ignoreFailed, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns all miners
         * @summary Get all miners
         * @param {string} miner Filter by miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersFailuresMinerGet(miner: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicApiFp(configuration).publicMinersFailuresMinerGet(miner, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint returns miner stats
         * @summary Get miner stats
         * @param {string} miner Filter by miner
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicMinersStatsMinerGet(miner: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicApiFp(configuration).publicMinersStatsMinerGet(miner, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get net addrs
         * @summary Net Addrs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicNetAddrsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return PublicApiFp(configuration).publicNetAddrsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get net peers
         * @summary Net Peers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicNetPeersGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<string>>> {
            return PublicApiFp(configuration).publicNetPeersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get public stats.
         * @summary Public stats
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async publicStatsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return PublicApiFp(configuration).publicStatsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PublicApi - object-oriented interface
 * @export
 * @class PublicApi
 * @extends {BaseAPI}
 */
export class PublicApi extends BaseAPI {
    /**
     * This endpoint returns the content associated with a CID
     * @summary Get Full Content by Cid
     * @param {string} cid Cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async getCidGet(cid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<void>> {
        return PublicApiFp(this.configuration).getCidGet(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns the content record associated with a CID
     * @summary Get Content by Cid
     * @param {string} cid Cid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicByCidCidGet(cid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicApiFp(this.configuration).publicByCidCidGet(cid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns information about the node
     * @summary Get public node info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicInfoGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<ApiPublicNodeInfo>> {
        return PublicApiFp(this.configuration).publicInfoGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get deal metrics
     * @summary Get deal metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicMetricsDealsOnChainGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicApiFp(this.configuration).publicMetricsDealsOnChainGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all miners deals
     * @summary Get all miners deals
     * @param {string} miner Filter by miner
     * @param {string} [ignoreFailed] Ignore Failed
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicApiFp(this.configuration).publicMinersDealsMinerGet(miner, ignoreFailed, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns all miners
     * @summary Get all miners
     * @param {string} miner Filter by miner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicMinersFailuresMinerGet(miner: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicApiFp(this.configuration).publicMinersFailuresMinerGet(miner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint returns miner stats
     * @summary Get miner stats
     * @param {string} miner Filter by miner
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicMinersStatsMinerGet(miner: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicApiFp(this.configuration).publicMinersStatsMinerGet(miner, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get net addrs
     * @summary Net Addrs
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicNetAddrsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return PublicApiFp(this.configuration).publicNetAddrsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get net peers
     * @summary Net Peers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicNetPeersGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<string>>> {
        return PublicApiFp(this.configuration).publicNetPeersGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get public stats.
     * @summary Public stats
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PublicApi
     */
    public async publicStatsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return PublicApiFp(this.configuration).publicStatsGet(options).then((request) => request(this.axios, this.basePath));
    }
}
