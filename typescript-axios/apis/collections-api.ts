/* tslint:disable */
/* eslint-disable */
/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { CollectionsCollection } from '../models';
import { MainCreateCollectionBody } from '../models';
import { MainDeleteContentFromCollectionBody } from '../models';
import { UtilHttpError } from '../models';
/**
 * CollectionsApi - axios parameter creator
 * @export
 */
export const CollectionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
         * @summary Produce a CID of the collection contents
         * @param {string} coluuid coluuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsColuuidCommitPost: async (coluuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coluuid' is not null or undefined
            if (coluuid === null || coluuid === undefined) {
                throw new RequiredError('coluuid','Required parameter coluuid was null or undefined when calling collectionsColuuidCommitPost.');
            }
            const localVarPath = `/collections/{coluuid}/commit`
                .replace(`{${"coluuid"}}`, encodeURIComponent(String(coluuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
         * @summary Deletes a content from a collection
         * @param {MainDeleteContentFromCollectionBody} body Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)
         * @param {string} coluuid Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsColuuidContentsDelete: async (body: MainDeleteContentFromCollectionBody, coluuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling collectionsColuuidContentsDelete.');
            }
            // verify required parameter 'coluuid' is not null or undefined
            if (coluuid === null || coluuid === undefined) {
                throw new RequiredError('coluuid','Required parameter coluuid was null or undefined when calling collectionsColuuidContentsDelete.');
            }
            const localVarPath = `/collections/{coluuid}/contents`
                .replace(`{${"coluuid"}}`, encodeURIComponent(String(coluuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to delete an existing collection.
         * @summary Deletes a collection
         * @param {string} coluuid Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsColuuidDelete: async (coluuid: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coluuid' is not null or undefined
            if (coluuid === null || coluuid === undefined) {
                throw new RequiredError('coluuid','Required parameter coluuid was null or undefined when calling collectionsColuuidDelete.');
            }
            const localVarPath = `/collections/{coluuid}`
                .replace(`{${"coluuid"}}`, encodeURIComponent(String(coluuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to get contents in a collection. If no colpath query param is passed
         * @summary Get contents in a collection
         * @param {string} coluuid coluuid
         * @param {string} [dir] Directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsColuuidGet: async (coluuid: string, dir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coluuid' is not null or undefined
            if (coluuid === null || coluuid === undefined) {
                throw new RequiredError('coluuid','Required parameter coluuid was null or undefined when calling collectionsColuuidGet.');
            }
            const localVarPath = `/collections/{coluuid}`
                .replace(`{${"coluuid"}}`, encodeURIComponent(String(coluuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (dir !== undefined) {
                localVarQueryParameter['dir'] = dir;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
         * @summary Add contents to a collection
         * @param {Array<number>} body Content IDs to add to collection
         * @param {string} coluuid Collection UUID
         * @param {string} [dir] Directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsColuuidPost: async (body: Array<number>, coluuid: string, dir?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling collectionsColuuidPost.');
            }
            // verify required parameter 'coluuid' is not null or undefined
            if (coluuid === null || coluuid === undefined) {
                throw new RequiredError('coluuid','Required parameter coluuid was null or undefined when calling collectionsColuuidPost.');
            }
            const localVarPath = `/collections/{coluuid}`
                .replace(`{${"coluuid"}}`, encodeURIComponent(String(coluuid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (dir !== undefined) {
                localVarQueryParameter['dir'] = dir;
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint adds a file to a collection
         * @summary Add a file to a collection
         * @param {string} coluuid Collection ID
         * @param {string} content Content
         * @param {string} path Path to file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsFsAddPost: async (coluuid: string, content: string, path: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'coluuid' is not null or undefined
            if (coluuid === null || coluuid === undefined) {
                throw new RequiredError('coluuid','Required parameter coluuid was null or undefined when calling collectionsFsAddPost.');
            }
            // verify required parameter 'content' is not null or undefined
            if (content === null || content === undefined) {
                throw new RequiredError('content','Required parameter content was null or undefined when calling collectionsFsAddPost.');
            }
            // verify required parameter 'path' is not null or undefined
            if (path === null || path === undefined) {
                throw new RequiredError('path','Required parameter path was null or undefined when calling collectionsFsAddPost.');
            }
            const localVarPath = `/collections/fs/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            if (coluuid !== undefined) {
                localVarQueryParameter['coluuid'] = coluuid;
            }

            if (content !== undefined) {
                localVarQueryParameter['content'] = content;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
         * @summary List all collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/collections/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
         * @summary Create a new collection
         * @param {MainCreateCollectionBody} body Collection name and description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        collectionsPost: async (body: MainCreateCollectionBody, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling collectionsPost.');
            }
            const localVarPath = `/collections/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("Authorization")
                    : await configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = '*/*';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CollectionsApi - functional programming interface
 * @export
 */
export const CollectionsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
         * @summary Produce a CID of the collection contents
         * @param {string} coluuid coluuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidCommitPost(coluuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsColuuidCommitPost(coluuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
         * @summary Deletes a content from a collection
         * @param {MainDeleteContentFromCollectionBody} body Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)
         * @param {string} coluuid Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidContentsDelete(body: MainDeleteContentFromCollectionBody, coluuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsColuuidContentsDelete(body, coluuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to delete an existing collection.
         * @summary Deletes a collection
         * @param {string} coluuid Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidDelete(coluuid: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsColuuidDelete(coluuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to get contents in a collection. If no colpath query param is passed
         * @summary Get contents in a collection
         * @param {string} coluuid coluuid
         * @param {string} [dir] Directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidGet(coluuid: string, dir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsColuuidGet(coluuid, dir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
         * @summary Add contents to a collection
         * @param {Array<number>} body Content IDs to add to collection
         * @param {string} coluuid Collection UUID
         * @param {string} [dir] Directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidPost(body: Array<number>, coluuid: string, dir?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsColuuidPost(body, coluuid, dir, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint adds a file to a collection
         * @summary Add a file to a collection
         * @param {string} coluuid Collection ID
         * @param {string} content Content
         * @param {string} path Path to file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsFsAddPost(coluuid: string, content: string, path: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<string>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsFsAddPost(coluuid, content, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
         * @summary List all collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<CollectionsCollection>>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
         * @summary Create a new collection
         * @param {MainCreateCollectionBody} body Collection name and description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsPost(body: MainCreateCollectionBody, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<CollectionsCollection>>> {
            const localVarAxiosArgs = await CollectionsApiAxiosParamCreator(configuration).collectionsPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CollectionsApi - factory interface
 * @export
 */
export const CollectionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
         * @summary Produce a CID of the collection contents
         * @param {string} coluuid coluuid
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidCommitPost(coluuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CollectionsApiFp(configuration).collectionsColuuidCommitPost(coluuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
         * @summary Deletes a content from a collection
         * @param {MainDeleteContentFromCollectionBody} body Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)
         * @param {string} coluuid Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidContentsDelete(body: MainDeleteContentFromCollectionBody, coluuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CollectionsApiFp(configuration).collectionsColuuidContentsDelete(body, coluuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to delete an existing collection.
         * @summary Deletes a collection
         * @param {string} coluuid Collection ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidDelete(coluuid: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CollectionsApiFp(configuration).collectionsColuuidDelete(coluuid, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to get contents in a collection. If no colpath query param is passed
         * @summary Get contents in a collection
         * @param {string} coluuid coluuid
         * @param {string} [dir] Directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidGet(coluuid: string, dir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CollectionsApiFp(configuration).collectionsColuuidGet(coluuid, dir, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
         * @summary Add contents to a collection
         * @param {Array<number>} body Content IDs to add to collection
         * @param {string} coluuid Collection UUID
         * @param {string} [dir] Directory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsColuuidPost(body: Array<number>, coluuid: string, dir?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CollectionsApiFp(configuration).collectionsColuuidPost(body, coluuid, dir, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint adds a file to a collection
         * @summary Add a file to a collection
         * @param {string} coluuid Collection ID
         * @param {string} content Content
         * @param {string} path Path to file
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsFsAddPost(coluuid: string, content: string, path: string, options?: AxiosRequestConfig): Promise<AxiosResponse<string>> {
            return CollectionsApiFp(configuration).collectionsFsAddPost(coluuid, content, path, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
         * @summary List all collections
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<CollectionsCollection>>> {
            return CollectionsApiFp(configuration).collectionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
         * @summary Create a new collection
         * @param {MainCreateCollectionBody} body Collection name and description
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async collectionsPost(body: MainCreateCollectionBody, options?: AxiosRequestConfig): Promise<AxiosResponse<CollectionsCollection>> {
            return CollectionsApiFp(configuration).collectionsPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CollectionsApi - object-oriented interface
 * @export
 * @class CollectionsApi
 * @extends {BaseAPI}
 */
export class CollectionsApi extends BaseAPI {
    /**
     * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
     * @summary Produce a CID of the collection contents
     * @param {string} coluuid coluuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsColuuidCommitPost(coluuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CollectionsApiFp(this.configuration).collectionsColuuidCommitPost(coluuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
     * @summary Deletes a content from a collection
     * @param {MainDeleteContentFromCollectionBody} body Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)
     * @param {string} coluuid Collection ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsColuuidContentsDelete(body: MainDeleteContentFromCollectionBody, coluuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CollectionsApiFp(this.configuration).collectionsColuuidContentsDelete(body, coluuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to delete an existing collection.
     * @summary Deletes a collection
     * @param {string} coluuid Collection ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsColuuidDelete(coluuid: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CollectionsApiFp(this.configuration).collectionsColuuidDelete(coluuid, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to get contents in a collection. If no colpath query param is passed
     * @summary Get contents in a collection
     * @param {string} coluuid coluuid
     * @param {string} [dir] Directory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsColuuidGet(coluuid: string, dir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CollectionsApiFp(this.configuration).collectionsColuuidGet(coluuid, dir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
     * @summary Add contents to a collection
     * @param {Array<number>} body Content IDs to add to collection
     * @param {string} coluuid Collection UUID
     * @param {string} [dir] Directory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsColuuidPost(body: Array<number>, coluuid: string, dir?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CollectionsApiFp(this.configuration).collectionsColuuidPost(body, coluuid, dir, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint adds a file to a collection
     * @summary Add a file to a collection
     * @param {string} coluuid Collection ID
     * @param {string} content Content
     * @param {string} path Path to file
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsFsAddPost(coluuid: string, content: string, path: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<string>> {
        return CollectionsApiFp(this.configuration).collectionsFsAddPost(coluuid, content, path, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @summary List all collections
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<CollectionsCollection>>> {
        return CollectionsApiFp(this.configuration).collectionsGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
     * @summary Create a new collection
     * @param {MainCreateCollectionBody} body Collection name and description
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CollectionsApi
     */
    public async collectionsPost(body: MainCreateCollectionBody, options?: AxiosRequestConfig) : Promise<AxiosResponse<CollectionsCollection>> {
        return CollectionsApiFp(this.configuration).collectionsPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
