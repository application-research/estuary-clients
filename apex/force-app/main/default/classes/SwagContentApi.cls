/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagContentApi {
    SwagClient client;

    public SwagContentApi(SwagClient client) {
        this.client = client;
    }

    public SwagContentApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Add Car object
     * This endpoint is used to add a car object to the network. The object can be a file or a directory.
     * @param body Car (required)
     * @param ignoreDupes Ignore Dupes (optional)
     * @param filename Filename (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentAddCarPost(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ignore-dupes', (String) params.get('ignoreDupes')));
        query.addAll(client.makeParam('filename', (String) params.get('filename')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/content/add-car',
            (String) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Add IPFS object
     * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     * @param body IPFS Body (required)
     * @param ignoreDupes Ignore Dupes (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentAddIpfsPost(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ignore-dupes', (String) params.get('ignoreDupes')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/content/add-ipfs',
            (SwagUtilContentAddIpfsBody) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Add new content
     * This endpoint is used to upload new content.
     * @param data File to upload (required)
     * @param filename Filenam to use for upload (optional)
     * @param coluuid Collection UUID (optional)
     * @param replication Replication value (optional)
     * @param ignoreDupes Ignore Dupes true/false (optional)
     * @param lazyProvide Lazy Provide true/false (optional)
     * @param dir Directory (optional)
     * @return SwagUtilContentAddResponse
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagUtilContentAddResponse contentAddPost(Map<String, Object> params) {
        client.assertNotNull(params.get('data'), 'data');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('coluuid', (String) params.get('coluuid')));
        query.addAll(client.makeParam('replication', (Integer) params.get('replication')));
        query.addAll(client.makeParam('ignore-dupes', (String) params.get('ignoreDupes')));
        query.addAll(client.makeParam('lazy-provide', (String) params.get('lazyProvide')));
        query.addAll(client.makeParam('dir', (String) params.get('dir')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        // cast form params to verify their expected type
        form.addAll(client.makeParam('data', (Blob) params.get('data')));
        form.addAll(client.makeParam('filename', (String) params.get('filename')));

        return (SwagUtilContentAddResponse) client.invoke(
            'POST', '/content/add', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/x-www-form-urlencoded' },
            new List<String> { 'bearerAuth' },
            SwagUtilContentAddResponse.class
        );
    }
    /**
     * Get aggregated content stats
     * This endpoint returns aggregated content stats
     * @param content Content ID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentAggregatedContentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('content'), 'content');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/aggregated/{content}', '',
            query, form,
            new Map<String, Object>{
                'content' => (String) params.get('content')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Get all deals for a user
     * This endpoint is used to get all deals for a user
     * @param r_begin Begin (required)
     * @param duration Duration (required)
     * @param all All (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentAllDealsGet(Map<String, Object> params) {
        client.assertNotNull(params.get('r_begin'), 'r_begin');
        client.assertNotNull(params.get('duration'), 'duration');
        client.assertNotNull(params.get('all'), 'all');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('begin', (String) params.get('r_begin')));
        query.addAll(client.makeParam('duration', (String) params.get('duration')));
        query.addAll(client.makeParam('all', (String) params.get('all')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/all-deals', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Get content bandwidth
     * This endpoint returns content bandwidth
     * @param content Content ID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentBwUsageContentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('content'), 'content');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/bw-usage/{content}', '',
            query, form,
            new Map<String, Object>{
                'content' => (String) params.get('content')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Add a new content
     * This endpoint adds a new content
     * @param req Content (required)
     * @param ignoreDupes Ignore Dupes (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentCreatePost(Map<String, Object> params) {
        client.assertNotNull(params.get('req'), 'req');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('ignore-dupes', (String) params.get('ignoreDupes')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/content/create',
            (SwagUtilContentCreateBody) params.get('req'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Content with deals
     * This endpoint lists all content with deals
     * @param r_limit Limit (optional)
     * @param offset Offset (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentDealsGet(Map<String, Object> params) {
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (Integer) params.get('r_limit')));
        query.addAll(client.makeParam('offset', (Integer) params.get('offset')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/deals', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Ensure Replication
     * This endpoint ensures that the content is replicated to the specified number of providers
     * @param datacid Data CID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentEnsureReplicationDatacidGet(Map<String, Object> params) {
        client.assertNotNull(params.get('datacid'), 'datacid');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/ensure-replication/{datacid}', '',
            query, form,
            new Map<String, Object>{
                'datacid' => (String) params.get('datacid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * List all failures for a content
     * This endpoint returns all failures for a content
     * @param content Content ID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentFailuresContentGet(Map<String, Object> params) {
        client.assertNotNull(params.get('content'), 'content');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/failures/{content}', '',
            query, form,
            new Map<String, Object>{
                'content' => (String) params.get('content')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Content
     * This endpoint returns a content by its ID
     * @param id Content ID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/{id}', '',
            query, form,
            new Map<String, Object>{
                'id' => (Integer) params.get('id')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Import a deal
     * This endpoint imports a deal into the shuttle.
     * @param body Import a deal (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentImportdealPost(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/content/importdeal',
            (SwagMainImportDealBody) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * List all pinned content
     * This endpoint lists all content
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentListGet() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/list', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Read content
     * This endpoint reads content from the blockstore
     * @param cont CID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentReadContGet(Map<String, Object> params) {
        client.assertNotNull(params.get('cont'), 'cont');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/read/{cont}', '',
            query, form,
            new Map<String, Object>{
                'cont' => (String) params.get('cont')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Get staging zone for user
     * This endpoint is used to get staging zone for user.
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentStagingZonesGet() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/staging-zones', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Get content statistics
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
     * @param r_limit limit (required)
     * @param offset offset (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentStatsGet(Map<String, Object> params) {
        client.assertNotNull(params.get('r_limit'), 'r_limit');
        client.assertNotNull(params.get('offset'), 'offset');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('limit', (String) params.get('r_limit')));
        query.addAll(client.makeParam('offset', (String) params.get('offset')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/stats', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Content Status
     * This endpoint returns the status of a content
     * @param id Content ID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String contentStatusIdGet(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/content/status/{id}', '',
            query, form,
            new Map<String, Object>{
                'id' => (Integer) params.get('id')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
}
