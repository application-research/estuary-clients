/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagPeeringApi {
    SwagClient client;

    public SwagPeeringApi(SwagClient client) {
        this.client = client;
    }

    public SwagPeeringApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Remove peers on Peering Service
     * This endpoint can be used to remove a Peer from the Peering Service
     * @throws Swagger.ApiException if fails to make API call
     */
    public void adminPeeringPeersDelete() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'DELETE', '/admin/peering/peers', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * List all Peering peers
     * This endpoint can be used to list all peers on Peering Service
     * @throws Swagger.ApiException if fails to make API call
     */
    public void adminPeeringPeersGet() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'GET', '/admin/peering/peers', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * Add peers on Peering Service
     * This endpoint can be used to add a Peer from the Peering Service
     * @throws Swagger.ApiException if fails to make API call
     */
    public void adminPeeringPeersPost() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'POST', '/admin/peering/peers', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * Start Peering
     * This endpoint can be used to start the Peering Service
     * @throws Swagger.ApiException if fails to make API call
     */
    public void adminPeeringStartPost() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'POST', '/admin/peering/start', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * Check Peering Status
     * This endpoint can be used to check the Peering status
     * @throws Swagger.ApiException if fails to make API call
     */
    public void adminPeeringStatusGet() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'GET', '/admin/peering/status', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * Stop Peering
     * This endpoint can be used to stop the Peering Service
     * @throws Swagger.ApiException if fails to make API call
     */
    public void adminPeeringStopPost() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'POST', '/admin/peering/stop', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
}
