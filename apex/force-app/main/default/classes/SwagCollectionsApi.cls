/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagCollectionsApi {
    SwagClient client;

    public SwagCollectionsApi(SwagClient client) {
        this.client = client;
    }

    public SwagCollectionsApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Produce a CID of the collection contents
     * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
     * @param coluuid coluuid (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidCommitPost(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/collections/{coluuid}/commit', '',
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Deletes a content from a collection
     * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
     * @param coluuid Collection ID (required)
     * @param contentid Content ID (required)
     * @param body Variable to use when filtering for files (must be either \&#39;path\&#39; or \&#39;content_id\&#39;) (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidContentsDelete(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        client.assertNotNull(params.get('contentid'), 'contentid');
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'DELETE', '/collections/{coluuid}/contents',
            (SwagMainDeleteContentFromCollectionB) params.get('body'),
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid'),
                'contentid' => (String) params.get('contentid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Deletes a collection
     * This endpoint is used to delete an existing collection.
     * @param coluuid Collection ID (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidDelete(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'DELETE', '/collections/{coluuid}', '',
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Get contents in a collection
     * This endpoint is used to get contents in a collection. If no colpath query param is passed
     * @param coluuid coluuid (required)
     * @param dir Directory (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidGet(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('dir', (String) params.get('dir')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/collections/{coluuid}', '',
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Add contents to a collection
     * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
     * @param coluuid coluuid (required)
     * @param contentIDs Content IDs to add to collection (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidPost(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        client.assertNotNull(params.get('contentIDs'), 'contentIDs');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/collections/{coluuid}',
            (List<Integer>) params.get('contentIDs'),
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Add a file to a collection
     * This endpoint adds a file to a collection
     * @param coluuid Collection ID (required)
     * @param content Content (required)
     * @param path Path to file (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsFsAddPost(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        client.assertNotNull(params.get('content'), 'content');
        client.assertNotNull(params.get('path'), 'path');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('coluuid', (String) params.get('coluuid')));
        query.addAll(client.makeParam('content', (String) params.get('content')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/collections/fs/add', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * List all collections
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @return List<List<SwagCollectionsCollection>>
     * @throws Swagger.ApiException if fails to make API call
     */
    public List<List<SwagCollectionsCollection>> collectionsGet() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (List<List<SwagCollectionsCollection>>) client.invoke(
            'GET', '/collections/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            List<List<SwagCollectionsCollection>>.class
        );
    }
    /**
     * Create a new collection
     * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
     * @param body Collection name and description (required)
     * @return SwagCollectionsCollection
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagCollectionsCollection collectionsPost(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagCollectionsCollection) client.invoke(
            'POST', '/collections/',
            (SwagMainCreateCollectionBody) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            SwagCollectionsCollection.class
        );
    }
}
