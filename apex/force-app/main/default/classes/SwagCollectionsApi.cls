/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagCollectionsApi {
    SwagClient client;

    public SwagCollectionsApi(SwagClient client) {
        this.client = client;
    }

    public SwagCollectionsApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * Produce a CID of the collection contents
     * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
     * @param coluuid coluuid (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidCommitPost(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'POST', '/collections/{coluuid}/commit', '',
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Deletes a collection
     * This endpoint is used to delete an existing collection.
     * @param coluuid Collection ID (required)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void collectionsColuuidDelete(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'DELETE', '/collections/{coluuid}', '',
            query, form,
            new Map<String, Object>{
                'coluuid' => (String) params.get('coluuid')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * Get contents in a collection
     * This endpoint is used to get contents in a collection. If no colpath query param is passed
     * @param coluuid Collection UUID (required)
     * @param dir Directory (optional)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String collectionsColuuidGet(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('coluuid', (String) params.get('coluuid')));
        query.addAll(client.makeParam('dir', (String) params.get('dir')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/collections/{coluuid}', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            String.class
        );
    }
    /**
     * Add contents to a collection
     * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
     * @param body Content IDs to add to collection (required)
     * @return Map<String, String>
     * @throws Swagger.ApiException if fails to make API call
     */
    public Map<String, String> collectionsColuuidPost(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (Map<String, String>) client.invoke(
            'POST', '/collections/{coluuid}',
            (List<Integer>) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            Map<String, String>.class
        );
    }
    /**
     * Add a file to a collection
     * This endpoint adds a file to a collection
     * @param coluuid Collection ID (required)
     * @param content Content (required)
     * @param path Path to file (required)
     * @throws Swagger.ApiException if fails to make API call
     */
    public void collectionsFsAddPost(Map<String, Object> params) {
        client.assertNotNull(params.get('coluuid'), 'coluuid');
        client.assertNotNull(params.get('content'), 'content');
        client.assertNotNull(params.get('path'), 'path');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('coluuid', (String) params.get('coluuid')));
        query.addAll(client.makeParam('content', (String) params.get('content')));
        query.addAll(client.makeParam('path', (String) params.get('path')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        client.invoke(
            'POST', '/collections/fs/add', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            null
        );
    }
    /**
     * List all collections
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @param id User ID (required)
     * @return List<SwagMainCollection>
     * @throws Swagger.ApiException if fails to make API call
     */
    public List<SwagMainCollection> collectionsGet(Map<String, Object> params) {
        client.assertNotNull(params.get('id'), 'id');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (List<SwagMainCollection>) client.invoke(
            'GET', '/collections/', '',
            query, form,
            new Map<String, Object>{
                'id' => (Integer) params.get('id')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            List<SwagMainCollection>.class
        );
    }
    /**
     * Create a new collection
     * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
     * @param body Collection name and description (required)
     * @return SwagMainCollection
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagMainCollection collectionsPost(Map<String, Object> params) {
        client.assertNotNull(params.get('body'), 'body');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagMainCollection) client.invoke(
            'POST', '/collections/',
            (SwagMainCreateCollectionBody) params.get('body'),
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String> { 'bearerAuth' },
            SwagMainCollection.class
        );
    }
}
