=begin
#Estuary API

#This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class ContentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Car object
    # This endpoint is used to add a car object to the network. The object can be a file or a directory.
    # @param body Car
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename Filename
    # @option opts [String] :commp Commp
    # @option opts [String] :size Size
    # @return [nil]
    def content_add_car_post(body, opts = {})
      content_add_car_post_with_http_info(body, opts)
      nil
    end

    # Add Car object
    # This endpoint is used to add a car object to the network. The object can be a file or a directory.
    # @param body Car
    # @param [Hash] opts the optional parameters
    # @option opts [String] :filename Filename
    # @option opts [String] :commp Commp
    # @option opts [String] :size Size
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_add_car_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_add_car_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ContentApi.content_add_car_post"
      end
      # resource path
      local_var_path = '/content/add-car'

      # query parameters
      query_params = {}
      query_params[:'filename'] = opts[:'filename'] if !opts[:'filename'].nil?
      query_params[:'commp'] = opts[:'commp'] if !opts[:'commp'].nil?
      query_params[:'size'] = opts[:'size'] if !opts[:'size'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_add_car_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add IPFS object
    # This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
    # @param body IPFS Body
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_add_ipfs_post(body, opts = {})
      content_add_ipfs_post_with_http_info(body, opts)
      nil
    end

    # Add IPFS object
    # This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
    # @param body IPFS Body
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_add_ipfs_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_add_ipfs_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ContentApi.content_add_ipfs_post"
      end
      # resource path
      local_var_path = '/content/add-ipfs'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_add_ipfs_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add new content
    # This endpoint is used to upload new content.
    # @param file File to upload
    # @param coluuid Collection UUID
    # @param dir Directory
    # @param [Hash] opts the optional parameters
    # @return [UtilContentAddResponse]
    def content_add_post(file, coluuid, dir, opts = {})
      data, _status_code, _headers = content_add_post_with_http_info(file, coluuid, dir, opts)
      data
    end

    # Add new content
    # This endpoint is used to upload new content.
    # @param file File to upload
    # @param coluuid Collection UUID
    # @param dir Directory
    # @param [Hash] opts the optional parameters
    # @return [Array<(UtilContentAddResponse, Fixnum, Hash)>] UtilContentAddResponse data, response status code and response headers
    def content_add_post_with_http_info(file, coluuid, dir, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_add_post ...'
      end
      # verify the required parameter 'file' is set
      if @api_client.config.client_side_validation && file.nil?
        fail ArgumentError, "Missing the required parameter 'file' when calling ContentApi.content_add_post"
      end
      # verify the required parameter 'coluuid' is set
      if @api_client.config.client_side_validation && coluuid.nil?
        fail ArgumentError, "Missing the required parameter 'coluuid' when calling ContentApi.content_add_post"
      end
      # verify the required parameter 'dir' is set
      if @api_client.config.client_side_validation && dir.nil?
        fail ArgumentError, "Missing the required parameter 'dir' when calling ContentApi.content_add_post"
      end
      # resource path
      local_var_path = '/content/add'.sub('{' + 'coluuid' + '}', coluuid.to_s).sub('{' + 'dir' + '}', dir.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params['file'] = file

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'UtilContentAddResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get aggregated content stats
    # This endpoint returns aggregated content stats
    # @param content Content ID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def content_aggregated_content_get(content, opts = {})
      data, _status_code, _headers = content_aggregated_content_get_with_http_info(content, opts)
      data
    end

    # Get aggregated content stats
    # This endpoint returns aggregated content stats
    # @param content Content ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def content_aggregated_content_get_with_http_info(content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_aggregated_content_get ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling ContentApi.content_aggregated_content_get"
      end
      # resource path
      local_var_path = '/content/aggregated/{content}'.sub('{' + 'content' + '}', content.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_aggregated_content_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all deals for a user
    # This endpoint is used to get all deals for a user
    # @param _begin Begin
    # @param duration Duration
    # @param all All
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_all_deals_get(_begin, duration, all, opts = {})
      content_all_deals_get_with_http_info(_begin, duration, all, opts)
      nil
    end

    # Get all deals for a user
    # This endpoint is used to get all deals for a user
    # @param _begin Begin
    # @param duration Duration
    # @param all All
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_all_deals_get_with_http_info(_begin, duration, all, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_all_deals_get ...'
      end
      # verify the required parameter '_begin' is set
      if @api_client.config.client_side_validation && _begin.nil?
        fail ArgumentError, "Missing the required parameter '_begin' when calling ContentApi.content_all_deals_get"
      end
      # verify the required parameter 'duration' is set
      if @api_client.config.client_side_validation && duration.nil?
        fail ArgumentError, "Missing the required parameter 'duration' when calling ContentApi.content_all_deals_get"
      end
      # verify the required parameter 'all' is set
      if @api_client.config.client_side_validation && all.nil?
        fail ArgumentError, "Missing the required parameter 'all' when calling ContentApi.content_all_deals_get"
      end
      # resource path
      local_var_path = '/content/all-deals'

      # query parameters
      query_params = {}
      query_params[:'begin'] = _begin
      query_params[:'duration'] = duration
      query_params[:'all'] = all

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_all_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get content bandwidth
    # This endpoint returns content bandwidth
    # @param content Content ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_bw_usage_content_get(content, opts = {})
      content_bw_usage_content_get_with_http_info(content, opts)
      nil
    end

    # Get content bandwidth
    # This endpoint returns content bandwidth
    # @param content Content ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_bw_usage_content_get_with_http_info(content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_bw_usage_content_get ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling ContentApi.content_bw_usage_content_get"
      end
      # resource path
      local_var_path = '/content/bw-usage/{content}'.sub('{' + 'content' + '}', content.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_bw_usage_content_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a new content
    # This endpoint adds a new content
    # @param body Content
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_create_post(body, opts = {})
      content_create_post_with_http_info(body, opts)
      nil
    end

    # Add a new content
    # This endpoint adds a new content
    # @param body Content
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_create_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_create_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ContentApi.content_create_post"
      end
      # resource path
      local_var_path = '/content/create'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_create_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Content with deals
    # This endpoint lists all content with deals
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit
    # @option opts [Integer] :offset Offset
    # @return [nil]
    def content_deals_get(opts = {})
      content_deals_get_with_http_info(opts)
      nil
    end

    # Content with deals
    # This endpoint lists all content with deals
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Limit
    # @option opts [Integer] :offset Offset
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_deals_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_deals_get ...'
      end
      # resource path
      local_var_path = '/content/deals'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_deals_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Ensure Replication
    # This endpoint ensures that the content is replicated to the specified number of providers
    # @param datacid Data CID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_ensure_replication_datacid_get(datacid, opts = {})
      content_ensure_replication_datacid_get_with_http_info(datacid, opts)
      nil
    end

    # Ensure Replication
    # This endpoint ensures that the content is replicated to the specified number of providers
    # @param datacid Data CID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_ensure_replication_datacid_get_with_http_info(datacid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_ensure_replication_datacid_get ...'
      end
      # verify the required parameter 'datacid' is set
      if @api_client.config.client_side_validation && datacid.nil?
        fail ArgumentError, "Missing the required parameter 'datacid' when calling ContentApi.content_ensure_replication_datacid_get"
      end
      # resource path
      local_var_path = '/content/ensure-replication/{datacid}'.sub('{' + 'datacid' + '}', datacid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_ensure_replication_datacid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all failures for a content
    # This endpoint returns all failures for a content
    # @param content Content ID
    # @param [Hash] opts the optional parameters
    # @return [String]
    def content_failures_content_get(content, opts = {})
      data, _status_code, _headers = content_failures_content_get_with_http_info(content, opts)
      data
    end

    # List all failures for a content
    # This endpoint returns all failures for a content
    # @param content Content ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def content_failures_content_get_with_http_info(content, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_failures_content_get ...'
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling ContentApi.content_failures_content_get"
      end
      # resource path
      local_var_path = '/content/failures/{content}'.sub('{' + 'content' + '}', content.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_failures_content_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Import a deal
    # This endpoint imports a deal into the shuttle.
    # @param body Import a deal
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_importdeal_post(body, opts = {})
      content_importdeal_post_with_http_info(body, opts)
      nil
    end

    # Import a deal
    # This endpoint imports a deal into the shuttle.
    # @param body Import a deal
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_importdeal_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_importdeal_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ContentApi.content_importdeal_post"
      end
      # resource path
      local_var_path = '/content/importdeal'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_importdeal_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all pinned content
    # This endpoint lists all content
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def content_list_get(opts = {})
      data, _status_code, _headers = content_list_get_with_http_info(opts)
      data
    end

    # List all pinned content
    # This endpoint lists all content
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def content_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_list_get ...'
      end
      # resource path
      local_var_path = '/content/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Read content
    # This endpoint reads content from the blockstore
    # @param cont CID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_read_cont_get(cont, opts = {})
      content_read_cont_get_with_http_info(cont, opts)
      nil
    end

    # Read content
    # This endpoint reads content from the blockstore
    # @param cont CID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_read_cont_get_with_http_info(cont, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_read_cont_get ...'
      end
      # verify the required parameter 'cont' is set
      if @api_client.config.client_side_validation && cont.nil?
        fail ArgumentError, "Missing the required parameter 'cont' when calling ContentApi.content_read_cont_get"
      end
      # resource path
      local_var_path = '/content/read/{cont}'.sub('{' + 'cont' + '}', cont.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_read_cont_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get staging zone for user
    # This endpoint is used to get staging zone for user.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_staging_zones_get(opts = {})
      content_staging_zones_get_with_http_info(opts)
      nil
    end

    # Get staging zone for user
    # This endpoint is used to get staging zone for user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_staging_zones_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_staging_zones_get ...'
      end
      # resource path
      local_var_path = '/content/staging-zones'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_staging_zones_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get content statistics
    # This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
    # @param limit limit
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_stats_get(limit, opts = {})
      content_stats_get_with_http_info(limit, opts)
      nil
    end

    # Get content statistics
    # This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
    # @param limit limit
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_stats_get_with_http_info(limit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_stats_get ...'
      end
      # verify the required parameter 'limit' is set
      if @api_client.config.client_side_validation && limit.nil?
        fail ArgumentError, "Missing the required parameter 'limit' when calling ContentApi.content_stats_get"
      end
      # resource path
      local_var_path = '/content/stats'.sub('{' + 'limit' + '}', limit.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_stats_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Content Status
    # This endpoint returns the status of a content
    # @param id Content ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def content_status_id_get(id, opts = {})
      content_status_id_get_with_http_info(id, opts)
      nil
    end

    # Content Status
    # This endpoint returns the status of a content
    # @param id Content ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def content_status_id_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ContentApi.content_status_id_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ContentApi.content_status_id_get"
      end
      # resource path
      local_var_path = '/content/status/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ContentApi#content_status_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
