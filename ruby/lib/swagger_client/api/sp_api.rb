=begin
#Estuary API

#This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.36
=end

module SwaggerClient
  class SpApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Claim Storage Provider
    # This endpoint lets a user claim a storage provider
    # @param body Claim Storage Provider Body
    # @param [Hash] opts the optional parameters
    # @return [GithubComApplicationResearchEstuaryApiV2ClaimResponse]
    def storage_providers_claim_post(body, opts = {})
      data, _status_code, _headers = storage_providers_claim_post_with_http_info(body, opts)
      data
    end

    # Claim Storage Provider
    # This endpoint lets a user claim a storage provider
    # @param body Claim Storage Provider Body
    # @param [Hash] opts the optional parameters
    # @return [Array<(GithubComApplicationResearchEstuaryApiV2ClaimResponse, Integer, Hash)>] GithubComApplicationResearchEstuaryApiV2ClaimResponse data, response status code and response headers
    def storage_providers_claim_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_claim_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SpApi.storage_providers_claim_post"
      end
      # resource path
      local_var_path = '/storage-providers/claim'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'GithubComApplicationResearchEstuaryApiV2ClaimResponse' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_claim_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Claim Storage Provider
    # This endpoint lets a user get the message in order to claim a storage provider
    # @param sp Storage Provider claim message
    # @param [Hash] opts the optional parameters
    # @return [GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse]
    def storage_providers_claim_sp_get(sp, opts = {})
      data, _status_code, _headers = storage_providers_claim_sp_get_with_http_info(sp, opts)
      data
    end

    # Get Claim Storage Provider
    # This endpoint lets a user get the message in order to claim a storage provider
    # @param sp Storage Provider claim message
    # @param [Hash] opts the optional parameters
    # @return [Array<(GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse, Integer, Hash)>] GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse data, response status code and response headers
    def storage_providers_claim_sp_get_with_http_info(sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_claim_sp_get ...'
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_claim_sp_get"
      end
      # resource path
      local_var_path = '/storage-providers/claim/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_claim_sp_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all storage providers deals
    # This endpoint returns all storage providers deals
    # @param sp Filter by storage provider
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ignore_failed Ignore Failed
    # @return [String]
    def storage_providers_deals_sp_get(sp, opts = {})
      data, _status_code, _headers = storage_providers_deals_sp_get_with_http_info(sp, opts)
      data
    end

    # Get all storage providers deals
    # This endpoint returns all storage providers deals
    # @param sp Filter by storage provider
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ignore_failed Ignore Failed
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def storage_providers_deals_sp_get_with_http_info(sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_deals_sp_get ...'
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_deals_sp_get"
      end
      # resource path
      local_var_path = '/storage-providers/deals/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ignore-failed'] = opts[:'ignore_failed'] if !opts[:'ignore_failed'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_deals_sp_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all storage providers
    # This endpoint returns all storage providers
    # @param sp Filter by storage provider
    # @param [Hash] opts the optional parameters
    # @return [String]
    def storage_providers_failures_sp_get(sp, opts = {})
      data, _status_code, _headers = storage_providers_failures_sp_get_with_http_info(sp, opts)
      data
    end

    # Get all storage providers
    # This endpoint returns all storage providers
    # @param sp Filter by storage provider
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def storage_providers_failures_sp_get_with_http_info(sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_failures_sp_get ...'
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_failures_sp_get"
      end
      # resource path
      local_var_path = '/storage-providers/failures/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_failures_sp_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get all storage providers
    # This endpoint returns all storage providers
    # @param [Hash] opts the optional parameters
    # @return [Array<ApiStorageProviderResp>]
    def storage_providers_get(opts = {})
      data, _status_code, _headers = storage_providers_get_with_http_info(opts)
      data
    end

    # Get all storage providers
    # This endpoint returns all storage providers
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ApiStorageProviderResp>, Integer, Hash)>] Array<ApiStorageProviderResp> data, response status code and response headers
    def storage_providers_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_get ...'
      end
      # resource path
      local_var_path = '/storage-providers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'Array<ApiStorageProviderResp>' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Storage Provider Info
    # This endpoint lets a user set storage provider info.
    # @param body Storage Provider set info params
    # @param sp Storage Provider to set info for
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def storage_providers_set_info_sp_put(body, sp, opts = {})
      storage_providers_set_info_sp_put_with_http_info(body, sp, opts)
      nil
    end

    # Set Storage Provider Info
    # This endpoint lets a user set storage provider info.
    # @param body Storage Provider set info params
    # @param sp Storage Provider to set info for
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def storage_providers_set_info_sp_put_with_http_info(body, sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_set_info_sp_put ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SpApi.storage_providers_set_info_sp_put"
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_set_info_sp_put"
      end
      # resource path
      local_var_path = '/storage-providers/set-info/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_set_info_sp_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get storage provider stats
    # This endpoint returns storage provider stats
    # @param sp Filter by storage provider
    # @param [Hash] opts the optional parameters
    # @return [String]
    def storage_providers_stats_sp_get(sp, opts = {})
      data, _status_code, _headers = storage_providers_stats_sp_get_with_http_info(sp, opts)
      data
    end

    # Get storage provider stats
    # This endpoint returns storage provider stats
    # @param sp Filter by storage provider
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def storage_providers_stats_sp_get_with_http_info(sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_stats_sp_get ...'
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_stats_sp_get"
      end
      # resource path
      local_var_path = '/storage-providers/stats/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'String' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_stats_sp_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Suspend Storage Provider
    # This endpoint lets a user suspend a storage provider.
    # @param body Suspend Storage Provider Body
    # @param sp Storage Provider to suspend
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def storage_providers_suspend_sp_post(body, sp, opts = {})
      data, _status_code, _headers = storage_providers_suspend_sp_post_with_http_info(body, sp, opts)
      data
    end

    # Suspend Storage Provider
    # This endpoint lets a user suspend a storage provider.
    # @param body Suspend Storage Provider Body
    # @param sp Storage Provider to suspend
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def storage_providers_suspend_sp_post_with_http_info(body, sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_suspend_sp_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling SpApi.storage_providers_suspend_sp_post"
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_suspend_sp_post"
      end
      # resource path
      local_var_path = '/storage-providers/suspend/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['*/*'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'Hash<String, String>' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_suspend_sp_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Unuspend Storage Provider
    # This endpoint lets a user unsuspend a Storage Provider.
    # @param sp Storage Provider to unsuspend
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def storage_providers_unsuspend_sp_put(sp, opts = {})
      storage_providers_unsuspend_sp_put_with_http_info(sp, opts)
      nil
    end

    # Unuspend Storage Provider
    # This endpoint lets a user unsuspend a Storage Provider.
    # @param sp Storage Provider to unsuspend
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def storage_providers_unsuspend_sp_put_with_http_info(sp, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: SpApi.storage_providers_unsuspend_sp_put ...'
      end
      # verify the required parameter 'sp' is set
      if @api_client.config.client_side_validation && sp.nil?
        fail ArgumentError, "Missing the required parameter 'sp' when calling SpApi.storage_providers_unsuspend_sp_put"
      end
      # resource path
      local_var_path = '/storage-providers/unsuspend/{sp}'.sub('{' + 'sp' + '}', sp.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: SpApi#storage_providers_unsuspend_sp_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
