=begin
#Estuary API

#This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 3.0.40
=end

module SwaggerClient
  class PinningApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # List all pin status objects
    # This endpoint lists all pin status objects
    # @param [Hash] opts the optional parameters
    # @return [PinnerIpfsListPinStatusResponse]
    def pinning_pins_get(opts = {})
      data, _status_code, _headers = pinning_pins_get_with_http_info(opts)
      data
    end

    # List all pin status objects
    # This endpoint lists all pin status objects
    # @param [Hash] opts the optional parameters
    # @return [Array<(PinnerIpfsListPinStatusResponse, Integer, Hash)>] PinnerIpfsListPinStatusResponse data, response status code and response headers
    def pinning_pins_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinningApi.pinning_pins_get ...'
      end
      # resource path
      local_var_path = '/pinning/pins'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PinnerIpfsListPinStatusResponse' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinningApi#pinning_pins_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a pinned object
    # This endpoint deletes a pinned object.
    # @param pinid Pin ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def pinning_pins_pinid_delete(pinid, opts = {})
      pinning_pins_pinid_delete_with_http_info(pinid, opts)
      nil
    end

    # Delete a pinned object
    # This endpoint deletes a pinned object.
    # @param pinid Pin ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def pinning_pins_pinid_delete_with_http_info(pinid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinningApi.pinning_pins_pinid_delete ...'
      end
      # verify the required parameter 'pinid' is set
      if @api_client.config.client_side_validation && pinid.nil?
        fail ArgumentError, "Missing the required parameter 'pinid' when calling PinningApi.pinning_pins_pinid_delete"
      end
      # resource path
      local_var_path = '/pinning/pins/{pinid}'.sub('{' + 'pinid' + '}', pinid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinningApi#pinning_pins_pinid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a pin status object
    # This endpoint returns a pin status object.
    # @param pinid cid
    # @param [Hash] opts the optional parameters
    # @return [PinnerIpfsPinStatusResponse]
    def pinning_pins_pinid_get(pinid, opts = {})
      data, _status_code, _headers = pinning_pins_pinid_get_with_http_info(pinid, opts)
      data
    end

    # Get a pin status object
    # This endpoint returns a pin status object.
    # @param pinid cid
    # @param [Hash] opts the optional parameters
    # @return [Array<(PinnerIpfsPinStatusResponse, Integer, Hash)>] PinnerIpfsPinStatusResponse data, response status code and response headers
    def pinning_pins_pinid_get_with_http_info(pinid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinningApi.pinning_pins_pinid_get ...'
      end
      # verify the required parameter 'pinid' is set
      if @api_client.config.client_side_validation && pinid.nil?
        fail ArgumentError, "Missing the required parameter 'pinid' when calling PinningApi.pinning_pins_pinid_get"
      end
      # resource path
      local_var_path = '/pinning/pins/{pinid}'.sub('{' + 'pinid' + '}', pinid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      return_type = opts[:return_type] || 'PinnerIpfsPinStatusResponse' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinningApi#pinning_pins_pinid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Replace a pinned object
    # This endpoint replaces a pinned object.
    # @param body New pin
    # @param pinid Pin ID to be replaced
    # @param [Hash] opts the optional parameters
    # @return [PinnerIpfsPinStatusResponse]
    def pinning_pins_pinid_post(body, pinid, opts = {})
      data, _status_code, _headers = pinning_pins_pinid_post_with_http_info(body, pinid, opts)
      data
    end

    # Replace a pinned object
    # This endpoint replaces a pinned object.
    # @param body New pin
    # @param pinid Pin ID to be replaced
    # @param [Hash] opts the optional parameters
    # @return [Array<(PinnerIpfsPinStatusResponse, Integer, Hash)>] PinnerIpfsPinStatusResponse data, response status code and response headers
    def pinning_pins_pinid_post_with_http_info(body, pinid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinningApi.pinning_pins_pinid_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PinningApi.pinning_pins_pinid_post"
      end
      # verify the required parameter 'pinid' is set
      if @api_client.config.client_side_validation && pinid.nil?
        fail ArgumentError, "Missing the required parameter 'pinid' when calling PinningApi.pinning_pins_pinid_post"
      end
      # resource path
      local_var_path = '/pinning/pins/{pinid}'.sub('{' + 'pinid' + '}', pinid.to_s)

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PinnerIpfsPinStatusResponse' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinningApi#pinning_pins_pinid_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add and pin object
    # This endpoint adds a pin to the IPFS daemon.
    # @param body Pin Body {cid:cid, name:name}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ignore_dupes Ignore Dupes
    # @option opts [String] :overwrite Overwrite conflicting files in collections
    # @return [PinnerIpfsPinStatusResponse]
    def pinning_pins_post(body, opts = {})
      data, _status_code, _headers = pinning_pins_post_with_http_info(body, opts)
      data
    end

    # Add and pin object
    # This endpoint adds a pin to the IPFS daemon.
    # @param body Pin Body {cid:cid, name:name}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ignore_dupes Ignore Dupes
    # @option opts [String] :overwrite Overwrite conflicting files in collections
    # @return [Array<(PinnerIpfsPinStatusResponse, Integer, Hash)>] PinnerIpfsPinStatusResponse data, response status code and response headers
    def pinning_pins_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PinningApi.pinning_pins_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling PinningApi.pinning_pins_post"
      end
      # resource path
      local_var_path = '/pinning/pins'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ignore-dupes'] = opts[:'ignore_dupes'] if !opts[:'ignore_dupes'].nil?
      query_params[:'overwrite'] = opts[:'overwrite'] if !opts[:'overwrite'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(body) 

      return_type = opts[:return_type] || 'PinnerIpfsPinStatusResponse' 

      auth_names = opts[:auth_names] || ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type)

      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PinningApi#pinning_pins_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
