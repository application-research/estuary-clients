=begin
#Estuary API

#This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class AutoretrieveApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Register autoretrieve server
    # This endpoint registers a new autoretrieve server
    # @param addresses Autoretrieve&#39;s comma-separated list of addresses
    # @param pub_key Autoretrieve&#39;s public key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def admin_autoretrieve_init_post(addresses, pub_key, opts = {})
      admin_autoretrieve_init_post_with_http_info(addresses, pub_key, opts)
      nil
    end

    # Register autoretrieve server
    # This endpoint registers a new autoretrieve server
    # @param addresses Autoretrieve&#39;s comma-separated list of addresses
    # @param pub_key Autoretrieve&#39;s public key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def admin_autoretrieve_init_post_with_http_info(addresses, pub_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoretrieveApi.admin_autoretrieve_init_post ...'
      end
      # verify the required parameter 'addresses' is set
      if @api_client.config.client_side_validation && addresses.nil?
        fail ArgumentError, "Missing the required parameter 'addresses' when calling AutoretrieveApi.admin_autoretrieve_init_post"
      end
      # verify the required parameter 'pub_key' is set
      if @api_client.config.client_side_validation && pub_key.nil?
        fail ArgumentError, "Missing the required parameter 'pub_key' when calling AutoretrieveApi.admin_autoretrieve_init_post"
      end
      # resource path
      local_var_path = '/admin/autoretrieve/init'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pub_key)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoretrieveApi#admin_autoretrieve_init_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List autoretrieve servers
    # This endpoint lists all registered autoretrieve servers
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def admin_autoretrieve_list_get(opts = {})
      admin_autoretrieve_list_get_with_http_info(opts)
      nil
    end

    # List autoretrieve servers
    # This endpoint lists all registered autoretrieve servers
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def admin_autoretrieve_list_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoretrieveApi.admin_autoretrieve_list_get ...'
      end
      # resource path
      local_var_path = '/admin/autoretrieve/list'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoretrieveApi#admin_autoretrieve_list_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Marks autoretrieve server as up
    # This endpoint updates the lastConnection field for autoretrieve
    # @param token Autoretrieve&#39;s auth token
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def autoretrieve_heartbeat_post(token, opts = {})
      autoretrieve_heartbeat_post_with_http_info(token, opts)
      nil
    end

    # Marks autoretrieve server as up
    # This endpoint updates the lastConnection field for autoretrieve
    # @param token Autoretrieve&#39;s auth token
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def autoretrieve_heartbeat_post_with_http_info(token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: AutoretrieveApi.autoretrieve_heartbeat_post ...'
      end
      # verify the required parameter 'token' is set
      if @api_client.config.client_side_validation && token.nil?
        fail ArgumentError, "Missing the required parameter 'token' when calling AutoretrieveApi.autoretrieve_heartbeat_post"
      end
      # resource path
      local_var_path = '/autoretrieve/heartbeat'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'token'] = token

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: AutoretrieveApi#autoretrieve_heartbeat_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
