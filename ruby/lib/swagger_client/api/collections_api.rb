=begin
#Estuary API

#This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.28

=end

require 'uri'

module SwaggerClient
  class CollectionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Produce a CID of the collection contents
    # This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
    # @param coluuid coluuid
    # @param [Hash] opts the optional parameters
    # @return [String]
    def collections_coluuid_commit_post(coluuid, opts = {})
      data, _status_code, _headers = collections_coluuid_commit_post_with_http_info(coluuid, opts)
      data
    end

    # Produce a CID of the collection contents
    # This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
    # @param coluuid coluuid
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def collections_coluuid_commit_post_with_http_info(coluuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_coluuid_commit_post ...'
      end
      # verify the required parameter 'coluuid' is set
      if @api_client.config.client_side_validation && coluuid.nil?
        fail ArgumentError, "Missing the required parameter 'coluuid' when calling CollectionsApi.collections_coluuid_commit_post"
      end
      # resource path
      local_var_path = '/collections/{coluuid}/commit'.sub('{' + 'coluuid' + '}', coluuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_coluuid_commit_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Deletes a collection
    # This endpoint is used to delete an existing collection.
    # @param coluuid Collection ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collections_coluuid_delete(coluuid, opts = {})
      collections_coluuid_delete_with_http_info(coluuid, opts)
      nil
    end

    # Deletes a collection
    # This endpoint is used to delete an existing collection.
    # @param coluuid Collection ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def collections_coluuid_delete_with_http_info(coluuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_coluuid_delete ...'
      end
      # verify the required parameter 'coluuid' is set
      if @api_client.config.client_side_validation && coluuid.nil?
        fail ArgumentError, "Missing the required parameter 'coluuid' when calling CollectionsApi.collections_coluuid_delete"
      end
      # resource path
      local_var_path = '/collections/{coluuid}'.sub('{' + 'coluuid' + '}', coluuid.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_coluuid_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get contents in a collection
    # This endpoint is used to get contents in a collection. If no colpath query param is passed
    # @param coluuid Collection UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dir Directory
    # @return [String]
    def collections_coluuid_get(coluuid, opts = {})
      data, _status_code, _headers = collections_coluuid_get_with_http_info(coluuid, opts)
      data
    end

    # Get contents in a collection
    # This endpoint is used to get contents in a collection. If no colpath query param is passed
    # @param coluuid Collection UUID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :dir Directory
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def collections_coluuid_get_with_http_info(coluuid, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_coluuid_get ...'
      end
      # verify the required parameter 'coluuid' is set
      if @api_client.config.client_side_validation && coluuid.nil?
        fail ArgumentError, "Missing the required parameter 'coluuid' when calling CollectionsApi.collections_coluuid_get"
      end
      # resource path
      local_var_path = '/collections/{coluuid}'

      # query parameters
      query_params = {}
      query_params[:'coluuid'] = coluuid
      query_params[:'dir'] = opts[:'dir'] if !opts[:'dir'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_coluuid_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add contents to a collection
    # This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
    # @param body Content IDs to add to collection
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def collections_coluuid_post(body, opts = {})
      data, _status_code, _headers = collections_coluuid_post_with_http_info(body, opts)
      data
    end

    # Add contents to a collection
    # This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
    # @param body Content IDs to add to collection
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Fixnum, Hash)>] Hash<String, String> data, response status code and response headers
    def collections_coluuid_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_coluuid_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CollectionsApi.collections_coluuid_post"
      end
      # resource path
      local_var_path = '/collections/{coluuid}'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_coluuid_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Add a file to a collection
    # This endpoint adds a file to a collection
    # @param coluuid Collection ID
    # @param content Content
    # @param path Path to file
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def collections_fs_add_post(coluuid, content, path, opts = {})
      collections_fs_add_post_with_http_info(coluuid, content, path, opts)
      nil
    end

    # Add a file to a collection
    # This endpoint adds a file to a collection
    # @param coluuid Collection ID
    # @param content Content
    # @param path Path to file
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def collections_fs_add_post_with_http_info(coluuid, content, path, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_fs_add_post ...'
      end
      # verify the required parameter 'coluuid' is set
      if @api_client.config.client_side_validation && coluuid.nil?
        fail ArgumentError, "Missing the required parameter 'coluuid' when calling CollectionsApi.collections_fs_add_post"
      end
      # verify the required parameter 'content' is set
      if @api_client.config.client_side_validation && content.nil?
        fail ArgumentError, "Missing the required parameter 'content' when calling CollectionsApi.collections_fs_add_post"
      end
      # verify the required parameter 'path' is set
      if @api_client.config.client_side_validation && path.nil?
        fail ArgumentError, "Missing the required parameter 'path' when calling CollectionsApi.collections_fs_add_post"
      end
      # resource path
      local_var_path = '/collections/fs/add'

      # query parameters
      query_params = {}
      query_params[:'coluuid'] = coluuid
      query_params[:'content'] = content
      query_params[:'path'] = path

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_fs_add_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List all collections
    # This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
    # @param id User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<MainCollection>]
    def collections_get(id, opts = {})
      data, _status_code, _headers = collections_get_with_http_info(id, opts)
      data
    end

    # List all collections
    # This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
    # @param id User ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<MainCollection>, Fixnum, Hash)>] Array<MainCollection> data, response status code and response headers
    def collections_get_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_get ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling CollectionsApi.collections_get"
      end
      # resource path
      local_var_path = '/collections/'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<MainCollection>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create a new collection
    # This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
    # @param body Collection name and description
    # @param [Hash] opts the optional parameters
    # @return [MainCollection]
    def collections_post(body, opts = {})
      data, _status_code, _headers = collections_post_with_http_info(body, opts)
      data
    end

    # Create a new collection
    # This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
    # @param body Collection name and description
    # @param [Hash] opts the optional parameters
    # @return [Array<(MainCollection, Fixnum, Hash)>] MainCollection data, response status code and response headers
    def collections_post_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: CollectionsApi.collections_post ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling CollectionsApi.collections_post"
      end
      # resource path
      local_var_path = '/collections/'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['bearerAuth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'MainCollection')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CollectionsApi#collections_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
