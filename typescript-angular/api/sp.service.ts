/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiStorageProviderResp } from '../model/apiStorageProviderResp';
import { GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse } from '../model/githubComApplicationResearchEstuaryApiV2ClaimMsgResponse';
import { GithubComApplicationResearchEstuaryApiV2ClaimResponse } from '../model/githubComApplicationResearchEstuaryApiV2ClaimResponse';
import { MinerClaimMinerBody } from '../model/minerClaimMinerBody';
import { MinerMinerSetInfoParams } from '../model/minerMinerSetInfoParams';
import { MinerSuspendMinerBody } from '../model/minerSuspendMinerBody';
import { UtilHttpError } from '../model/utilHttpError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SpService {

    protected basePath = '//api.estuary.tech/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Claim Storage Provider
     * This endpoint lets a user claim a storage provider
     * @param body Claim Storage Provider Body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersClaimPost(body: MinerClaimMinerBody, observe?: 'body', reportProgress?: boolean): Observable<GithubComApplicationResearchEstuaryApiV2ClaimResponse>;
    public storageProvidersClaimPost(body: MinerClaimMinerBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>>;
    public storageProvidersClaimPost(body: MinerClaimMinerBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GithubComApplicationResearchEstuaryApiV2ClaimResponse>>;
    public storageProvidersClaimPost(body: MinerClaimMinerBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling storageProvidersClaimPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GithubComApplicationResearchEstuaryApiV2ClaimResponse>('post',`${this.basePath}/storage-providers/claim`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Claim Storage Provider
     * This endpoint lets a user get the message in order to claim a storage provider
     * @param sp Storage Provider claim message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersClaimSpGet(sp: string, observe?: 'body', reportProgress?: boolean): Observable<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>;
    public storageProvidersClaimSpGet(sp: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>>;
    public storageProvidersClaimSpGet(sp: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>>;
    public storageProvidersClaimSpGet(sp: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersClaimSpGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>('get',`${this.basePath}/storage-providers/claim/${encodeURIComponent(String(sp))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all storage providers deals
     * This endpoint returns all storage providers deals
     * @param sp Filter by storage provider
     * @param ignoreFailed Ignore Failed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public storageProvidersDealsSpGet(sp: string, ignoreFailed?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersDealsSpGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ignoreFailed !== undefined && ignoreFailed !== null) {
            queryParameters = queryParameters.set('ignore-failed', <any>ignoreFailed);
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/storage-providers/deals/${encodeURIComponent(String(sp))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @param sp Filter by storage provider
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersFailuresSpGet(sp: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public storageProvidersFailuresSpGet(sp: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public storageProvidersFailuresSpGet(sp: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public storageProvidersFailuresSpGet(sp: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersFailuresSpGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/storage-providers/failures/${encodeURIComponent(String(sp))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersGet(observe?: 'body', reportProgress?: boolean): Observable<Array<ApiStorageProviderResp>>;
    public storageProvidersGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ApiStorageProviderResp>>>;
    public storageProvidersGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ApiStorageProviderResp>>>;
    public storageProvidersGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ApiStorageProviderResp>>('get',`${this.basePath}/storage-providers`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Storage Provider Info
     * This endpoint lets a user set storage provider info.
     * @param body Storage Provider set info params
     * @param sp Storage Provider to set info for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storageProvidersSetInfoSpPut(body: MinerMinerSetInfoParams, sp: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling storageProvidersSetInfoSpPut.');
        }

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersSetInfoSpPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/storage-providers/set-info/${encodeURIComponent(String(sp))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get storage provider stats
     * This endpoint returns storage provider stats
     * @param sp Filter by storage provider
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersStatsSpGet(sp: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public storageProvidersStatsSpGet(sp: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public storageProvidersStatsSpGet(sp: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public storageProvidersStatsSpGet(sp: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersStatsSpGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/storage-providers/stats/${encodeURIComponent(String(sp))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Suspend Storage Provider
     * This endpoint lets a user suspend a storage provider.
     * @param body Suspend Storage Provider Body
     * @param sp Storage Provider to suspend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public storageProvidersSuspendSpPost(body: MinerSuspendMinerBody, sp: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling storageProvidersSuspendSpPost.');
        }

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersSuspendSpPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: string; }>('post',`${this.basePath}/storage-providers/suspend/${encodeURIComponent(String(sp))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unuspend Storage Provider
     * This endpoint lets a user unsuspend a Storage Provider.
     * @param sp Storage Provider to unsuspend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public storageProvidersUnsuspendSpPut(sp: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public storageProvidersUnsuspendSpPut(sp: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public storageProvidersUnsuspendSpPut(sp: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public storageProvidersUnsuspendSpPut(sp: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (sp === null || sp === undefined) {
            throw new Error('Required parameter sp was null or undefined when calling storageProvidersUnsuspendSpPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('put',`${this.basePath}/storage-providers/unsuspend/${encodeURIComponent(String(sp))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
