/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { GithubComApplicationResearchEstuaryApiV1ClaimMsgResponse } from '../model/githubComApplicationResearchEstuaryApiV1ClaimMsgResponse';
import { GithubComApplicationResearchEstuaryApiV1ClaimResponse } from '../model/githubComApplicationResearchEstuaryApiV1ClaimResponse';
import { MinerClaimMinerBody } from '../model/minerClaimMinerBody';
import { MinerMinerSetInfoParams } from '../model/minerMinerSetInfoParams';
import { MinerSuspendMinerBody } from '../model/minerSuspendMinerBody';
import { UtilHttpError } from '../model/utilHttpError';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class MinerService {

    protected basePath = '//api.estuary.tech/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get Claim Miner Message
     * This endpoint lets a user get the message in order to claim a miner
     * @param miner Miner claim message
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public minerClaimMinerGet(miner: string, observe?: 'body', reportProgress?: boolean): Observable<GithubComApplicationResearchEstuaryApiV1ClaimMsgResponse>;
    public minerClaimMinerGet(miner: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GithubComApplicationResearchEstuaryApiV1ClaimMsgResponse>>;
    public minerClaimMinerGet(miner: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GithubComApplicationResearchEstuaryApiV1ClaimMsgResponse>>;
    public minerClaimMinerGet(miner: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling minerClaimMinerGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<GithubComApplicationResearchEstuaryApiV1ClaimMsgResponse>('get',`${this.basePath}/miner/claim/${encodeURIComponent(String(miner))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Claim Miner
     * This endpoint lets a user claim a miner
     * @param body Claim Miner Body
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public minerClaimPost(body: MinerClaimMinerBody, observe?: 'body', reportProgress?: boolean): Observable<GithubComApplicationResearchEstuaryApiV1ClaimResponse>;
    public minerClaimPost(body: MinerClaimMinerBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<GithubComApplicationResearchEstuaryApiV1ClaimResponse>>;
    public minerClaimPost(body: MinerClaimMinerBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<GithubComApplicationResearchEstuaryApiV1ClaimResponse>>;
    public minerClaimPost(body: MinerClaimMinerBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling minerClaimPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<GithubComApplicationResearchEstuaryApiV1ClaimResponse>('post',`${this.basePath}/miner/claim`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set Miner Info
     * This endpoint lets a user set miner info.
     * @param body Miner set info params
     * @param miner Miner to set info for
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public minerSetInfoMinerPut(body: MinerMinerSetInfoParams, miner: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public minerSetInfoMinerPut(body: MinerMinerSetInfoParams, miner: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public minerSetInfoMinerPut(body: MinerMinerSetInfoParams, miner: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public minerSetInfoMinerPut(body: MinerMinerSetInfoParams, miner: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling minerSetInfoMinerPut.');
        }

        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling minerSetInfoMinerPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: string; }>('put',`${this.basePath}/miner/set-info/${encodeURIComponent(String(miner))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Suspend Miner
     * This endpoint lets a user suspend a miner.
     * @param body Suspend Miner Body
     * @param miner Miner to suspend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public minerSuspendMinerPost(body: MinerSuspendMinerBody, miner: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public minerSuspendMinerPost(body: MinerSuspendMinerBody, miner: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public minerSuspendMinerPost(body: MinerSuspendMinerBody, miner: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public minerSuspendMinerPost(body: MinerSuspendMinerBody, miner: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling minerSuspendMinerPost.');
        }

        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling minerSuspendMinerPost.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<{ [key: string]: string; }>('post',`${this.basePath}/miner/suspend/${encodeURIComponent(String(miner))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Unuspend Miner
     * This endpoint lets a user unsuspend a miner.
     * @param miner Miner to unsuspend
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public minerUnsuspendMinerPut(miner: string, observe?: 'body', reportProgress?: boolean): Observable<{ [key: string]: string; }>;
    public minerUnsuspendMinerPut(miner: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<{ [key: string]: string; }>>;
    public minerUnsuspendMinerPut(miner: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<{ [key: string]: string; }>>;
    public minerUnsuspendMinerPut(miner: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling minerUnsuspendMinerPut.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<{ [key: string]: string; }>('put',`${this.basePath}/miner/unsuspend/${encodeURIComponent(String(miner))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all miners deals
     * This endpoint returns all miners deals
     * @param miner Filter by miner
     * @param ignoreFailed Ignore Failed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public publicMinersDealsMinerGet(miner: string, ignoreFailed?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling publicMinersDealsMinerGet.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (ignoreFailed !== undefined && ignoreFailed !== null) {
            queryParameters = queryParameters.set('ignore-failed', <any>ignoreFailed);
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/public/miners/deals/${encodeURIComponent(String(miner))}`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get miner stats
     * This endpoint returns miner stats
     * @param miner Filter by miner
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public publicMinersStatsMinerGet(miner: string, observe?: 'body', reportProgress?: boolean): Observable<string>;
    public publicMinersStatsMinerGet(miner: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<string>>;
    public publicMinersStatsMinerGet(miner: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<string>>;
    public publicMinersStatsMinerGet(miner: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (miner === null || miner === undefined) {
            throw new Error('Required parameter miner was null or undefined when calling publicMinersStatsMinerGet.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.apiKeys && this.configuration.apiKeys["Authorization"]) {
            headers = headers.set('Authorization', this.configuration.apiKeys["Authorization"]);
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<string>('get',`${this.basePath}/public/miners/stats/${encodeURIComponent(String(miner))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
