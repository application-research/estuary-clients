/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace estuary-client.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiStorageProviderResp : IEquatable<ApiStorageProviderResp>
    { 
        /// <summary>
        /// Gets or Sets Addr
        /// </summary>

        [DataMember(Name="addr")]
        public AddressAddress Addr { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Suspended
        /// </summary>

        [DataMember(Name="suspended")]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Gets or Sets SuspendedReason
        /// </summary>

        [DataMember(Name="suspendedReason")]
        public string SuspendedReason { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>

        [DataMember(Name="version")]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiStorageProviderResp {\n");
            sb.Append("  Addr: ").Append(Addr).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  SuspendedReason: ").Append(SuspendedReason).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiStorageProviderResp)obj);
        }

        /// <summary>
        /// Returns true if ApiStorageProviderResp instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiStorageProviderResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiStorageProviderResp other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Addr == other.Addr ||
                    Addr != null &&
                    Addr.Equals(other.Addr)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Suspended == other.Suspended ||
                    Suspended != null &&
                    Suspended.Equals(other.Suspended)
                ) && 
                (
                    SuspendedReason == other.SuspendedReason ||
                    SuspendedReason != null &&
                    SuspendedReason.Equals(other.SuspendedReason)
                ) && 
                (
                    Version == other.Version ||
                    Version != null &&
                    Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Addr != null)
                    hashCode = hashCode * 59 + Addr.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Suspended != null)
                    hashCode = hashCode * 59 + Suspended.GetHashCode();
                    if (SuspendedReason != null)
                    hashCode = hashCode * 59 + SuspendedReason.GetHashCode();
                    if (Version != null)
                    hashCode = hashCode * 59 + Version.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiStorageProviderResp left, ApiStorageProviderResp right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiStorageProviderResp left, ApiStorageProviderResp right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
