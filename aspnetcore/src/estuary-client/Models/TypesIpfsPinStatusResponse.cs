/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace estuary-client.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TypesIpfsPinStatusResponse : IEquatable<TypesIpfsPinStatusResponse>
    { 
        /// <summary>
        /// Gets or Sets Created
        /// </summary>

        [DataMember(Name="created")]
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Delegates
        /// </summary>

        [DataMember(Name="delegates")]
        public List<string> Delegates { get; set; }

        /// <summary>
        /// Gets or Sets Info
        /// </summary>

        [DataMember(Name="info")]
        public Object Info { get; set; }

        /// <summary>
        /// Gets or Sets Pin
        /// </summary>

        [DataMember(Name="pin")]
        public TypesIpfsPin Pin { get; set; }

        /// <summary>
        /// Gets or Sets Requestid
        /// </summary>

        [DataMember(Name="requestid")]
        public string Requestid { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypesIpfsPinStatusResponse {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Delegates: ").Append(Delegates).Append("\n");
            sb.Append("  Info: ").Append(Info).Append("\n");
            sb.Append("  Pin: ").Append(Pin).Append("\n");
            sb.Append("  Requestid: ").Append(Requestid).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TypesIpfsPinStatusResponse)obj);
        }

        /// <summary>
        /// Returns true if TypesIpfsPinStatusResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of TypesIpfsPinStatusResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypesIpfsPinStatusResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Delegates == other.Delegates ||
                    Delegates != null &&
                    Delegates.SequenceEqual(other.Delegates)
                ) && 
                (
                    Info == other.Info ||
                    Info != null &&
                    Info.Equals(other.Info)
                ) && 
                (
                    Pin == other.Pin ||
                    Pin != null &&
                    Pin.Equals(other.Pin)
                ) && 
                (
                    Requestid == other.Requestid ||
                    Requestid != null &&
                    Requestid.Equals(other.Requestid)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Delegates != null)
                    hashCode = hashCode * 59 + Delegates.GetHashCode();
                    if (Info != null)
                    hashCode = hashCode * 59 + Info.GetHashCode();
                    if (Pin != null)
                    hashCode = hashCode * 59 + Pin.GetHashCode();
                    if (Requestid != null)
                    hashCode = hashCode * 59 + Requestid.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TypesIpfsPinStatusResponse left, TypesIpfsPinStatusResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TypesIpfsPinStatusResponse left, TypesIpfsPinStatusResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
