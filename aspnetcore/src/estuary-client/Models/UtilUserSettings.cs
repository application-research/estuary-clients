/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace estuary-client.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UtilUserSettings : IEquatable<UtilUserSettings>
    { 
        /// <summary>
        /// Gets or Sets ContentAddingDisabled
        /// </summary>

        [DataMember(Name="contentAddingDisabled")]
        public bool? ContentAddingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets DealDuration
        /// </summary>

        [DataMember(Name="dealDuration")]
        public int? DealDuration { get; set; }

        /// <summary>
        /// Gets or Sets DealMakingDisabled
        /// </summary>

        [DataMember(Name="dealMakingDisabled")]
        public bool? DealMakingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets FileStagingThreshold
        /// </summary>

        [DataMember(Name="fileStagingThreshold")]
        public int? FileStagingThreshold { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>

        [DataMember(Name="flags")]
        public int? Flags { get; set; }

        /// <summary>
        /// Gets or Sets Replication
        /// </summary>

        [DataMember(Name="replication")]
        public int? Replication { get; set; }

        /// <summary>
        /// Gets or Sets UploadEndpoints
        /// </summary>

        [DataMember(Name="uploadEndpoints")]
        public List<string> UploadEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>

        [DataMember(Name="verified")]
        public bool? Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilUserSettings {\n");
            sb.Append("  ContentAddingDisabled: ").Append(ContentAddingDisabled).Append("\n");
            sb.Append("  DealDuration: ").Append(DealDuration).Append("\n");
            sb.Append("  DealMakingDisabled: ").Append(DealMakingDisabled).Append("\n");
            sb.Append("  FileStagingThreshold: ").Append(FileStagingThreshold).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Replication: ").Append(Replication).Append("\n");
            sb.Append("  UploadEndpoints: ").Append(UploadEndpoints).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UtilUserSettings)obj);
        }

        /// <summary>
        /// Returns true if UtilUserSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of UtilUserSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilUserSettings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContentAddingDisabled == other.ContentAddingDisabled ||
                    ContentAddingDisabled != null &&
                    ContentAddingDisabled.Equals(other.ContentAddingDisabled)
                ) && 
                (
                    DealDuration == other.DealDuration ||
                    DealDuration != null &&
                    DealDuration.Equals(other.DealDuration)
                ) && 
                (
                    DealMakingDisabled == other.DealMakingDisabled ||
                    DealMakingDisabled != null &&
                    DealMakingDisabled.Equals(other.DealMakingDisabled)
                ) && 
                (
                    FileStagingThreshold == other.FileStagingThreshold ||
                    FileStagingThreshold != null &&
                    FileStagingThreshold.Equals(other.FileStagingThreshold)
                ) && 
                (
                    Flags == other.Flags ||
                    Flags != null &&
                    Flags.Equals(other.Flags)
                ) && 
                (
                    Replication == other.Replication ||
                    Replication != null &&
                    Replication.Equals(other.Replication)
                ) && 
                (
                    UploadEndpoints == other.UploadEndpoints ||
                    UploadEndpoints != null &&
                    UploadEndpoints.SequenceEqual(other.UploadEndpoints)
                ) && 
                (
                    Verified == other.Verified ||
                    Verified != null &&
                    Verified.Equals(other.Verified)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContentAddingDisabled != null)
                    hashCode = hashCode * 59 + ContentAddingDisabled.GetHashCode();
                    if (DealDuration != null)
                    hashCode = hashCode * 59 + DealDuration.GetHashCode();
                    if (DealMakingDisabled != null)
                    hashCode = hashCode * 59 + DealMakingDisabled.GetHashCode();
                    if (FileStagingThreshold != null)
                    hashCode = hashCode * 59 + FileStagingThreshold.GetHashCode();
                    if (Flags != null)
                    hashCode = hashCode * 59 + Flags.GetHashCode();
                    if (Replication != null)
                    hashCode = hashCode * 59 + Replication.GetHashCode();
                    if (UploadEndpoints != null)
                    hashCode = hashCode * 59 + UploadEndpoints.GetHashCode();
                    if (Verified != null)
                    hashCode = hashCode * 59 + Verified.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UtilUserSettings left, UtilUserSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UtilUserSettings left, UtilUserSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
