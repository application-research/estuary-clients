/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace estuary-client.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TypesIpfsPin : IEquatable<TypesIpfsPin>
    { 
        /// <summary>
        /// Gets or Sets Cid
        /// </summary>

        [DataMember(Name="cid")]
        public string Cid { get; set; }

        /// <summary>
        /// Gets or Sets Meta
        /// </summary>

        [DataMember(Name="meta")]
        public Dictionary<string, Object> Meta { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Origins
        /// </summary>

        [DataMember(Name="origins")]
        public List<string> Origins { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TypesIpfsPin {\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Meta: ").Append(Meta).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TypesIpfsPin)obj);
        }

        /// <summary>
        /// Returns true if TypesIpfsPin instances are equal
        /// </summary>
        /// <param name="other">Instance of TypesIpfsPin to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TypesIpfsPin other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Cid == other.Cid ||
                    Cid != null &&
                    Cid.Equals(other.Cid)
                ) && 
                (
                    Meta == other.Meta ||
                    Meta != null &&
                    Meta.SequenceEqual(other.Meta)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Origins == other.Origins ||
                    Origins != null &&
                    Origins.SequenceEqual(other.Origins)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Cid != null)
                    hashCode = hashCode * 59 + Cid.GetHashCode();
                    if (Meta != null)
                    hashCode = hashCode * 59 + Meta.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Origins != null)
                    hashCode = hashCode * 59 + Origins.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TypesIpfsPin left, TypesIpfsPin right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TypesIpfsPin left, TypesIpfsPin right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
