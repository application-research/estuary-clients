/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace estuary-client.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UtilViewerResponse : IEquatable<UtilViewerResponse>
    { 
        /// <summary>
        /// Gets or Sets Address
        /// </summary>

        [DataMember(Name="address")]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets AuthExpiry
        /// </summary>

        [DataMember(Name="auth_expiry")]
        public string AuthExpiry { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Miners
        /// </summary>

        [DataMember(Name="miners")]
        public List<string> Miners { get; set; }

        /// <summary>
        /// Gets or Sets Perms
        /// </summary>

        [DataMember(Name="perms")]
        public int? Perms { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>

        [DataMember(Name="settings")]
        public UtilUserSettings Settings { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>

        [DataMember(Name="username")]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilViewerResponse {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AuthExpiry: ").Append(AuthExpiry).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Miners: ").Append(Miners).Append("\n");
            sb.Append("  Perms: ").Append(Perms).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UtilViewerResponse)obj);
        }

        /// <summary>
        /// Returns true if UtilViewerResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of UtilViewerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilViewerResponse other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Address == other.Address ||
                    Address != null &&
                    Address.Equals(other.Address)
                ) && 
                (
                    AuthExpiry == other.AuthExpiry ||
                    AuthExpiry != null &&
                    AuthExpiry.Equals(other.AuthExpiry)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Miners == other.Miners ||
                    Miners != null &&
                    Miners.SequenceEqual(other.Miners)
                ) && 
                (
                    Perms == other.Perms ||
                    Perms != null &&
                    Perms.Equals(other.Perms)
                ) && 
                (
                    Settings == other.Settings ||
                    Settings != null &&
                    Settings.Equals(other.Settings)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Address != null)
                    hashCode = hashCode * 59 + Address.GetHashCode();
                    if (AuthExpiry != null)
                    hashCode = hashCode * 59 + AuthExpiry.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Miners != null)
                    hashCode = hashCode * 59 + Miners.GetHashCode();
                    if (Perms != null)
                    hashCode = hashCode * 59 + Perms.GetHashCode();
                    if (Settings != null)
                    hashCode = hashCode * 59 + Settings.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UtilViewerResponse left, UtilViewerResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UtilViewerResponse left, UtilViewerResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
