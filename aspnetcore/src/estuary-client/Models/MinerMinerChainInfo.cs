/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace estuary-client.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MinerMinerChainInfo : IEquatable<MinerMinerChainInfo>
    { 
        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>

        [DataMember(Name="addresses")]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>

        [DataMember(Name="owner")]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets PeerId
        /// </summary>

        [DataMember(Name="peerId")]
        public string PeerId { get; set; }

        /// <summary>
        /// Gets or Sets Worker
        /// </summary>

        [DataMember(Name="worker")]
        public string Worker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MinerMinerChainInfo {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PeerId: ").Append(PeerId).Append("\n");
            sb.Append("  Worker: ").Append(Worker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MinerMinerChainInfo)obj);
        }

        /// <summary>
        /// Returns true if MinerMinerChainInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of MinerMinerChainInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MinerMinerChainInfo other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Addresses == other.Addresses ||
                    Addresses != null &&
                    Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    PeerId == other.PeerId ||
                    PeerId != null &&
                    PeerId.Equals(other.PeerId)
                ) && 
                (
                    Worker == other.Worker ||
                    Worker != null &&
                    Worker.Equals(other.Worker)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Addresses != null)
                    hashCode = hashCode * 59 + Addresses.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (PeerId != null)
                    hashCode = hashCode * 59 + PeerId.GetHashCode();
                    if (Worker != null)
                    hashCode = hashCode * 59 + Worker.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MinerMinerChainInfo left, MinerMinerChainInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MinerMinerChainInfo left, MinerMinerChainInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
