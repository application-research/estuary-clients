{
  "openapi" : "3.0.1",
  "info" : {
    "title" : "Estuary API",
    "description" : "This is the API for the Estuary application.",
    "termsOfService" : "http://estuary.tech",
    "contact" : {
      "name" : "API Support",
      "url" : "https://docs.estuary.tech/feedback"
    },
    "license" : {
      "name" : "Apache 2.0 Apache-2.0 OR MIT",
      "url" : "https://github.com/application-research/estuary/blob/master/LICENSE.md"
    },
    "version" : "0.0.0"
  },
  "servers" : [ {
    "url" : "//api.estuary.tech/"
  } ],
  "security" : [ {
    "bearerAuth" : [ ]
  } ],
  "paths" : {
    "/admin/autoretrieve/init" : {
      "post" : {
        "tags" : [ "autoretrieve" ],
        "summary" : "Register autoretrieve server",
        "description" : "This endpoint registers a new autoretrieve server",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/autoretrieve_init_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/autoretrieve/list" : {
      "get" : {
        "tags" : [ "autoretrieve" ],
        "summary" : "List autoretrieve servers",
        "description" : "This endpoint lists all registered autoretrieve servers",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/invites" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get Estuary invites",
        "description" : "This endpoint is used to list all estuary invites.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/invites/{code}" : {
      "post" : {
        "tags" : [ "content" ],
        "summary" : "Create an Estuary invite",
        "description" : "This endpoint is used to create an estuary invite.",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Invite code to be created",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/miners/" : {
      "get" : {
        "tags" : [ "admin", "net" ],
        "summary" : "Get all miners",
        "description" : "This endpoint returns all miners. Note: value may be cached",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.minerResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/peering/peers" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "List all Peering peers",
        "description" : "This endpoint can be used to list all peers on Peering Service",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "admin" ],
        "summary" : "Add peers on Peering Service",
        "description" : "This endpoint can be used to add a Peer from the Peering Service",
        "requestBody" : {
          "description" : "Peering Peer array",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/peering.PeeringPeer"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "req"
      },
      "delete" : {
        "tags" : [ "admin" ],
        "summary" : "Remove peers on Peering Service",
        "description" : "This endpoint can be used to remove a Peer from the Peering Service",
        "requestBody" : {
          "description" : "Peer ids",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "peerIds"
      }
    },
    "/admin/peering/start" : {
      "post" : {
        "tags" : [ "admin" ],
        "summary" : "Start Peering",
        "description" : "This endpoint can be used to start the Peering Service",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/peering/status" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Check Peering Status",
        "description" : "This endpoint can be used to check the Peering status",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/peering/stop" : {
      "post" : {
        "tags" : [ "admin" ],
        "summary" : "Stop Peering",
        "description" : "This endpoint can be used to stop the Peering Service",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/system/config" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Get systems(estuary/shuttle) config",
        "description" : "This endpoint is used to get system configs.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/admin/users" : {
      "get" : {
        "tags" : [ "admin" ],
        "summary" : "Get all users",
        "description" : "This endpoint is used to get all users.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/autoretrieve/heartbeat" : {
      "post" : {
        "tags" : [ "autoretrieve" ],
        "summary" : "Marks autoretrieve server as up",
        "description" : "This endpoint updates the lastConnection field for autoretrieve",
        "parameters" : [ {
          "name" : "token",
          "in" : "header",
          "description" : "Autoretrieve's auth token",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/" : {
      "get" : {
        "tags" : [ "collections" ],
        "summary" : "List all collections",
        "description" : "This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/collections.Collection"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "collections" ],
        "summary" : "Create a new collection",
        "description" : "This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.",
        "requestBody" : {
          "description" : "Collection name and description",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/api.createCollectionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/collections.Collection"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/collections/fs/add" : {
      "post" : {
        "tags" : [ "collections" ],
        "summary" : "Add a file to a collection",
        "description" : "This endpoint adds a file to a collection",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "query",
          "description" : "Collection ID",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "content",
          "in" : "query",
          "description" : "Content",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dir",
          "in" : "query",
          "description" : "Directory inside collection",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "Overwrite file if already exists in path",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{coluuid}" : {
      "get" : {
        "tags" : [ "collections" ],
        "summary" : "Get contents in a collection",
        "description" : "This endpoint is used to get contents in a collection. If no colpath query param is passed",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "path",
          "description" : "coluuid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dir",
          "in" : "query",
          "description" : "Directory",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/collections.CollectionListResponse"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "collections" ],
        "summary" : "Add contents to a collection",
        "description" : "This endpoint adds already-pinned contents (that have ContentIDs) to a collection.",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "path",
          "description" : "Collection UUID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dir",
          "in" : "query",
          "description" : "Directory",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "Overwrite conflicting files",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Content IDs to add to collection",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "integer"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "contentIDs"
      },
      "delete" : {
        "tags" : [ "collections" ],
        "summary" : "Deletes a collection",
        "description" : "This endpoint is used to delete an existing collection.",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "path",
          "description" : "Collection ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "*/*"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{coluuid}/commit" : {
      "post" : {
        "tags" : [ "collections" ],
        "summary" : "Produce a CID of the collection contents",
        "description" : "This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "path",
          "description" : "coluuid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/collections/{coluuid}/contents" : {
      "delete" : {
        "tags" : [ "collections" ],
        "summary" : "Deletes a content from a collection",
        "description" : "This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "path",
          "description" : "Collection ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Variable to use when filtering for files (must be either 'path' or 'content_id')",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/api.deleteContentFromCollectionBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/content/add" : {
      "post" : {
        "tags" : [ "content" ],
        "summary" : "Add new content",
        "description" : "This endpoint is used to upload new content.",
        "parameters" : [ {
          "name" : "coluuid",
          "in" : "query",
          "description" : "Collection UUID",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "replication",
          "in" : "query",
          "description" : "Replication value",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "ignore-dupes",
          "in" : "query",
          "description" : "Ignore Dupes true/false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "Overwrite files with the same path on same collection",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "lazy-provide",
          "in" : "query",
          "description" : "Lazy Provide true/false",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dir",
          "in" : "query",
          "description" : "Directory",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "$ref" : "#/components/schemas/content_add_body"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.ContentAddResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/add-car" : {
      "post" : {
        "tags" : [ "content" ],
        "summary" : "Add Car object",
        "description" : "This endpoint is used to add a car object to the network. The object can be a file or a directory.",
        "parameters" : [ {
          "name" : "ignore-dupes",
          "in" : "query",
          "description" : "Ignore Dupes",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "filename",
          "in" : "query",
          "description" : "Filename",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Car",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.ContentAddResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/content/add-ipfs" : {
      "post" : {
        "tags" : [ "content" ],
        "summary" : "Add IPFS object",
        "description" : "This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.",
        "parameters" : [ {
          "name" : "ignore-dupes",
          "in" : "query",
          "description" : "Ignore Dupes",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "Overwrite conflicting files in collections",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "IPFS Body",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/types.IpfsPin"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/content/aggregated/{content}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get aggregated content stats",
        "description" : "This endpoint returns aggregated content stats",
        "parameters" : [ {
          "name" : "content",
          "in" : "path",
          "description" : "Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/all-deals" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get all deals for a user",
        "description" : "This endpoint is used to get all deals for a user",
        "parameters" : [ {
          "name" : "begin",
          "in" : "query",
          "description" : "Begin",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "duration",
          "in" : "query",
          "description" : "Duration",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "all",
          "in" : "query",
          "description" : "All",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/bw-usage/{content}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get content bandwidth",
        "description" : "This endpoint returns content bandwidth",
        "parameters" : [ {
          "name" : "content",
          "in" : "path",
          "description" : "Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/contents" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get user contents",
        "description" : "This endpoint is used to get user contents",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "limit",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/create" : {
      "post" : {
        "tags" : [ "content" ],
        "summary" : "Add a new content",
        "description" : "This endpoint adds a new content",
        "parameters" : [ {
          "name" : "ignore-dupes",
          "in" : "query",
          "description" : "Ignore Dupes",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Content",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/util.ContentCreateBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "req"
      }
    },
    "/content/deals" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Content with deals",
        "description" : "This endpoint lists all content with deals",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "Limit",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Offset",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/ensure-replication/{datacid}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Ensure Replication",
        "description" : "This endpoint ensures that the content is replicated to the specified number of providers",
        "parameters" : [ {
          "name" : "datacid",
          "in" : "path",
          "description" : "Data CID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/failures/{content}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "List all failures for a content",
        "description" : "This endpoint returns all failures for a content",
        "parameters" : [ {
          "name" : "content",
          "in" : "path",
          "description" : "Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/list" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "List all pinned content",
        "description" : "This endpoint lists all content",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/staging-zones" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get staging zone for user, excluding its contents",
        "description" : "This endpoint is used to get staging zone for user, excluding its contents.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/staging-zones/{staging_zone}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get staging zone without its contents field populated",
        "description" : "This endpoint is used to get a staging zone, excluding its contents.",
        "parameters" : [ {
          "name" : "staging_zone",
          "in" : "path",
          "description" : "Staging Zone Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/staging-zones/{staging_zone}/contents" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get contents for a staging zone",
        "description" : "This endpoint is used to get the contents for a staging zone",
        "parameters" : [ {
          "name" : "staging_zone",
          "in" : "path",
          "description" : "Staging Zone Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "limit",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/stats" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Get content statistics",
        "description" : "This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a content",
        "parameters" : [ {
          "name" : "limit",
          "in" : "query",
          "description" : "limit",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "offset",
          "required" : true,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/status/{id}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Content Status",
        "description" : "This endpoint returns the status of a content",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/content/{id}" : {
      "get" : {
        "tags" : [ "content" ],
        "summary" : "Content",
        "description" : "This endpoint returns a content by its ID",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Content ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/estimate" : {
      "post" : {
        "tags" : [ "deals" ],
        "summary" : "Estimate the cost of a deal",
        "description" : "This endpoint estimates the cost of a deal",
        "requestBody" : {
          "description" : "The size of the deal in bytes, the replication factor, and the duration of the deal in blocks",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/api.estimateDealBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "body"
      }
    },
    "/deal/info/{dealid}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Get Deal Info",
        "description" : "This endpoint returns the deal info for a deal",
        "parameters" : [ {
          "name" : "dealid",
          "in" : "path",
          "description" : "Deal ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/proposal/{propcid}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Get Proposal",
        "description" : "This endpoint returns the proposal for a deal",
        "parameters" : [ {
          "name" : "propcid",
          "in" : "path",
          "description" : "Proposal CID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/query/{miner}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Query Ask",
        "description" : "This endpoint returns the ask for a given CID",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "CID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/status-by-proposal/{propcid}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Get Deal Status by PropCid",
        "description" : "Get Deal Status by PropCid",
        "parameters" : [ {
          "name" : "propcid",
          "in" : "path",
          "description" : "PropCid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/status/{miner}/{propcid}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Deal Status",
        "description" : "This endpoint returns the status of a deal",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Miner",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "propcid",
          "in" : "path",
          "description" : "Proposal CID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/transfer/in-progress" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Transfer In Progress",
        "description" : "This endpoint returns the in-progress transfers",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deal/transfer/status" : {
      "post" : {
        "tags" : [ "deals" ],
        "summary" : "Transfer Status",
        "description" : "This endpoint returns the status of a transfer",
        "requestBody" : {
          "description" : "Channel ID",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/api.ChannelIDParam"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "chanid"
      }
    },
    "/deals/failures" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Get storage failures for user",
        "description" : "This endpoint returns a list of storage failures for user",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/deals/make/{miner}" : {
      "post" : {
        "tags" : [ "deals" ],
        "summary" : "Make Deal",
        "description" : "This endpoint makes a deal for a given content and miner",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Miner",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Deal Request",
          "content" : {
            "*/*" : {
              "schema" : {
                "type" : "string"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "dealRequest"
      }
    },
    "/deals/status/{deal}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Get Deal Status",
        "description" : "This endpoint returns the status of a deal",
        "parameters" : [ {
          "name" : "deal",
          "in" : "path",
          "description" : "Deal ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "integer"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/get/{cid}" : {
      "get" : {
        "tags" : [ "public" ],
        "summary" : "Get Full Content by Cid",
        "description" : "This endpoint returns the content associated with a CID",
        "parameters" : [ {
          "name" : "cid",
          "in" : "path",
          "description" : "Cid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "307" : {
            "description" : "Temporary Redirect",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/miner/claim" : {
      "post" : {
        "tags" : [ "miner" ],
        "summary" : "Claim Miner",
        "description" : "This endpoint lets a user claim a miner",
        "requestBody" : {
          "description" : "Claim Miner Body",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/miner.ClaimMinerBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.claimResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "req"
      }
    },
    "/miner/claim/{miner}" : {
      "get" : {
        "tags" : [ "miner" ],
        "summary" : "Get Claim Miner Message",
        "description" : "This endpoint lets a user get the message in order to claim a miner",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Miner claim message",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.claimMsgResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/miner/set-info/{miner}" : {
      "put" : {
        "tags" : [ "miner" ],
        "summary" : "Set Miner Info",
        "description" : "This endpoint lets a user set miner info.",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Miner to set info for",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Miner set info params",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/miner.MinerSetInfoParams"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.emptyResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "params"
      }
    },
    "/miner/suspend/{miner}" : {
      "post" : {
        "tags" : [ "miner" ],
        "summary" : "Suspend Miner",
        "description" : "This endpoint lets a user suspend a miner.",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Miner to suspend",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Suspend Miner Body",
          "content" : {
            "*/*" : {
              "schema" : {
                "$ref" : "#/components/schemas/miner.SuspendMinerBody"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.emptyResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "req"
      }
    },
    "/miner/unsuspend/{miner}" : {
      "put" : {
        "tags" : [ "miner" ],
        "summary" : "Unuspend Miner",
        "description" : "This endpoint lets a user unsuspend a miner.",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Miner to unsuspend",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.emptyResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/pinning/pins" : {
      "get" : {
        "tags" : [ "pinning" ],
        "summary" : "List all pin status objects",
        "description" : "This endpoint lists all pin status objects",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/types.IpfsListPinStatusResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "pinning" ],
        "summary" : "Add and pin object",
        "description" : "This endpoint adds a pin to the IPFS daemon.",
        "parameters" : [ {
          "name" : "ignore-dupes",
          "in" : "query",
          "description" : "Ignore Dupes",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "Overwrite conflicting files in collections",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "Pin Body {cid:cid, name:name}",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/types.IpfsPin"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/types.IpfsPinStatusResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "pin"
      }
    },
    "/pinning/pins/{pinid}" : {
      "get" : {
        "tags" : [ "pinning" ],
        "summary" : "Get a pin status object",
        "description" : "This endpoint returns a pin status object.",
        "parameters" : [ {
          "name" : "pinid",
          "in" : "path",
          "description" : "cid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/types.IpfsPinStatusResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "pinning" ],
        "summary" : "Replace a pinned object",
        "description" : "This endpoint replaces a pinned object.",
        "parameters" : [ {
          "name" : "pinid",
          "in" : "path",
          "description" : "Pin ID to be replaced",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "description" : "New pin",
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/types.IpfsPin"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/types.IpfsPinStatusResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        },
        "x-codegen-request-body-name" : "pin"
      },
      "delete" : {
        "tags" : [ "pinning" ],
        "summary" : "Delete a pinned object",
        "description" : "This endpoint deletes a pinned object.",
        "parameters" : [ {
          "name" : "pinid",
          "in" : "path",
          "description" : "Pin ID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "202" : {
            "description" : "Accepted",
            "content" : { }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/by-cid/{cid}" : {
      "get" : {
        "tags" : [ "public" ],
        "summary" : "Get Content by Cid",
        "description" : "This endpoint returns the content record associated with a CID",
        "parameters" : [ {
          "name" : "cid",
          "in" : "path",
          "description" : "Cid",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/deals/failures" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Get storage failures",
        "description" : "This endpoint returns a list of storage failures",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/info" : {
      "get" : {
        "tags" : [ "public" ],
        "summary" : "Get public node info",
        "description" : "This endpoint returns information about the node",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.publicNodeInfo"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/metrics/deals-on-chain" : {
      "get" : {
        "tags" : [ "public", "metrics" ],
        "summary" : "Get deal metrics",
        "description" : "This endpoint is used to get deal metrics",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/miners/deals/{miner}" : {
      "get" : {
        "tags" : [ "public", "miner" ],
        "summary" : "Get all miners deals",
        "description" : "This endpoint returns all miners deals",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Filter by miner",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "ignore-failed",
          "in" : "query",
          "description" : "Ignore Failed",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/miners/failures/{miner}" : {
      "get" : {
        "tags" : [ "public", "net" ],
        "summary" : "Get all miners",
        "description" : "This endpoint returns all miners",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Filter by miner",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/miners/stats/{miner}" : {
      "get" : {
        "tags" : [ "public", "miner" ],
        "summary" : "Get miner stats",
        "description" : "This endpoint returns miner stats",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "Filter by miner",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/miners/storage/query/{miner}" : {
      "get" : {
        "tags" : [ "deals" ],
        "summary" : "Query Ask",
        "description" : "This endpoint returns the ask for a given CID",
        "parameters" : [ {
          "name" : "miner",
          "in" : "path",
          "description" : "CID",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/net/addrs" : {
      "get" : {
        "tags" : [ "public", "net" ],
        "summary" : "Net Addrs",
        "description" : "This endpoint is used to get net addrs",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          }
        }
      }
    },
    "/public/net/peers" : {
      "get" : {
        "tags" : [ "public", "net" ],
        "summary" : "Net Peers",
        "description" : "This endpoint is used to get net peers",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/public/stats" : {
      "get" : {
        "tags" : [ "public" ],
        "summary" : "Public stats",
        "description" : "This endpoint is used to get public stats.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/user/api-keys" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get API keys for a user",
        "description" : "This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/api.getApiKeysResp"
                  },
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User" ],
        "summary" : "Create API keys for a user",
        "description" : "This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features.",
        "parameters" : [ {
          "name" : "expiry",
          "in" : "query",
          "description" : "Expiration - Expiration - Valid time units are ns, us (or µs),  ms,  s,  m,  h.  for  example  300h",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "perms",
          "in" : "query",
          "description" : "Permissions -- currently unused",
          "required" : false,
          "style" : "form",
          "explode" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/api.getApiKeysResp"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/user/api-keys/{key_or_hash}" : {
      "delete" : {
        "tags" : [ "User" ],
        "summary" : "Revoke a User API Key.",
        "description" : "This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily used to access all estuary features. This endpoint can be used to revoke the API key that's assigned to the user. Revoked API keys are completely deleted and are not recoverable.",
        "parameters" : [ {
          "name" : "key_or_hash",
          "in" : "path",
          "description" : "Key or Hash",
          "required" : true,
          "style" : "simple",
          "explode" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/user/export" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Export user data",
        "description" : "This endpoint is used to get API keys for a user.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/user/stats" : {
      "get" : {
        "tags" : [ "User" ],
        "summary" : "Get stats for the current user",
        "description" : "This endpoint is used to get stats for the current user.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "string",
                  "x-content-type" : "application/json"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    },
    "/viewer" : {
      "get" : {
        "summary" : "Fetch viewer details",
        "description" : "This endpoint fetches viewer details such as username, permissions, address, owned miners, user settings etc.",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.ViewerResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/util.HttpError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "address.Address" : {
        "type" : "object"
      },
      "api.ChannelIDParam" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer"
          },
          "initiator" : {
            "type" : "string"
          },
          "responder" : {
            "type" : "string"
          }
        }
      },
      "api.claimMsgResponse" : {
        "type" : "object",
        "properties" : {
          "hexmsg" : {
            "type" : "string"
          }
        },
        "example" : {
          "hexmsg" : "hexmsg"
        }
      },
      "api.claimResponse" : {
        "type" : "object",
        "properties" : {
          "success" : {
            "type" : "boolean"
          }
        },
        "example" : {
          "success" : true
        }
      },
      "api.createCollectionBody" : {
        "type" : "object",
        "properties" : {
          "description" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "api.deleteContentFromCollectionBody" : {
        "type" : "object",
        "properties" : {
          "by" : {
            "type" : "string"
          },
          "value" : {
            "type" : "string"
          }
        }
      },
      "api.emptyResp" : {
        "type" : "object"
      },
      "api.estimateDealBody" : {
        "type" : "object",
        "properties" : {
          "durationBlks" : {
            "type" : "integer"
          },
          "replication" : {
            "type" : "integer"
          },
          "size" : {
            "type" : "integer"
          },
          "verified" : {
            "type" : "boolean"
          }
        }
      },
      "api.getApiKeysResp" : {
        "type" : "object",
        "properties" : {
          "expiry" : {
            "type" : "string"
          },
          "isSession" : {
            "type" : "boolean"
          },
          "label" : {
            "type" : "string"
          },
          "token" : {
            "type" : "string"
          },
          "tokenHash" : {
            "type" : "string"
          }
        },
        "example" : {
          "expiry" : "expiry",
          "label" : "label",
          "isSession" : true,
          "tokenHash" : "tokenHash",
          "token" : "token"
        }
      },
      "api.minerResp" : {
        "type" : "object",
        "properties" : {
          "addr" : {
            "$ref" : "#/components/schemas/address.Address"
          },
          "chain_info" : {
            "$ref" : "#/components/schemas/miner.MinerChainInfo"
          },
          "name" : {
            "type" : "string"
          },
          "suspended" : {
            "type" : "boolean"
          },
          "suspendedReason" : {
            "type" : "string"
          },
          "version" : {
            "type" : "string"
          }
        },
        "example" : {
          "name" : "name",
          "chain_info" : {
            "owner" : "owner",
            "peerId" : "peerId",
            "addresses" : [ "addresses", "addresses" ],
            "worker" : "worker"
          },
          "suspendedReason" : "suspendedReason",
          "addr" : { },
          "version" : "version",
          "suspended" : true
        }
      },
      "api.publicNodeInfo" : {
        "type" : "object",
        "properties" : {
          "primaryAddress" : {
            "$ref" : "#/components/schemas/address.Address"
          }
        },
        "example" : {
          "primaryAddress" : { }
        }
      },
      "cid.Cid" : {
        "type" : "object"
      },
      "collections.CidType" : {
        "type" : "string",
        "enum" : [ "directory", "file" ],
        "x-enum-varnames" : [ "CidTypeDir", "CidTypeFile" ]
      },
      "collections.Collection" : {
        "type" : "object",
        "properties" : {
          "cid" : {
            "type" : "string"
          },
          "createdAt" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "integer"
          },
          "uuid" : {
            "type" : "string"
          }
        },
        "example" : {
          "createdAt" : "createdAt",
          "name" : "name",
          "description" : "description",
          "userId" : 0,
          "uuid" : "uuid",
          "cid" : "cid"
        }
      },
      "collections.CollectionListResponse" : {
        "type" : "object",
        "properties" : {
          "cid" : {
            "$ref" : "#/components/schemas/util.DbCID"
          },
          "coluuid" : {
            "type" : "string"
          },
          "contId" : {
            "type" : "integer"
          },
          "dir" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "size" : {
            "type" : "integer"
          },
          "type" : {
            "$ref" : "#/components/schemas/collections.CidType"
          },
          "updatedAt" : {
            "type" : "string"
          }
        },
        "example" : {
          "coluuid" : "coluuid",
          "contId" : 0,
          "size" : 6,
          "name" : "name",
          "dir" : "dir",
          "type" : "directory",
          "cid" : {
            "cid" : { }
          },
          "updatedAt" : "updatedAt"
        }
      },
      "miner.ClaimMinerBody" : {
        "type" : "object",
        "properties" : {
          "claim" : {
            "type" : "string"
          },
          "miner" : {
            "$ref" : "#/components/schemas/address.Address"
          },
          "name" : {
            "type" : "string"
          }
        }
      },
      "miner.MinerChainInfo" : {
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "owner" : {
            "type" : "string"
          },
          "peerId" : {
            "type" : "string"
          },
          "worker" : {
            "type" : "string"
          }
        },
        "example" : {
          "owner" : "owner",
          "peerId" : "peerId",
          "addresses" : [ "addresses", "addresses" ],
          "worker" : "worker"
        }
      },
      "miner.MinerSetInfoParams" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          }
        }
      },
      "miner.SuspendMinerBody" : {
        "type" : "object",
        "properties" : {
          "reason" : {
            "type" : "string"
          }
        }
      },
      "peering.PeeringPeer" : {
        "type" : "object",
        "properties" : {
          "Addrs" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "Connected" : {
            "type" : "boolean"
          },
          "ID" : {
            "type" : "string"
          }
        }
      },
      "types.IpfsListPinStatusResponse" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer"
          },
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/types.IpfsPinStatusResponse"
            }
          }
        },
        "example" : {
          "count" : 0,
          "results" : [ {
            "pin" : {
              "meta" : "",
              "name" : "name",
              "origins" : [ "origins", "origins" ],
              "cid" : "cid"
            },
            "created" : "created",
            "requestid" : "requestid",
            "delegates" : [ "delegates", "delegates" ],
            "content" : {
              "aggregatedIn" : 6,
              "offloaded" : true,
              "replication" : 5,
              "pinning" : true,
              "pinMeta" : "pinMeta",
              "replace" : true,
              "active" : true,
              "description" : "description",
              "dagSplit" : true,
              "dealStatus" : "dealStatus",
              "failed" : true,
              "type" : 7,
              "userId" : 9,
              "aggregate" : true,
              "createdAt" : "createdAt",
              "pinningStatus" : "pinningStatus",
              "size" : 5,
              "splitFrom" : 2,
              "name" : "name",
              "origins" : "origins",
              "location" : "location",
              "id" : 1,
              "cid" : {
                "cid" : { }
              },
              "updatedAt" : "updatedAt"
            },
            "info" : "",
            "status" : "pinning"
          }, {
            "pin" : {
              "meta" : "",
              "name" : "name",
              "origins" : [ "origins", "origins" ],
              "cid" : "cid"
            },
            "created" : "created",
            "requestid" : "requestid",
            "delegates" : [ "delegates", "delegates" ],
            "content" : {
              "aggregatedIn" : 6,
              "offloaded" : true,
              "replication" : 5,
              "pinning" : true,
              "pinMeta" : "pinMeta",
              "replace" : true,
              "active" : true,
              "description" : "description",
              "dagSplit" : true,
              "dealStatus" : "dealStatus",
              "failed" : true,
              "type" : 7,
              "userId" : 9,
              "aggregate" : true,
              "createdAt" : "createdAt",
              "pinningStatus" : "pinningStatus",
              "size" : 5,
              "splitFrom" : 2,
              "name" : "name",
              "origins" : "origins",
              "location" : "location",
              "id" : 1,
              "cid" : {
                "cid" : { }
              },
              "updatedAt" : "updatedAt"
            },
            "info" : "",
            "status" : "pinning"
          } ]
        }
      },
      "types.IpfsPin" : {
        "type" : "object",
        "properties" : {
          "cid" : {
            "type" : "string"
          },
          "meta" : {
            "type" : "object",
            "additionalProperties" : true
          },
          "name" : {
            "type" : "string"
          },
          "origins" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "example" : {
          "meta" : "",
          "name" : "name",
          "origins" : [ "origins", "origins" ],
          "cid" : "cid"
        }
      },
      "types.IpfsPinStatusResponse" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "$ref" : "#/components/schemas/util.Content"
          },
          "created" : {
            "type" : "string"
          },
          "delegates" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "info" : {
            "type" : "object",
            "additionalProperties" : true
          },
          "pin" : {
            "$ref" : "#/components/schemas/types.IpfsPin"
          },
          "requestid" : {
            "type" : "string"
          },
          "status" : {
            "$ref" : "#/components/schemas/types.PinningStatus"
          }
        },
        "example" : {
          "pin" : {
            "meta" : "",
            "name" : "name",
            "origins" : [ "origins", "origins" ],
            "cid" : "cid"
          },
          "created" : "created",
          "requestid" : "requestid",
          "delegates" : [ "delegates", "delegates" ],
          "content" : {
            "aggregatedIn" : 6,
            "offloaded" : true,
            "replication" : 5,
            "pinning" : true,
            "pinMeta" : "pinMeta",
            "replace" : true,
            "active" : true,
            "description" : "description",
            "dagSplit" : true,
            "dealStatus" : "dealStatus",
            "failed" : true,
            "type" : 7,
            "userId" : 9,
            "aggregate" : true,
            "createdAt" : "createdAt",
            "pinningStatus" : "pinningStatus",
            "size" : 5,
            "splitFrom" : 2,
            "name" : "name",
            "origins" : "origins",
            "location" : "location",
            "id" : 1,
            "cid" : {
              "cid" : { }
            },
            "updatedAt" : "updatedAt"
          },
          "info" : "",
          "status" : "pinning"
        }
      },
      "types.PinningStatus" : {
        "type" : "string",
        "enum" : [ "pinning", "pinned", "failed", "queued", "offloaded" ],
        "x-enum-varnames" : [ "PinningStatusPinning", "PinningStatusPinned", "PinningStatusFailed", "PinningStatusQueued", "PinningStatusOffloaded" ]
      },
      "util.Content" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "boolean"
          },
          "aggregate" : {
            "type" : "boolean"
          },
          "aggregatedIn" : {
            "type" : "integer",
            "description" : "TODO: shift most of the 'state' booleans in here into a single state\nfield, should make reasoning about things much simpler"
          },
          "cid" : {
            "$ref" : "#/components/schemas/util.DbCID"
          },
          "createdAt" : {
            "type" : "string"
          },
          "dagSplit" : {
            "type" : "boolean",
            "description" : "If set, this content is part of a split dag.\nIn such a case, the 'root' content should be advertised on the dht, but\nnot have deals made for it, and the children should have deals made for\nthem (unlike with aggregates)"
          },
          "dealStatus" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "failed" : {
            "type" : "boolean"
          },
          "id" : {
            "type" : "integer"
          },
          "location" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "offloaded" : {
            "type" : "boolean"
          },
          "origins" : {
            "type" : "string"
          },
          "pinMeta" : {
            "type" : "string"
          },
          "pinning" : {
            "type" : "boolean"
          },
          "pinningStatus" : {
            "type" : "string"
          },
          "replace" : {
            "type" : "boolean"
          },
          "replication" : {
            "type" : "integer"
          },
          "size" : {
            "type" : "integer"
          },
          "splitFrom" : {
            "type" : "integer"
          },
          "type" : {
            "$ref" : "#/components/schemas/util.ContentType"
          },
          "updatedAt" : {
            "type" : "string"
          },
          "userId" : {
            "type" : "integer"
          }
        },
        "example" : {
          "aggregatedIn" : 6,
          "offloaded" : true,
          "replication" : 5,
          "pinning" : true,
          "pinMeta" : "pinMeta",
          "replace" : true,
          "active" : true,
          "description" : "description",
          "dagSplit" : true,
          "dealStatus" : "dealStatus",
          "failed" : true,
          "type" : 7,
          "userId" : 9,
          "aggregate" : true,
          "createdAt" : "createdAt",
          "pinningStatus" : "pinningStatus",
          "size" : 5,
          "splitFrom" : 2,
          "name" : "name",
          "origins" : "origins",
          "location" : "location",
          "id" : 1,
          "cid" : {
            "cid" : { }
          },
          "updatedAt" : "updatedAt"
        }
      },
      "util.ContentAddResponse" : {
        "type" : "object",
        "properties" : {
          "cid" : {
            "type" : "string"
          },
          "estuaryId" : {
            "type" : "integer"
          },
          "estuary_retrieval_url" : {
            "type" : "string"
          },
          "providers" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "retrieval_url" : {
            "type" : "string"
          }
        },
        "example" : {
          "retrieval_url" : "retrieval_url",
          "estuaryId" : 0,
          "estuary_retrieval_url" : "estuary_retrieval_url",
          "providers" : [ "providers", "providers" ],
          "cid" : "cid"
        }
      },
      "util.ContentCreateBody" : {
        "type" : "object",
        "properties" : {
          "coluuid" : {
            "type" : "string"
          },
          "dir" : {
            "type" : "string"
          },
          "location" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "overwrite" : {
            "type" : "boolean"
          },
          "root" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/util.ContentType"
          }
        }
      },
      "util.ContentType" : {
        "type" : "integer",
        "enum" : [ 0, 1, 2 ],
        "x-enum-varnames" : [ "Unknown", "File", "Directory" ]
      },
      "util.DbCID" : {
        "type" : "object",
        "properties" : {
          "cid" : {
            "$ref" : "#/components/schemas/cid.Cid"
          }
        },
        "example" : {
          "cid" : { }
        }
      },
      "util.HttpError" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "integer"
          },
          "details" : {
            "type" : "string"
          },
          "reason" : {
            "type" : "string"
          }
        }
      },
      "util.UserSettings" : {
        "type" : "object",
        "properties" : {
          "contentAddingDisabled" : {
            "type" : "boolean"
          },
          "dealDuration" : {
            "type" : "integer"
          },
          "dealMakingDisabled" : {
            "type" : "boolean"
          },
          "fileStagingThreshold" : {
            "type" : "integer"
          },
          "flags" : {
            "type" : "integer"
          },
          "replication" : {
            "type" : "integer"
          },
          "uploadEndpoints" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "verified" : {
            "type" : "boolean"
          }
        },
        "example" : {
          "dealDuration" : 1,
          "replication" : 2,
          "dealMakingDisabled" : true,
          "flags" : 5,
          "verified" : true,
          "fileStagingThreshold" : 5,
          "uploadEndpoints" : [ "uploadEndpoints", "uploadEndpoints" ],
          "contentAddingDisabled" : true
        }
      },
      "util.ViewerResponse" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "type" : "string"
          },
          "auth_expiry" : {
            "type" : "string"
          },
          "id" : {
            "type" : "integer"
          },
          "miners" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "perms" : {
            "type" : "integer"
          },
          "settings" : {
            "$ref" : "#/components/schemas/util.UserSettings"
          },
          "username" : {
            "type" : "string"
          }
        },
        "example" : {
          "settings" : {
            "dealDuration" : 1,
            "replication" : 2,
            "dealMakingDisabled" : true,
            "flags" : 5,
            "verified" : true,
            "fileStagingThreshold" : 5,
            "uploadEndpoints" : [ "uploadEndpoints", "uploadEndpoints" ],
            "contentAddingDisabled" : true
          },
          "address" : "address",
          "auth_expiry" : "auth_expiry",
          "perms" : 6,
          "id" : 0,
          "miners" : [ "miners", "miners" ],
          "username" : "username"
        }
      },
      "autoretrieve_init_body" : {
        "required" : [ "addresses", "pubKey" ],
        "type" : "object",
        "properties" : {
          "addresses" : {
            "type" : "string",
            "description" : "Autoretrieve's comma-separated list of addresses"
          },
          "pubKey" : {
            "type" : "string",
            "description" : "Autoretrieve's public key"
          }
        }
      },
      "content_add_body" : {
        "required" : [ "data" ],
        "type" : "object",
        "properties" : {
          "data" : {
            "type" : "string",
            "description" : "File to upload",
            "format" : "binary"
          },
          "filename" : {
            "type" : "string",
            "description" : "Filename to use for upload"
          }
        }
      }
    },
    "securitySchemes" : {
      "bearerAuth" : {
        "type" : "apiKey",
        "name" : "Authorization",
        "in" : "header"
      }
    }
  },
  "x-original-swagger-version" : "2.0"
}
