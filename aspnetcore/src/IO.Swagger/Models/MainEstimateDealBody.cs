/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MainEstimateDealBody : IEquatable<MainEstimateDealBody>
    { 
        /// <summary>
        /// Gets or Sets DurationBlks
        /// </summary>

        [DataMember(Name="durationBlks")]
        public int? DurationBlks { get; set; }

        /// <summary>
        /// Gets or Sets Replication
        /// </summary>

        [DataMember(Name="replication")]
        public int? Replication { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>

        [DataMember(Name="size")]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>

        [DataMember(Name="verified")]
        public bool? Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainEstimateDealBody {\n");
            sb.Append("  DurationBlks: ").Append(DurationBlks).Append("\n");
            sb.Append("  Replication: ").Append(Replication).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MainEstimateDealBody)obj);
        }

        /// <summary>
        /// Returns true if MainEstimateDealBody instances are equal
        /// </summary>
        /// <param name="other">Instance of MainEstimateDealBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainEstimateDealBody other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DurationBlks == other.DurationBlks ||
                    DurationBlks != null &&
                    DurationBlks.Equals(other.DurationBlks)
                ) && 
                (
                    Replication == other.Replication ||
                    Replication != null &&
                    Replication.Equals(other.Replication)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    Verified == other.Verified ||
                    Verified != null &&
                    Verified.Equals(other.Verified)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DurationBlks != null)
                    hashCode = hashCode * 59 + DurationBlks.GetHashCode();
                    if (Replication != null)
                    hashCode = hashCode * 59 + Replication.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    if (Verified != null)
                    hashCode = hashCode * 59 + Verified.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MainEstimateDealBody left, MainEstimateDealBody right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MainEstimateDealBody left, MainEstimateDealBody right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
