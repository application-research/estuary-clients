/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DealsApiController : ControllerBase
    { 
        /// <summary>
        /// Estimate the cost of a deal
        /// </summary>
        /// <remarks>This endpoint estimates the cost of a deal</remarks>
        /// <param name="body">The size of the deal in bytes, the replication factor, and the duration of the deal in blocks</param>
        [HttpPost]
        [Route("//deal/estimate")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealEstimatePost")]
        public virtual IActionResult DealEstimatePost([FromBody]MainEstimateDealBody body)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Deal Info
        /// </summary>
        /// <remarks>This endpoint returns the deal info for a deal</remarks>
        /// <param name="dealid">Deal ID</param>
        [HttpGet]
        [Route("//deal/info/{dealid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealInfoDealidGet")]
        public virtual IActionResult DealInfoDealidGet([FromRoute][Required]int? dealid)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Proposal
        /// </summary>
        /// <remarks>This endpoint returns the proposal for a deal</remarks>
        /// <param name="propcid">Proposal CID</param>
        [HttpGet]
        [Route("//deal/proposal/{propcid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealProposalPropcidGet")]
        public virtual IActionResult DealProposalPropcidGet([FromRoute][Required]string propcid)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Query Ask
        /// </summary>
        /// <remarks>This endpoint returns the ask for a given CID</remarks>
        /// <param name="miner">CID</param>
        [HttpGet]
        [Route("//deal/query/{miner}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealQueryMinerGet")]
        public virtual IActionResult DealQueryMinerGet([FromRoute][Required]string miner)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Deal Status by PropCid
        /// </summary>
        /// <remarks>Get Deal Status by PropCid</remarks>
        /// <param name="propcid">PropCid</param>
        [HttpGet]
        [Route("//deal/status-by-proposal/{propcid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealStatusByProposalPropcidGet")]
        public virtual IActionResult DealStatusByProposalPropcidGet([FromRoute][Required]string propcid)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Deal Status
        /// </summary>
        /// <remarks>This endpoint returns the status of a deal</remarks>
        /// <param name="miner">Miner</param>
        /// <param name="propcid">Proposal CID</param>
        [HttpGet]
        [Route("//deal/status/{miner}/{propcid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealStatusMinerPropcidGet")]
        public virtual IActionResult DealStatusMinerPropcidGet([FromRoute][Required]string miner, [FromRoute][Required]string propcid)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Transfer In Progress
        /// </summary>
        /// <remarks>This endpoint returns the in-progress transfers</remarks>
        [HttpGet]
        [Route("//deal/transfer/in-progress")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealTransferInProgressGet")]
        public virtual IActionResult DealTransferInProgressGet()
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Transfer Status
        /// </summary>
        /// <remarks>This endpoint returns the status of a transfer</remarks>
        [HttpPost]
        [Route("//deal/transfer/status")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealTransferStatusPost")]
        public virtual IActionResult DealTransferStatusPost()
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get storage failures for user
        /// </summary>
        /// <remarks>This endpoint returns a list of storage failures for user</remarks>
        [HttpGet]
        [Route("//deals/failures")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealsFailuresGet")]
        public virtual IActionResult DealsFailuresGet()
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Make Deal
        /// </summary>
        /// <remarks>This endpoint makes a deal for a given content and miner</remarks>
        /// <param name="miner">Miner</param>
        /// <param name="dealRequest">Deal Request</param>
        [HttpPost]
        [Route("//deals/make/{miner}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealsMakeMinerPost")]
        public virtual IActionResult DealsMakeMinerPost([FromRoute][Required]string miner, [FromBody]string dealRequest)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get Deal Status
        /// </summary>
        /// <remarks>This endpoint returns the status of a deal</remarks>
        /// <param name="deal">Deal ID</param>
        [HttpGet]
        [Route("//deals/status/{deal}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DealsStatusDealGet")]
        public virtual IActionResult DealsStatusDealGet([FromRoute][Required]int? deal)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get storage failures
        /// </summary>
        /// <remarks>This endpoint returns a list of storage failures</remarks>
        [HttpGet]
        [Route("//public/deals/failures")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PublicDealsFailuresGet")]
        public virtual IActionResult PublicDealsFailuresGet()
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Query Ask
        /// </summary>
        /// <remarks>This endpoint returns the ask for a given CID</remarks>
        /// <param name="miner">CID</param>
        [HttpGet]
        [Route("//public/miners/storage/query/{miner}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("PublicMinersStorageQueryMinerGet")]
        public virtual IActionResult PublicMinersStorageQueryMinerGet([FromRoute][Required]string miner)
        { 

            throw new NotImplementedException();
        }
    }
}
