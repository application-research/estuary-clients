/*
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ContentApiController : ControllerBase
    { 
        /// <summary>
        /// Add Car object
        /// </summary>
        /// <remarks>This endpoint is used to add a car object to the network. The object can be a file or a directory.</remarks>
        /// <param name="body">Car</param>
        /// <param name="filename">Filename</param>
        /// <param name="commp">Commp</param>
        /// <param name="size">Size</param>
        [HttpPost]
        [Route("//content/add-car")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentAddCarPost")]
        public virtual IActionResult ContentAddCarPost([FromBody]string body, [FromQuery]string filename, [FromQuery]string commp, [FromQuery]string size)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add IPFS object
        /// </summary>
        /// <remarks>This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.</remarks>
        /// <param name="body">IPFS Body</param>
        [HttpPost]
        [Route("//content/add-ipfs")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentAddIpfsPost")]
        public virtual IActionResult ContentAddIpfsPost([FromBody]UtilContentAddIpfsBody body)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add new content
        /// </summary>
        /// <remarks>This endpoint is used to upload new content.</remarks>
        /// <param name="_file">File to upload</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <param name="dir">Directory</param>
        /// <response code="200">OK</response>
        [HttpPost]
        [Route("//content/add")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentAddPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(UtilContentAddResponse), description: "OK")]
        public virtual IActionResult ContentAddPost([FromForm][Required()]System.IO.Stream _file, [FromRoute][Required]string coluuid, [FromRoute][Required]string dir)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UtilContentAddResponse));

            string exampleJson = null;
            exampleJson = "{\"empty\": false}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UtilContentAddResponse>(exampleJson)
            : default(UtilContentAddResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get aggregated content stats
        /// </summary>
        /// <remarks>This endpoint returns aggregated content stats</remarks>
        /// <param name="content">Content ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//content/aggregated/{content}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentAggregatedContentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult ContentAggregatedContentGet([FromRoute][Required]string content)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            string exampleJson = null;
            exampleJson = "{\n  \"bytes\": [],\n  \"empty\": true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all deals for a user
        /// </summary>
        /// <remarks>This endpoint is used to get all deals for a user</remarks>
        /// <param name="begin">Begin</param>
        /// <param name="duration">Duration</param>
        /// <param name="all">All</param>
        [HttpGet]
        [Route("//content/all-deals")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentAllDealsGet")]
        public virtual IActionResult ContentAllDealsGet([FromQuery][Required()]string begin, [FromQuery][Required()]string duration, [FromQuery][Required()]string all)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get content bandwidth
        /// </summary>
        /// <remarks>This endpoint returns content bandwidth</remarks>
        /// <param name="content">Content ID</param>
        [HttpGet]
        [Route("//content/bw-usage/{content}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentBwUsageContentGet")]
        public virtual IActionResult ContentBwUsageContentGet([FromRoute][Required]string content)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add a new content
        /// </summary>
        /// <remarks>This endpoint adds a new content</remarks>
        /// <param name="body">Content</param>
        [HttpPost]
        [Route("//content/create")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentCreatePost")]
        public virtual IActionResult ContentCreatePost([FromBody]string body)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Content with deals
        /// </summary>
        /// <remarks>This endpoint lists all content with deals</remarks>
        /// <param name="limit">Limit</param>
        /// <param name="offset">Offset</param>
        [HttpGet]
        [Route("//content/deals")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentDealsGet")]
        public virtual IActionResult ContentDealsGet([FromQuery]int? limit, [FromQuery]int? offset)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Ensure Replication
        /// </summary>
        /// <remarks>This endpoint ensures that the content is replicated to the specified number of providers</remarks>
        /// <param name="datacid">Data CID</param>
        [HttpGet]
        [Route("//content/ensure-replication/{datacid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentEnsureReplicationDatacidGet")]
        public virtual IActionResult ContentEnsureReplicationDatacidGet([FromRoute][Required]string datacid)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// List all failures for a content
        /// </summary>
        /// <remarks>This endpoint returns all failures for a content</remarks>
        /// <param name="content">Content ID</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//content/failures/{content}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentFailuresContentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult ContentFailuresContentGet([FromRoute][Required]string content)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));

            string exampleJson = null;
            exampleJson = "{\n  \"bytes\": [],\n  \"empty\": true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Import a deal
        /// </summary>
        /// <remarks>This endpoint imports a deal into the shuttle.</remarks>
        /// <param name="body">Import a deal</param>
        [HttpPost]
        [Route("//content/importdeal")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentImportdealPost")]
        public virtual IActionResult ContentImportdealPost([FromBody]MainImportDealBody body)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// List all pinned content
        /// </summary>
        /// <remarks>This endpoint lists all content</remarks>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("//content/list")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentListGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<string>), description: "OK")]
        public virtual IActionResult ContentListGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<string>));

            string exampleJson = null;
            exampleJson = "{}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<string>>(exampleJson)
            : default(List<string>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Read content
        /// </summary>
        /// <remarks>This endpoint reads content from the blockstore</remarks>
        /// <param name="cont">CID</param>
        [HttpGet]
        [Route("//content/read/{cont}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentReadContGet")]
        public virtual IActionResult ContentReadContGet([FromRoute][Required]string cont)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get staging zone for user
        /// </summary>
        /// <remarks>This endpoint is used to get staging zone for user.</remarks>
        [HttpGet]
        [Route("//content/staging-zones")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentStagingZonesGet")]
        public virtual IActionResult ContentStagingZonesGet()
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get content statistics
        /// </summary>
        /// <remarks>This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten</remarks>
        /// <param name="limit">limit</param>
        [HttpGet]
        [Route("//content/stats")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentStatsGet")]
        public virtual IActionResult ContentStatsGet([FromRoute][Required]string limit)
        { 

            throw new NotImplementedException();
        }

        /// <summary>
        /// Content Status
        /// </summary>
        /// <remarks>This endpoint returns the status of a content</remarks>
        /// <param name="id">Content ID</param>
        [HttpGet]
        [Route("//content/status/{id}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("ContentStatusIdGet")]
        public virtual IActionResult ContentStatusIdGet([FromRoute][Required]int? id)
        { 

            throw new NotImplementedException();
        }
    }
}
