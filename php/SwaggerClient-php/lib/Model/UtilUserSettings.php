<?php
/**
 * UtilUserSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.37
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UtilUserSettings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UtilUserSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'util.UserSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'content_adding_disabled' => 'bool',
'deal_duration' => 'int',
'deal_making_disabled' => 'bool',
'file_staging_threshold' => 'int',
'flags' => 'int',
'replication' => 'int',
'upload_endpoints' => 'string[]',
'verified' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'content_adding_disabled' => null,
'deal_duration' => null,
'deal_making_disabled' => null,
'file_staging_threshold' => null,
'flags' => null,
'replication' => null,
'upload_endpoints' => null,
'verified' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content_adding_disabled' => 'contentAddingDisabled',
'deal_duration' => 'dealDuration',
'deal_making_disabled' => 'dealMakingDisabled',
'file_staging_threshold' => 'fileStagingThreshold',
'flags' => 'flags',
'replication' => 'replication',
'upload_endpoints' => 'uploadEndpoints',
'verified' => 'verified'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content_adding_disabled' => 'setContentAddingDisabled',
'deal_duration' => 'setDealDuration',
'deal_making_disabled' => 'setDealMakingDisabled',
'file_staging_threshold' => 'setFileStagingThreshold',
'flags' => 'setFlags',
'replication' => 'setReplication',
'upload_endpoints' => 'setUploadEndpoints',
'verified' => 'setVerified'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content_adding_disabled' => 'getContentAddingDisabled',
'deal_duration' => 'getDealDuration',
'deal_making_disabled' => 'getDealMakingDisabled',
'file_staging_threshold' => 'getFileStagingThreshold',
'flags' => 'getFlags',
'replication' => 'getReplication',
'upload_endpoints' => 'getUploadEndpoints',
'verified' => 'getVerified'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content_adding_disabled'] = isset($data['content_adding_disabled']) ? $data['content_adding_disabled'] : null;
        $this->container['deal_duration'] = isset($data['deal_duration']) ? $data['deal_duration'] : null;
        $this->container['deal_making_disabled'] = isset($data['deal_making_disabled']) ? $data['deal_making_disabled'] : null;
        $this->container['file_staging_threshold'] = isset($data['file_staging_threshold']) ? $data['file_staging_threshold'] : null;
        $this->container['flags'] = isset($data['flags']) ? $data['flags'] : null;
        $this->container['replication'] = isset($data['replication']) ? $data['replication'] : null;
        $this->container['upload_endpoints'] = isset($data['upload_endpoints']) ? $data['upload_endpoints'] : null;
        $this->container['verified'] = isset($data['verified']) ? $data['verified'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content_adding_disabled
     *
     * @return bool
     */
    public function getContentAddingDisabled()
    {
        return $this->container['content_adding_disabled'];
    }

    /**
     * Sets content_adding_disabled
     *
     * @param bool $content_adding_disabled content_adding_disabled
     *
     * @return $this
     */
    public function setContentAddingDisabled($content_adding_disabled)
    {
        $this->container['content_adding_disabled'] = $content_adding_disabled;

        return $this;
    }

    /**
     * Gets deal_duration
     *
     * @return int
     */
    public function getDealDuration()
    {
        return $this->container['deal_duration'];
    }

    /**
     * Sets deal_duration
     *
     * @param int $deal_duration deal_duration
     *
     * @return $this
     */
    public function setDealDuration($deal_duration)
    {
        $this->container['deal_duration'] = $deal_duration;

        return $this;
    }

    /**
     * Gets deal_making_disabled
     *
     * @return bool
     */
    public function getDealMakingDisabled()
    {
        return $this->container['deal_making_disabled'];
    }

    /**
     * Sets deal_making_disabled
     *
     * @param bool $deal_making_disabled deal_making_disabled
     *
     * @return $this
     */
    public function setDealMakingDisabled($deal_making_disabled)
    {
        $this->container['deal_making_disabled'] = $deal_making_disabled;

        return $this;
    }

    /**
     * Gets file_staging_threshold
     *
     * @return int
     */
    public function getFileStagingThreshold()
    {
        return $this->container['file_staging_threshold'];
    }

    /**
     * Sets file_staging_threshold
     *
     * @param int $file_staging_threshold file_staging_threshold
     *
     * @return $this
     */
    public function setFileStagingThreshold($file_staging_threshold)
    {
        $this->container['file_staging_threshold'] = $file_staging_threshold;

        return $this;
    }

    /**
     * Gets flags
     *
     * @return int
     */
    public function getFlags()
    {
        return $this->container['flags'];
    }

    /**
     * Sets flags
     *
     * @param int $flags flags
     *
     * @return $this
     */
    public function setFlags($flags)
    {
        $this->container['flags'] = $flags;

        return $this;
    }

    /**
     * Gets replication
     *
     * @return int
     */
    public function getReplication()
    {
        return $this->container['replication'];
    }

    /**
     * Sets replication
     *
     * @param int $replication replication
     *
     * @return $this
     */
    public function setReplication($replication)
    {
        $this->container['replication'] = $replication;

        return $this;
    }

    /**
     * Gets upload_endpoints
     *
     * @return string[]
     */
    public function getUploadEndpoints()
    {
        return $this->container['upload_endpoints'];
    }

    /**
     * Sets upload_endpoints
     *
     * @param string[] $upload_endpoints upload_endpoints
     *
     * @return $this
     */
    public function setUploadEndpoints($upload_endpoints)
    {
        $this->container['upload_endpoints'] = $upload_endpoints;

        return $this;
    }

    /**
     * Gets verified
     *
     * @return bool
     */
    public function getVerified()
    {
        return $this->container['verified'];
    }

    /**
     * Sets verified
     *
     * @param bool $verified verified
     *
     * @return $this
     */
    public function setVerified($verified)
    {
        $this->container['verified'] = $verified;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
