<?php
/**
 * UtilContent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.38
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UtilContent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UtilContent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'util.Content';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
'aggregate' => 'bool',
'aggregated_in' => 'int',
'cid' => '\Swagger\Client\Model\UtilDbCID',
'created_at' => 'string',
'dag_split' => 'bool',
'deal_status' => 'string',
'description' => 'string',
'failed' => 'bool',
'id' => 'int',
'location' => 'string',
'name' => 'string',
'offloaded' => 'bool',
'origins' => 'string',
'pin_meta' => 'string',
'pinning' => 'bool',
'pinning_status' => 'string',
'replace' => 'bool',
'replication' => 'int',
'size' => 'int',
'split_from' => 'int',
'type' => '\Swagger\Client\Model\UtilContentType',
'updated_at' => 'string',
'user_id' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
'aggregate' => null,
'aggregated_in' => null,
'cid' => null,
'created_at' => null,
'dag_split' => null,
'deal_status' => null,
'description' => null,
'failed' => null,
'id' => null,
'location' => null,
'name' => null,
'offloaded' => null,
'origins' => null,
'pin_meta' => null,
'pinning' => null,
'pinning_status' => null,
'replace' => null,
'replication' => null,
'size' => null,
'split_from' => null,
'type' => null,
'updated_at' => null,
'user_id' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'active',
'aggregate' => 'aggregate',
'aggregated_in' => 'aggregatedIn',
'cid' => 'cid',
'created_at' => 'createdAt',
'dag_split' => 'dagSplit',
'deal_status' => 'dealStatus',
'description' => 'description',
'failed' => 'failed',
'id' => 'id',
'location' => 'location',
'name' => 'name',
'offloaded' => 'offloaded',
'origins' => 'origins',
'pin_meta' => 'pinMeta',
'pinning' => 'pinning',
'pinning_status' => 'pinningStatus',
'replace' => 'replace',
'replication' => 'replication',
'size' => 'size',
'split_from' => 'splitFrom',
'type' => 'type',
'updated_at' => 'updatedAt',
'user_id' => 'userId'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
'aggregate' => 'setAggregate',
'aggregated_in' => 'setAggregatedIn',
'cid' => 'setCid',
'created_at' => 'setCreatedAt',
'dag_split' => 'setDagSplit',
'deal_status' => 'setDealStatus',
'description' => 'setDescription',
'failed' => 'setFailed',
'id' => 'setId',
'location' => 'setLocation',
'name' => 'setName',
'offloaded' => 'setOffloaded',
'origins' => 'setOrigins',
'pin_meta' => 'setPinMeta',
'pinning' => 'setPinning',
'pinning_status' => 'setPinningStatus',
'replace' => 'setReplace',
'replication' => 'setReplication',
'size' => 'setSize',
'split_from' => 'setSplitFrom',
'type' => 'setType',
'updated_at' => 'setUpdatedAt',
'user_id' => 'setUserId'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
'aggregate' => 'getAggregate',
'aggregated_in' => 'getAggregatedIn',
'cid' => 'getCid',
'created_at' => 'getCreatedAt',
'dag_split' => 'getDagSplit',
'deal_status' => 'getDealStatus',
'description' => 'getDescription',
'failed' => 'getFailed',
'id' => 'getId',
'location' => 'getLocation',
'name' => 'getName',
'offloaded' => 'getOffloaded',
'origins' => 'getOrigins',
'pin_meta' => 'getPinMeta',
'pinning' => 'getPinning',
'pinning_status' => 'getPinningStatus',
'replace' => 'getReplace',
'replication' => 'getReplication',
'size' => 'getSize',
'split_from' => 'getSplitFrom',
'type' => 'getType',
'updated_at' => 'getUpdatedAt',
'user_id' => 'getUserId'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['aggregate'] = isset($data['aggregate']) ? $data['aggregate'] : null;
        $this->container['aggregated_in'] = isset($data['aggregated_in']) ? $data['aggregated_in'] : null;
        $this->container['cid'] = isset($data['cid']) ? $data['cid'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['dag_split'] = isset($data['dag_split']) ? $data['dag_split'] : null;
        $this->container['deal_status'] = isset($data['deal_status']) ? $data['deal_status'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['failed'] = isset($data['failed']) ? $data['failed'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['offloaded'] = isset($data['offloaded']) ? $data['offloaded'] : null;
        $this->container['origins'] = isset($data['origins']) ? $data['origins'] : null;
        $this->container['pin_meta'] = isset($data['pin_meta']) ? $data['pin_meta'] : null;
        $this->container['pinning'] = isset($data['pinning']) ? $data['pinning'] : null;
        $this->container['pinning_status'] = isset($data['pinning_status']) ? $data['pinning_status'] : null;
        $this->container['replace'] = isset($data['replace']) ? $data['replace'] : null;
        $this->container['replication'] = isset($data['replication']) ? $data['replication'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['split_from'] = isset($data['split_from']) ? $data['split_from'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets aggregate
     *
     * @return bool
     */
    public function getAggregate()
    {
        return $this->container['aggregate'];
    }

    /**
     * Sets aggregate
     *
     * @param bool $aggregate aggregate
     *
     * @return $this
     */
    public function setAggregate($aggregate)
    {
        $this->container['aggregate'] = $aggregate;

        return $this;
    }

    /**
     * Gets aggregated_in
     *
     * @return int
     */
    public function getAggregatedIn()
    {
        return $this->container['aggregated_in'];
    }

    /**
     * Sets aggregated_in
     *
     * @param int $aggregated_in TODO: shift most of the 'state' booleans in here into a single state field, should make reasoning about things much simpler
     *
     * @return $this
     */
    public function setAggregatedIn($aggregated_in)
    {
        $this->container['aggregated_in'] = $aggregated_in;

        return $this;
    }

    /**
     * Gets cid
     *
     * @return \Swagger\Client\Model\UtilDbCID
     */
    public function getCid()
    {
        return $this->container['cid'];
    }

    /**
     * Sets cid
     *
     * @param \Swagger\Client\Model\UtilDbCID $cid cid
     *
     * @return $this
     */
    public function setCid($cid)
    {
        $this->container['cid'] = $cid;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets dag_split
     *
     * @return bool
     */
    public function getDagSplit()
    {
        return $this->container['dag_split'];
    }

    /**
     * Sets dag_split
     *
     * @param bool $dag_split If set, this content is part of a split dag. In such a case, the 'root' content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates)
     *
     * @return $this
     */
    public function setDagSplit($dag_split)
    {
        $this->container['dag_split'] = $dag_split;

        return $this;
    }

    /**
     * Gets deal_status
     *
     * @return string
     */
    public function getDealStatus()
    {
        return $this->container['deal_status'];
    }

    /**
     * Sets deal_status
     *
     * @param string $deal_status deal_status
     *
     * @return $this
     */
    public function setDealStatus($deal_status)
    {
        $this->container['deal_status'] = $deal_status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets failed
     *
     * @return bool
     */
    public function getFailed()
    {
        return $this->container['failed'];
    }

    /**
     * Sets failed
     *
     * @param bool $failed failed
     *
     * @return $this
     */
    public function setFailed($failed)
    {
        $this->container['failed'] = $failed;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets offloaded
     *
     * @return bool
     */
    public function getOffloaded()
    {
        return $this->container['offloaded'];
    }

    /**
     * Sets offloaded
     *
     * @param bool $offloaded offloaded
     *
     * @return $this
     */
    public function setOffloaded($offloaded)
    {
        $this->container['offloaded'] = $offloaded;

        return $this;
    }

    /**
     * Gets origins
     *
     * @return string
     */
    public function getOrigins()
    {
        return $this->container['origins'];
    }

    /**
     * Sets origins
     *
     * @param string $origins origins
     *
     * @return $this
     */
    public function setOrigins($origins)
    {
        $this->container['origins'] = $origins;

        return $this;
    }

    /**
     * Gets pin_meta
     *
     * @return string
     */
    public function getPinMeta()
    {
        return $this->container['pin_meta'];
    }

    /**
     * Sets pin_meta
     *
     * @param string $pin_meta pin_meta
     *
     * @return $this
     */
    public function setPinMeta($pin_meta)
    {
        $this->container['pin_meta'] = $pin_meta;

        return $this;
    }

    /**
     * Gets pinning
     *
     * @return bool
     */
    public function getPinning()
    {
        return $this->container['pinning'];
    }

    /**
     * Sets pinning
     *
     * @param bool $pinning pinning
     *
     * @return $this
     */
    public function setPinning($pinning)
    {
        $this->container['pinning'] = $pinning;

        return $this;
    }

    /**
     * Gets pinning_status
     *
     * @return string
     */
    public function getPinningStatus()
    {
        return $this->container['pinning_status'];
    }

    /**
     * Sets pinning_status
     *
     * @param string $pinning_status pinning_status
     *
     * @return $this
     */
    public function setPinningStatus($pinning_status)
    {
        $this->container['pinning_status'] = $pinning_status;

        return $this;
    }

    /**
     * Gets replace
     *
     * @return bool
     */
    public function getReplace()
    {
        return $this->container['replace'];
    }

    /**
     * Sets replace
     *
     * @param bool $replace replace
     *
     * @return $this
     */
    public function setReplace($replace)
    {
        $this->container['replace'] = $replace;

        return $this;
    }

    /**
     * Gets replication
     *
     * @return int
     */
    public function getReplication()
    {
        return $this->container['replication'];
    }

    /**
     * Sets replication
     *
     * @param int $replication replication
     *
     * @return $this
     */
    public function setReplication($replication)
    {
        $this->container['replication'] = $replication;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets split_from
     *
     * @return int
     */
    public function getSplitFrom()
    {
        return $this->container['split_from'];
    }

    /**
     * Sets split_from
     *
     * @param int $split_from split_from
     *
     * @return $this
     */
    public function setSplitFrom($split_from)
    {
        $this->container['split_from'] = $split_from;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Swagger\Client\Model\UtilContentType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Swagger\Client\Model\UtilContentType $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string $updated_at updated_at
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
