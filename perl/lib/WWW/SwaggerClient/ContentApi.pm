=begin comment

Estuary API

This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::ContentApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# content_add_car_post
#
# Add Car object
# 
# @param string $body Car (required)
# @param string $ignore_dupes Ignore Dupes (optional)
# @param string $filename Filename (optional)
{
    my $params = {
    'body' => {
        data_type => 'string',
        description => 'Car',
        required => '1',
    },
    'ignore_dupes' => {
        data_type => 'string',
        description => 'Ignore Dupes',
        required => '0',
    },
    'filename' => {
        data_type => 'string',
        description => 'Filename',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_add_car_post' } = { 
    	summary => 'Add Car object',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_add_car_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling content_add_car_post");
    }

    # parse inputs
    my $_resource_path = '/content/add-car';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ignore_dupes'}) {
        $query_params->{'ignore-dupes'} = $self->{api_client}->to_query_value($args{'ignore_dupes'});
    }

    # query params
    if ( exists $args{'filename'}) {
        $query_params->{'filename'} = $self->{api_client}->to_query_value($args{'filename'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_add_ipfs_post
#
# Add IPFS object
# 
# @param UtilContentAddIpfsBody $body IPFS Body (required)
# @param string $ignore_dupes Ignore Dupes (optional)
{
    my $params = {
    'body' => {
        data_type => 'UtilContentAddIpfsBody',
        description => 'IPFS Body',
        required => '1',
    },
    'ignore_dupes' => {
        data_type => 'string',
        description => 'Ignore Dupes',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_add_ipfs_post' } = { 
    	summary => 'Add IPFS object',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_add_ipfs_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling content_add_ipfs_post");
    }

    # parse inputs
    my $_resource_path = '/content/add-ipfs';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ignore_dupes'}) {
        $query_params->{'ignore-dupes'} = $self->{api_client}->to_query_value($args{'ignore_dupes'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_add_post
#
# Add new content
# 
# @param File $data File to upload (required)
# @param string $filename Filenam to use for upload (optional)
# @param string $coluuid Collection UUID (optional)
# @param int $replication Replication value (optional)
# @param string $ignore_dupes Ignore Dupes true/false (optional)
# @param string $lazy_provide Lazy Provide true/false (optional)
# @param string $dir Directory (optional)
{
    my $params = {
    'data' => {
        data_type => 'File',
        description => 'File to upload',
        required => '1',
    },
    'filename' => {
        data_type => 'string',
        description => 'Filenam to use for upload',
        required => '0',
    },
    'coluuid' => {
        data_type => 'string',
        description => 'Collection UUID',
        required => '0',
    },
    'replication' => {
        data_type => 'int',
        description => 'Replication value',
        required => '0',
    },
    'ignore_dupes' => {
        data_type => 'string',
        description => 'Ignore Dupes true/false',
        required => '0',
    },
    'lazy_provide' => {
        data_type => 'string',
        description => 'Lazy Provide true/false',
        required => '0',
    },
    'dir' => {
        data_type => 'string',
        description => 'Directory',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_add_post' } = { 
    	summary => 'Add new content',
        params => $params,
        returns => 'UtilContentAddResponse',
        };
}
# @return UtilContentAddResponse
#
sub content_add_post {
    my ($self, %args) = @_;

    # verify the required parameter 'data' is set
    unless (exists $args{'data'}) {
      croak("Missing the required parameter 'data' when calling content_add_post");
    }

    # parse inputs
    my $_resource_path = '/content/add';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('multipart/form-data');

    # query params
    if ( exists $args{'coluuid'}) {
        $query_params->{'coluuid'} = $self->{api_client}->to_query_value($args{'coluuid'});
    }

    # query params
    if ( exists $args{'replication'}) {
        $query_params->{'replication'} = $self->{api_client}->to_query_value($args{'replication'});
    }

    # query params
    if ( exists $args{'ignore_dupes'}) {
        $query_params->{'ignore-dupes'} = $self->{api_client}->to_query_value($args{'ignore_dupes'});
    }

    # query params
    if ( exists $args{'lazy_provide'}) {
        $query_params->{'lazy-provide'} = $self->{api_client}->to_query_value($args{'lazy_provide'});
    }

    # query params
    if ( exists $args{'dir'}) {
        $query_params->{'dir'} = $self->{api_client}->to_query_value($args{'dir'});
    }

    # form params
    if ( exists $args{'data'} ) {
        $form_params->{'data'} = [] unless defined $form_params->{'data'};
        push @{$form_params->{'data'}}, $args{'data'};
            }
    
    # form params
    if ( exists $args{'filename'} ) {
                $form_params->{'filename'} = $self->{api_client}->to_form_value($args{'filename'});
    }
    
    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('UtilContentAddResponse', $response);
    return $_response_object;
}

#
# content_aggregated_content_get
#
# Get aggregated content stats
# 
# @param string $content Content ID (required)
{
    my $params = {
    'content' => {
        data_type => 'string',
        description => 'Content ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_aggregated_content_get' } = { 
    	summary => 'Get aggregated content stats',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub content_aggregated_content_get {
    my ($self, %args) = @_;

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling content_aggregated_content_get");
    }

    # parse inputs
    my $_resource_path = '/content/aggregated/{content}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'content'}) {
        my $_base_variable = "{" . "content" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'content'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# content_all_deals_get
#
# Get all deals for a user
# 
# @param string $begin Begin (required)
# @param string $duration Duration (required)
# @param string $all All (required)
{
    my $params = {
    'begin' => {
        data_type => 'string',
        description => 'Begin',
        required => '1',
    },
    'duration' => {
        data_type => 'string',
        description => 'Duration',
        required => '1',
    },
    'all' => {
        data_type => 'string',
        description => 'All',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_all_deals_get' } = { 
    	summary => 'Get all deals for a user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_all_deals_get {
    my ($self, %args) = @_;

    # verify the required parameter 'begin' is set
    unless (exists $args{'begin'}) {
      croak("Missing the required parameter 'begin' when calling content_all_deals_get");
    }

    # verify the required parameter 'duration' is set
    unless (exists $args{'duration'}) {
      croak("Missing the required parameter 'duration' when calling content_all_deals_get");
    }

    # verify the required parameter 'all' is set
    unless (exists $args{'all'}) {
      croak("Missing the required parameter 'all' when calling content_all_deals_get");
    }

    # parse inputs
    my $_resource_path = '/content/all-deals';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'begin'}) {
        $query_params->{'begin'} = $self->{api_client}->to_query_value($args{'begin'});
    }

    # query params
    if ( exists $args{'duration'}) {
        $query_params->{'duration'} = $self->{api_client}->to_query_value($args{'duration'});
    }

    # query params
    if ( exists $args{'all'}) {
        $query_params->{'all'} = $self->{api_client}->to_query_value($args{'all'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_bw_usage_content_get
#
# Get content bandwidth
# 
# @param string $content Content ID (required)
{
    my $params = {
    'content' => {
        data_type => 'string',
        description => 'Content ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_bw_usage_content_get' } = { 
    	summary => 'Get content bandwidth',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_bw_usage_content_get {
    my ($self, %args) = @_;

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling content_bw_usage_content_get");
    }

    # parse inputs
    my $_resource_path = '/content/bw-usage/{content}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'content'}) {
        my $_base_variable = "{" . "content" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'content'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_create_post
#
# Add a new content
# 
# @param UtilContentCreateBody $req Content (required)
# @param string $ignore_dupes Ignore Dupes (optional)
{
    my $params = {
    'req' => {
        data_type => 'UtilContentCreateBody',
        description => 'Content',
        required => '1',
    },
    'ignore_dupes' => {
        data_type => 'string',
        description => 'Ignore Dupes',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_create_post' } = { 
    	summary => 'Add a new content',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_create_post {
    my ($self, %args) = @_;

    # verify the required parameter 'req' is set
    unless (exists $args{'req'}) {
      croak("Missing the required parameter 'req' when calling content_create_post");
    }

    # parse inputs
    my $_resource_path = '/content/create';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'ignore_dupes'}) {
        $query_params->{'ignore-dupes'} = $self->{api_client}->to_query_value($args{'ignore_dupes'});
    }

    my $_body_data;
    # body params
    if ( exists $args{'req'}) {
        $_body_data = $args{'req'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_deals_get
#
# Content with deals
# 
# @param int $limit Limit (optional)
# @param int $offset Offset (optional)
{
    my $params = {
    'limit' => {
        data_type => 'int',
        description => 'Limit',
        required => '0',
    },
    'offset' => {
        data_type => 'int',
        description => 'Offset',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_deals_get' } = { 
    	summary => 'Content with deals',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_deals_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/content/deals';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_ensure_replication_datacid_get
#
# Ensure Replication
# 
# @param string $datacid Data CID (required)
{
    my $params = {
    'datacid' => {
        data_type => 'string',
        description => 'Data CID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_ensure_replication_datacid_get' } = { 
    	summary => 'Ensure Replication',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_ensure_replication_datacid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'datacid' is set
    unless (exists $args{'datacid'}) {
      croak("Missing the required parameter 'datacid' when calling content_ensure_replication_datacid_get");
    }

    # parse inputs
    my $_resource_path = '/content/ensure-replication/{datacid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'datacid'}) {
        my $_base_variable = "{" . "datacid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'datacid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_failures_content_get
#
# List all failures for a content
# 
# @param string $content Content ID (required)
{
    my $params = {
    'content' => {
        data_type => 'string',
        description => 'Content ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_failures_content_get' } = { 
    	summary => 'List all failures for a content',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub content_failures_content_get {
    my ($self, %args) = @_;

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling content_failures_content_get");
    }

    # parse inputs
    my $_resource_path = '/content/failures/{content}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'content'}) {
        my $_base_variable = "{" . "content" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'content'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# content_id_get
#
# Content
# 
# @param int $id Content ID (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Content ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_id_get' } = { 
    	summary => 'Content',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling content_id_get");
    }

    # parse inputs
    my $_resource_path = '/content/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_importdeal_post
#
# Import a deal
# 
# @param MainImportDealBody $body Import a deal (required)
{
    my $params = {
    'body' => {
        data_type => 'MainImportDealBody',
        description => 'Import a deal',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_importdeal_post' } = { 
    	summary => 'Import a deal',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_importdeal_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling content_importdeal_post");
    }

    # parse inputs
    my $_resource_path = '/content/importdeal';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_list_get
#
# List all pinned content
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'content_list_get' } = { 
    	summary => 'List all pinned content',
        params => $params,
        returns => 'ARRAY[string]',
        };
}
# @return ARRAY[string]
#
sub content_list_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/content/list';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[string]', $response);
    return $_response_object;
}

#
# content_read_cont_get
#
# Read content
# 
# @param string $cont CID (required)
{
    my $params = {
    'cont' => {
        data_type => 'string',
        description => 'CID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_read_cont_get' } = { 
    	summary => 'Read content',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_read_cont_get {
    my ($self, %args) = @_;

    # verify the required parameter 'cont' is set
    unless (exists $args{'cont'}) {
      croak("Missing the required parameter 'cont' when calling content_read_cont_get");
    }

    # parse inputs
    my $_resource_path = '/content/read/{cont}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'cont'}) {
        my $_base_variable = "{" . "cont" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'cont'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_staging_zones_get
#
# Get staging zone for user
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'content_staging_zones_get' } = { 
    	summary => 'Get staging zone for user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_staging_zones_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/content/staging-zones';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_stats_get
#
# Get content statistics
# 
# @param string $limit limit (required)
# @param string $offset offset (required)
{
    my $params = {
    'limit' => {
        data_type => 'string',
        description => 'limit',
        required => '1',
    },
    'offset' => {
        data_type => 'string',
        description => 'offset',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_stats_get' } = { 
    	summary => 'Get content statistics',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_stats_get {
    my ($self, %args) = @_;

    # verify the required parameter 'limit' is set
    unless (exists $args{'limit'}) {
      croak("Missing the required parameter 'limit' when calling content_stats_get");
    }

    # verify the required parameter 'offset' is set
    unless (exists $args{'offset'}) {
      croak("Missing the required parameter 'offset' when calling content_stats_get");
    }

    # parse inputs
    my $_resource_path = '/content/stats';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'limit'}) {
        $query_params->{'limit'} = $self->{api_client}->to_query_value($args{'limit'});
    }

    # query params
    if ( exists $args{'offset'}) {
        $query_params->{'offset'} = $self->{api_client}->to_query_value($args{'offset'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# content_status_id_get
#
# Content Status
# 
# @param int $id Content ID (required)
{
    my $params = {
    'id' => {
        data_type => 'int',
        description => 'Content ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'content_status_id_get' } = { 
    	summary => 'Content Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub content_status_id_get {
    my ($self, %args) = @_;

    # verify the required parameter 'id' is set
    unless (exists $args{'id'}) {
      croak("Missing the required parameter 'id' when calling content_status_id_get");
    }

    # parse inputs
    my $_resource_path = '/content/status/{id}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'id'}) {
        my $_base_variable = "{" . "id" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'id'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
