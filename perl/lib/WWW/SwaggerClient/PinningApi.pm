=begin comment

Estuary API

This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::PinningApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# pinning_pins_get
#
# List all pin status objects
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'pinning_pins_get' } = { 
    	summary => 'List all pin status objects',
        params => $params,
        returns => 'TypesIpfsListPinStatusResponse',
        };
}
# @return TypesIpfsListPinStatusResponse
#
sub pinning_pins_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/pinning/pins';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TypesIpfsListPinStatusResponse', $response);
    return $_response_object;
}

#
# pinning_pins_pinid_delete
#
# Delete a pinned object
# 
# @param string $pinid Pin ID (required)
{
    my $params = {
    'pinid' => {
        data_type => 'string',
        description => 'Pin ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pinning_pins_pinid_delete' } = { 
    	summary => 'Delete a pinned object',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub pinning_pins_pinid_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'pinid' is set
    unless (exists $args{'pinid'}) {
      croak("Missing the required parameter 'pinid' when calling pinning_pins_pinid_delete");
    }

    # parse inputs
    my $_resource_path = '/pinning/pins/{pinid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pinid'}) {
        my $_base_variable = "{" . "pinid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pinid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# pinning_pins_pinid_get
#
# Get a pin status object
# 
# @param string $pinid cid (required)
{
    my $params = {
    'pinid' => {
        data_type => 'string',
        description => 'cid',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pinning_pins_pinid_get' } = { 
    	summary => 'Get a pin status object',
        params => $params,
        returns => 'TypesIpfsPinStatusResponse',
        };
}
# @return TypesIpfsPinStatusResponse
#
sub pinning_pins_pinid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'pinid' is set
    unless (exists $args{'pinid'}) {
      croak("Missing the required parameter 'pinid' when calling pinning_pins_pinid_get");
    }

    # parse inputs
    my $_resource_path = '/pinning/pins/{pinid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pinid'}) {
        my $_base_variable = "{" . "pinid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pinid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TypesIpfsPinStatusResponse', $response);
    return $_response_object;
}

#
# pinning_pins_pinid_post
#
# Replace a pinned object
# 
# @param string $pinid Pin ID (required)
# @param string $cid CID of new pin (required)
# @param string $name Name (filename) of new pin (optional)
# @param string $origins Origins of new pin (optional)
# @param string $meta Meta information of new pin (optional)
{
    my $params = {
    'pinid' => {
        data_type => 'string',
        description => 'Pin ID',
        required => '1',
    },
    'cid' => {
        data_type => 'string',
        description => 'CID of new pin',
        required => '1',
    },
    'name' => {
        data_type => 'string',
        description => 'Name (filename) of new pin',
        required => '0',
    },
    'origins' => {
        data_type => 'string',
        description => 'Origins of new pin',
        required => '0',
    },
    'meta' => {
        data_type => 'string',
        description => 'Meta information of new pin',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'pinning_pins_pinid_post' } = { 
    	summary => 'Replace a pinned object',
        params => $params,
        returns => 'TypesIpfsPinStatusResponse',
        };
}
# @return TypesIpfsPinStatusResponse
#
sub pinning_pins_pinid_post {
    my ($self, %args) = @_;

    # verify the required parameter 'pinid' is set
    unless (exists $args{'pinid'}) {
      croak("Missing the required parameter 'pinid' when calling pinning_pins_pinid_post");
    }

    # verify the required parameter 'cid' is set
    unless (exists $args{'cid'}) {
      croak("Missing the required parameter 'cid' when calling pinning_pins_pinid_post");
    }

    # parse inputs
    my $_resource_path = '/pinning/pins/{pinid}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'pinid'}) {
        my $_base_variable = "{" . "pinid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pinid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'cid'}) {
        $_body_data = $args{'cid'};
    }

    # body params
    if ( exists $args{'name'}) {
        $_body_data = $args{'name'};
    }

    # body params
    if ( exists $args{'origins'}) {
        $_body_data = $args{'origins'};
    }

    # body params
    if ( exists $args{'meta'}) {
        $_body_data = $args{'meta'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TypesIpfsPinStatusResponse', $response);
    return $_response_object;
}

#
# pinning_pins_post
#
# Add and pin object
# 
# @param TypesIpfsPin $pin Pin Body {cid:cid, name:name} (required)
{
    my $params = {
    'pin' => {
        data_type => 'TypesIpfsPin',
        description => 'Pin Body {cid:cid, name:name}',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'pinning_pins_post' } = { 
    	summary => 'Add and pin object',
        params => $params,
        returns => 'TypesIpfsPinStatusResponse',
        };
}
# @return TypesIpfsPinStatusResponse
#
sub pinning_pins_post {
    my ($self, %args) = @_;

    # verify the required parameter 'pin' is set
    unless (exists $args{'pin'}) {
      croak("Missing the required parameter 'pin' when calling pinning_pins_post");
    }

    # parse inputs
    my $_resource_path = '/pinning/pins';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'pin'}) {
        $_body_data = $args{'pin'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('TypesIpfsPinStatusResponse', $response);
    return $_response_object;
}

1;
