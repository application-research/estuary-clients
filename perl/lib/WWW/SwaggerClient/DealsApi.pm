=begin comment

Estuary API

This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::DealsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# deal_estimate_post
#
# Estimate the cost of a deal
# 
# @param MainEstimateDealBody $body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks (required)
{
    my $params = {
    'body' => {
        data_type => 'MainEstimateDealBody',
        description => 'The size of the deal in bytes, the replication factor, and the duration of the deal in blocks',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deal_estimate_post' } = { 
    	summary => 'Estimate the cost of a deal',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_estimate_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling deal_estimate_post");
    }

    # parse inputs
    my $_resource_path = '/deal/estimate';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_info_dealid_get
#
# Get Deal Info
# 
# @param int $dealid Deal ID (required)
{
    my $params = {
    'dealid' => {
        data_type => 'int',
        description => 'Deal ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deal_info_dealid_get' } = { 
    	summary => 'Get Deal Info',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_info_dealid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'dealid' is set
    unless (exists $args{'dealid'}) {
      croak("Missing the required parameter 'dealid' when calling deal_info_dealid_get");
    }

    # parse inputs
    my $_resource_path = '/deal/info/{dealid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'dealid'}) {
        my $_base_variable = "{" . "dealid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'dealid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_proposal_propcid_get
#
# Get Proposal
# 
# @param string $propcid Proposal CID (required)
{
    my $params = {
    'propcid' => {
        data_type => 'string',
        description => 'Proposal CID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deal_proposal_propcid_get' } = { 
    	summary => 'Get Proposal',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_proposal_propcid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'propcid' is set
    unless (exists $args{'propcid'}) {
      croak("Missing the required parameter 'propcid' when calling deal_proposal_propcid_get");
    }

    # parse inputs
    my $_resource_path = '/deal/proposal/{propcid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'propcid'}) {
        my $_base_variable = "{" . "propcid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'propcid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_query_miner_get
#
# Query Ask
# 
# @param string $miner CID (required)
{
    my $params = {
    'miner' => {
        data_type => 'string',
        description => 'CID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deal_query_miner_get' } = { 
    	summary => 'Query Ask',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_query_miner_get {
    my ($self, %args) = @_;

    # verify the required parameter 'miner' is set
    unless (exists $args{'miner'}) {
      croak("Missing the required parameter 'miner' when calling deal_query_miner_get");
    }

    # parse inputs
    my $_resource_path = '/deal/query/{miner}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'miner'}) {
        my $_base_variable = "{" . "miner" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'miner'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_status_by_proposal_propcid_get
#
# Get Deal Status by PropCid
# 
# @param string $propcid PropCid (required)
{
    my $params = {
    'propcid' => {
        data_type => 'string',
        description => 'PropCid',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deal_status_by_proposal_propcid_get' } = { 
    	summary => 'Get Deal Status by PropCid',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_status_by_proposal_propcid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'propcid' is set
    unless (exists $args{'propcid'}) {
      croak("Missing the required parameter 'propcid' when calling deal_status_by_proposal_propcid_get");
    }

    # parse inputs
    my $_resource_path = '/deal/status-by-proposal/{propcid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'propcid'}) {
        my $_base_variable = "{" . "propcid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'propcid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_status_miner_propcid_get
#
# Deal Status
# 
# @param string $miner Miner (required)
# @param string $propcid Proposal CID (required)
{
    my $params = {
    'miner' => {
        data_type => 'string',
        description => 'Miner',
        required => '1',
    },
    'propcid' => {
        data_type => 'string',
        description => 'Proposal CID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deal_status_miner_propcid_get' } = { 
    	summary => 'Deal Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_status_miner_propcid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'miner' is set
    unless (exists $args{'miner'}) {
      croak("Missing the required parameter 'miner' when calling deal_status_miner_propcid_get");
    }

    # verify the required parameter 'propcid' is set
    unless (exists $args{'propcid'}) {
      croak("Missing the required parameter 'propcid' when calling deal_status_miner_propcid_get");
    }

    # parse inputs
    my $_resource_path = '/deal/status/{miner}/{propcid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'miner'}) {
        my $_base_variable = "{" . "miner" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'miner'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'propcid'}) {
        my $_base_variable = "{" . "propcid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'propcid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_transfer_in_progress_get
#
# Transfer In Progress
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'deal_transfer_in_progress_get' } = { 
    	summary => 'Transfer In Progress',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_transfer_in_progress_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/deal/transfer/in-progress';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deal_transfer_status_post
#
# Transfer Status
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'deal_transfer_status_post' } = { 
    	summary => 'Transfer Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deal_transfer_status_post {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/deal/transfer/status';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deals_failures_get
#
# Get storage failures for user
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'deals_failures_get' } = { 
    	summary => 'Get storage failures for user',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deals_failures_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/deals/failures';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deals_make_miner_post
#
# Make Deal
# 
# @param string $miner Miner (required)
# @param string $deal_request Deal Request (required)
{
    my $params = {
    'miner' => {
        data_type => 'string',
        description => 'Miner',
        required => '1',
    },
    'deal_request' => {
        data_type => 'string',
        description => 'Deal Request',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deals_make_miner_post' } = { 
    	summary => 'Make Deal',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deals_make_miner_post {
    my ($self, %args) = @_;

    # verify the required parameter 'miner' is set
    unless (exists $args{'miner'}) {
      croak("Missing the required parameter 'miner' when calling deals_make_miner_post");
    }

    # verify the required parameter 'deal_request' is set
    unless (exists $args{'deal_request'}) {
      croak("Missing the required parameter 'deal_request' when calling deals_make_miner_post");
    }

    # parse inputs
    my $_resource_path = '/deals/make/{miner}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'miner'}) {
        my $_base_variable = "{" . "miner" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'miner'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'deal_request'}) {
        $_body_data = $args{'deal_request'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# deals_status_deal_get
#
# Get Deal Status
# 
# @param int $deal Deal ID (required)
{
    my $params = {
    'deal' => {
        data_type => 'int',
        description => 'Deal ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'deals_status_deal_get' } = { 
    	summary => 'Get Deal Status',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub deals_status_deal_get {
    my ($self, %args) = @_;

    # verify the required parameter 'deal' is set
    unless (exists $args{'deal'}) {
      croak("Missing the required parameter 'deal' when calling deals_status_deal_get");
    }

    # parse inputs
    my $_resource_path = '/deals/status/{deal}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'deal'}) {
        my $_base_variable = "{" . "deal" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'deal'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# public_deals_failures_get
#
# Get storage failures
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'public_deals_failures_get' } = { 
    	summary => 'Get storage failures',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub public_deals_failures_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/public/deals/failures';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

#
# public_miners_storage_query_miner_get
#
# Query Ask
# 
# @param string $miner CID (required)
{
    my $params = {
    'miner' => {
        data_type => 'string',
        description => 'CID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'public_miners_storage_query_miner_get' } = { 
    	summary => 'Query Ask',
        params => $params,
        returns => undef,
        };
}
# @return void
#
sub public_miners_storage_query_miner_get {
    my ($self, %args) = @_;

    # verify the required parameter 'miner' is set
    unless (exists $args{'miner'}) {
      croak("Missing the required parameter 'miner' when calling public_miners_storage_query_miner_get");
    }

    # parse inputs
    my $_resource_path = '/public/miners/storage/query/{miner}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'miner'}) {
        my $_base_variable = "{" . "miner" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'miner'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    return;
}

1;
