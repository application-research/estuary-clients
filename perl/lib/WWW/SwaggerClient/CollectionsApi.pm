=begin comment

Estuary API

This is the API for the Estuary application.

OpenAPI spec version: 0.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::CollectionsApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class = shift;
    my $api_client;

    if ($_[0] && ref $_[0] && ref $_[0] eq 'WWW::SwaggerClient::ApiClient' ) {
        $api_client = $_[0];
    } else {
        $api_client = WWW::SwaggerClient::ApiClient->new(@_);
    }

    bless { api_client => $api_client }, $class;

}


#
# collections_coluuid_commit_post
#
# Produce a CID of the collection contents
# 
# @param string $coluuid coluuid (required)
{
    my $params = {
    'coluuid' => {
        data_type => 'string',
        description => 'coluuid',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_coluuid_commit_post' } = { 
    	summary => 'Produce a CID of the collection contents',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub collections_coluuid_commit_post {
    my ($self, %args) = @_;

    # verify the required parameter 'coluuid' is set
    unless (exists $args{'coluuid'}) {
      croak("Missing the required parameter 'coluuid' when calling collections_coluuid_commit_post");
    }

    # parse inputs
    my $_resource_path = '/collections/{coluuid}/commit';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'coluuid'}) {
        my $_base_variable = "{" . "coluuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'coluuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# collections_coluuid_contents_delete
#
# Deletes a content from a collection
# 
# @param string $coluuid Collection ID (required)
# @param string $contentid Content ID (required)
# @param MainDeleteContentFromCollectionBody $body Variable to use when filtering for files (must be either &#39;path&#39; or &#39;content_id&#39;) (required)
{
    my $params = {
    'coluuid' => {
        data_type => 'string',
        description => 'Collection ID',
        required => '1',
    },
    'contentid' => {
        data_type => 'string',
        description => 'Content ID',
        required => '1',
    },
    'body' => {
        data_type => 'MainDeleteContentFromCollectionBody',
        description => 'Variable to use when filtering for files (must be either &#39;path&#39; or &#39;content_id&#39;)',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_coluuid_contents_delete' } = { 
    	summary => 'Deletes a content from a collection',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub collections_coluuid_contents_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'coluuid' is set
    unless (exists $args{'coluuid'}) {
      croak("Missing the required parameter 'coluuid' when calling collections_coluuid_contents_delete");
    }

    # verify the required parameter 'contentid' is set
    unless (exists $args{'contentid'}) {
      croak("Missing the required parameter 'contentid' when calling collections_coluuid_contents_delete");
    }

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling collections_coluuid_contents_delete");
    }

    # parse inputs
    my $_resource_path = '/collections/{coluuid}/contents';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'coluuid'}) {
        my $_base_variable = "{" . "coluuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'coluuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'contentid'}) {
        my $_base_variable = "{" . "contentid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'contentid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# collections_coluuid_delete
#
# Deletes a collection
# 
# @param string $coluuid Collection ID (required)
{
    my $params = {
    'coluuid' => {
        data_type => 'string',
        description => 'Collection ID',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_coluuid_delete' } = { 
    	summary => 'Deletes a collection',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub collections_coluuid_delete {
    my ($self, %args) = @_;

    # verify the required parameter 'coluuid' is set
    unless (exists $args{'coluuid'}) {
      croak("Missing the required parameter 'coluuid' when calling collections_coluuid_delete");
    }

    # parse inputs
    my $_resource_path = '/collections/{coluuid}';

    my $_method = 'DELETE';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept();
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'coluuid'}) {
        my $_base_variable = "{" . "coluuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'coluuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# collections_coluuid_get
#
# Get contents in a collection
# 
# @param string $coluuid coluuid (required)
# @param string $dir Directory (optional)
{
    my $params = {
    'coluuid' => {
        data_type => 'string',
        description => 'coluuid',
        required => '1',
    },
    'dir' => {
        data_type => 'string',
        description => 'Directory',
        required => '0',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_coluuid_get' } = { 
    	summary => 'Get contents in a collection',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub collections_coluuid_get {
    my ($self, %args) = @_;

    # verify the required parameter 'coluuid' is set
    unless (exists $args{'coluuid'}) {
      croak("Missing the required parameter 'coluuid' when calling collections_coluuid_get");
    }

    # parse inputs
    my $_resource_path = '/collections/{coluuid}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'dir'}) {
        $query_params->{'dir'} = $self->{api_client}->to_query_value($args{'dir'});
    }

    # path params
    if ( exists $args{'coluuid'}) {
        my $_base_variable = "{" . "coluuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'coluuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# collections_coluuid_post
#
# Add contents to a collection
# 
# @param string $coluuid coluuid (required)
# @param ARRAY[int] $content_i_ds Content IDs to add to collection (required)
{
    my $params = {
    'coluuid' => {
        data_type => 'string',
        description => 'coluuid',
        required => '1',
    },
    'content_i_ds' => {
        data_type => 'ARRAY[int]',
        description => 'Content IDs to add to collection',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_coluuid_post' } = { 
    	summary => 'Add contents to a collection',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub collections_coluuid_post {
    my ($self, %args) = @_;

    # verify the required parameter 'coluuid' is set
    unless (exists $args{'coluuid'}) {
      croak("Missing the required parameter 'coluuid' when calling collections_coluuid_post");
    }

    # verify the required parameter 'content_i_ds' is set
    unless (exists $args{'content_i_ds'}) {
      croak("Missing the required parameter 'content_i_ds' when calling collections_coluuid_post");
    }

    # parse inputs
    my $_resource_path = '/collections/{coluuid}';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type('application/json');

    # path params
    if ( exists $args{'coluuid'}) {
        my $_base_variable = "{" . "coluuid" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'coluuid'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # body params
    if ( exists $args{'content_i_ds'}) {
        $_body_data = $args{'content_i_ds'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# collections_fs_add_post
#
# Add a file to a collection
# 
# @param string $coluuid Collection ID (required)
# @param string $content Content (required)
# @param string $path Path to file (required)
{
    my $params = {
    'coluuid' => {
        data_type => 'string',
        description => 'Collection ID',
        required => '1',
    },
    'content' => {
        data_type => 'string',
        description => 'Content',
        required => '1',
    },
    'path' => {
        data_type => 'string',
        description => 'Path to file',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_fs_add_post' } = { 
    	summary => 'Add a file to a collection',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub collections_fs_add_post {
    my ($self, %args) = @_;

    # verify the required parameter 'coluuid' is set
    unless (exists $args{'coluuid'}) {
      croak("Missing the required parameter 'coluuid' when calling collections_fs_add_post");
    }

    # verify the required parameter 'content' is set
    unless (exists $args{'content'}) {
      croak("Missing the required parameter 'content' when calling collections_fs_add_post");
    }

    # verify the required parameter 'path' is set
    unless (exists $args{'path'}) {
      croak("Missing the required parameter 'path' when calling collections_fs_add_post");
    }

    # parse inputs
    my $_resource_path = '/collections/fs/add';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'coluuid'}) {
        $query_params->{'coluuid'} = $self->{api_client}->to_query_value($args{'coluuid'});
    }

    # query params
    if ( exists $args{'content'}) {
        $query_params->{'content'} = $self->{api_client}->to_query_value($args{'content'});
    }

    # query params
    if ( exists $args{'path'}) {
        $query_params->{'path'} = $self->{api_client}->to_query_value($args{'path'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# collections_get
#
# List all collections
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'collections_get' } = { 
    	summary => 'List all collections',
        params => $params,
        returns => 'ARRAY[ARRAY[CollectionsCollection]]',
        };
}
# @return ARRAY[ARRAY[CollectionsCollection]]
#
sub collections_get {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/collections/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('ARRAY[ARRAY[CollectionsCollection]]', $response);
    return $_response_object;
}

#
# collections_post
#
# Create a new collection
# 
# @param MainCreateCollectionBody $body Collection name and description (required)
{
    my $params = {
    'body' => {
        data_type => 'MainCreateCollectionBody',
        description => 'Collection name and description',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'collections_post' } = { 
    	summary => 'Create a new collection',
        params => $params,
        returns => 'CollectionsCollection',
        };
}
# @return CollectionsCollection
#
sub collections_post {
    my ($self, %args) = @_;

    # verify the required parameter 'body' is set
    unless (exists $args{'body'}) {
      croak("Missing the required parameter 'body' when calling collections_post");
    }

    # parse inputs
    my $_resource_path = '/collections/';

    my $_method = 'POST';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # body params
    if ( exists $args{'body'}) {
        $_body_data = $args{'body'};
    }

    # authentication setting, if any
    my $auth_settings = [qw(bearerAuth )];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('CollectionsCollection', $response);
    return $_response_object;
}

1;
