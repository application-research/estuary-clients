/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUtil.ContentAddIpfsBody.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGUtil.ContentAddIpfsBody::SWGUtil.ContentAddIpfsBody(QString json) {
    init();
    this->fromJson(json);
}

SWGUtil.ContentAddIpfsBody::SWGUtil.ContentAddIpfsBody() {
    init();
}

SWGUtil.ContentAddIpfsBody::~SWGUtil.ContentAddIpfsBody() {
    this->cleanup();
}

void
SWGUtil.ContentAddIpfsBody::init() {
    coluuid = new QString("");
    m_coluuid_isSet = false;
    dir = new QString("");
    m_dir_isSet = false;
    filename = new QString("");
    m_filename_isSet = false;
    peers = new QList<QString*>();
    m_peers_isSet = false;
    root = new QString("");
    m_root_isSet = false;
}

void
SWGUtil.ContentAddIpfsBody::cleanup() {
    if(coluuid != nullptr) { 
        delete coluuid;
    }
    if(dir != nullptr) { 
        delete dir;
    }
    if(filename != nullptr) { 
        delete filename;
    }
    if(peers != nullptr) { 
        auto arr = peers;
        for(auto o: *arr) { 
            delete o;
        }
        delete peers;
    }
    if(root != nullptr) { 
        delete root;
    }
}

SWGUtil.ContentAddIpfsBody*
SWGUtil.ContentAddIpfsBody::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUtil.ContentAddIpfsBody::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&coluuid, pJson["coluuid"], "QString", "QString");
    
    ::Swagger::setValue(&dir, pJson["dir"], "QString", "QString");
    
    ::Swagger::setValue(&filename, pJson["filename"], "QString", "QString");
    
    
    ::Swagger::setValue(&peers, pJson["peers"], "QList", "QString");
    ::Swagger::setValue(&root, pJson["root"], "QString", "QString");
    
}

QString
SWGUtil.ContentAddIpfsBody::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGUtil.ContentAddIpfsBody::asJsonObject() {
    QJsonObject obj;
    if(coluuid != nullptr && *coluuid != QString("")){
        toJsonValue(QString("coluuid"), coluuid, obj, QString("QString"));
    }
    if(dir != nullptr && *dir != QString("")){
        toJsonValue(QString("dir"), dir, obj, QString("QString"));
    }
    if(filename != nullptr && *filename != QString("")){
        toJsonValue(QString("filename"), filename, obj, QString("QString"));
    }
    if(peers->size() > 0){
        toJsonArray((QList<void*>*)peers, obj, "peers", "QString");
    }
    if(root != nullptr && *root != QString("")){
        toJsonValue(QString("root"), root, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGUtil.ContentAddIpfsBody::getColuuid() {
    return coluuid;
}
void
SWGUtil.ContentAddIpfsBody::setColuuid(QString* coluuid) {
    this->coluuid = coluuid;
    this->m_coluuid_isSet = true;
}

QString*
SWGUtil.ContentAddIpfsBody::getDir() {
    return dir;
}
void
SWGUtil.ContentAddIpfsBody::setDir(QString* dir) {
    this->dir = dir;
    this->m_dir_isSet = true;
}

QString*
SWGUtil.ContentAddIpfsBody::getFilename() {
    return filename;
}
void
SWGUtil.ContentAddIpfsBody::setFilename(QString* filename) {
    this->filename = filename;
    this->m_filename_isSet = true;
}

QList<QString*>*
SWGUtil.ContentAddIpfsBody::getPeers() {
    return peers;
}
void
SWGUtil.ContentAddIpfsBody::setPeers(QList<QString*>* peers) {
    this->peers = peers;
    this->m_peers_isSet = true;
}

QString*
SWGUtil.ContentAddIpfsBody::getRoot() {
    return root;
}
void
SWGUtil.ContentAddIpfsBody::setRoot(QString* root) {
    this->root = root;
    this->m_root_isSet = true;
}


bool
SWGUtil.ContentAddIpfsBody::isSet(){
    bool isObjectUpdated = false;
    do{
        if(coluuid != nullptr && *coluuid != QString("")){ isObjectUpdated = true; break;}
        if(dir != nullptr && *dir != QString("")){ isObjectUpdated = true; break;}
        if(filename != nullptr && *filename != QString("")){ isObjectUpdated = true; break;}
        if(peers->size() > 0){ isObjectUpdated = true; break;}
        if(root != nullptr && *root != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

