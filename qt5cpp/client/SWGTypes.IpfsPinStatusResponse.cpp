/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGTypes.IpfsPinStatusResponse.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGTypes.IpfsPinStatusResponse::SWGTypes.IpfsPinStatusResponse(QString json) {
    init();
    this->fromJson(json);
}

SWGTypes.IpfsPinStatusResponse::SWGTypes.IpfsPinStatusResponse() {
    init();
}

SWGTypes.IpfsPinStatusResponse::~SWGTypes.IpfsPinStatusResponse() {
    this->cleanup();
}

void
SWGTypes.IpfsPinStatusResponse::init() {
    created = new QString("");
    m_created_isSet = false;
    delegates = new QList<QString*>();
    m_delegates_isSet = false;
    info = NULL;
    m_info_isSet = false;
    pin = new SWGTypes.IpfsPin();
    m_pin_isSet = false;
    requestid = new QString("");
    m_requestid_isSet = false;
    status = new QString("");
    m_status_isSet = false;
}

void
SWGTypes.IpfsPinStatusResponse::cleanup() {
    if(created != nullptr) { 
        delete created;
    }
    if(delegates != nullptr) { 
        auto arr = delegates;
        for(auto o: *arr) { 
            delete o;
        }
        delete delegates;
    }
    if(info != nullptr) { 
        delete info;
    }
    if(pin != nullptr) { 
        delete pin;
    }
    if(requestid != nullptr) { 
        delete requestid;
    }
    if(status != nullptr) { 
        delete status;
    }
}

SWGTypes.IpfsPinStatusResponse*
SWGTypes.IpfsPinStatusResponse::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTypes.IpfsPinStatusResponse::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&created, pJson["created"], "QString", "QString");
    
    
    ::Swagger::setValue(&delegates, pJson["delegates"], "QList", "QString");
    ::Swagger::setValue(&info, pJson["info"], "SWGObject", "SWGObject");
    
    ::Swagger::setValue(&pin, pJson["pin"], "SWGTypes.IpfsPin", "SWGTypes.IpfsPin");
    
    ::Swagger::setValue(&requestid, pJson["requestid"], "QString", "QString");
    
    ::Swagger::setValue(&status, pJson["status"], "QString", "QString");
    
}

QString
SWGTypes.IpfsPinStatusResponse::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGTypes.IpfsPinStatusResponse::asJsonObject() {
    QJsonObject obj;
    if(created != nullptr && *created != QString("")){
        toJsonValue(QString("created"), created, obj, QString("QString"));
    }
    if(delegates->size() > 0){
        toJsonArray((QList<void*>*)delegates, obj, "delegates", "QString");
    }
    if((info != nullptr) && (info->isSet())){
        toJsonValue(QString("info"), info, obj, QString("SWGObject"));
    }
    if((pin != nullptr) && (pin->isSet())){
        toJsonValue(QString("pin"), pin, obj, QString("SWGTypes.IpfsPin"));
    }
    if(requestid != nullptr && *requestid != QString("")){
        toJsonValue(QString("requestid"), requestid, obj, QString("QString"));
    }
    if(status != nullptr && *status != QString("")){
        toJsonValue(QString("status"), status, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGTypes.IpfsPinStatusResponse::getCreated() {
    return created;
}
void
SWGTypes.IpfsPinStatusResponse::setCreated(QString* created) {
    this->created = created;
    this->m_created_isSet = true;
}

QList<QString*>*
SWGTypes.IpfsPinStatusResponse::getDelegates() {
    return delegates;
}
void
SWGTypes.IpfsPinStatusResponse::setDelegates(QList<QString*>* delegates) {
    this->delegates = delegates;
    this->m_delegates_isSet = true;
}

SWGObject*
SWGTypes.IpfsPinStatusResponse::getInfo() {
    return info;
}
void
SWGTypes.IpfsPinStatusResponse::setInfo(SWGObject* info) {
    this->info = info;
    this->m_info_isSet = true;
}

SWGTypes.IpfsPin*
SWGTypes.IpfsPinStatusResponse::getPin() {
    return pin;
}
void
SWGTypes.IpfsPinStatusResponse::setPin(SWGTypes.IpfsPin* pin) {
    this->pin = pin;
    this->m_pin_isSet = true;
}

QString*
SWGTypes.IpfsPinStatusResponse::getRequestid() {
    return requestid;
}
void
SWGTypes.IpfsPinStatusResponse::setRequestid(QString* requestid) {
    this->requestid = requestid;
    this->m_requestid_isSet = true;
}

QString*
SWGTypes.IpfsPinStatusResponse::getStatus() {
    return status;
}
void
SWGTypes.IpfsPinStatusResponse::setStatus(QString* status) {
    this->status = status;
    this->m_status_isSet = true;
}


bool
SWGTypes.IpfsPinStatusResponse::isSet(){
    bool isObjectUpdated = false;
    do{
        if(created != nullptr && *created != QString("")){ isObjectUpdated = true; break;}
        if(delegates->size() > 0){ isObjectUpdated = true; break;}
        if(info != nullptr && info->isSet()){ isObjectUpdated = true; break;}
        if(pin != nullptr && pin->isSet()){ isObjectUpdated = true; break;}
        if(requestid != nullptr && *requestid != QString("")){ isObjectUpdated = true; break;}
        if(status != nullptr && *status != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

