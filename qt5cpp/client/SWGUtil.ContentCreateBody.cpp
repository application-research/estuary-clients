/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGUtil.ContentCreateBody.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGUtil.ContentCreateBody::SWGUtil.ContentCreateBody(QString json) {
    init();
    this->fromJson(json);
}

SWGUtil.ContentCreateBody::SWGUtil.ContentCreateBody() {
    init();
}

SWGUtil.ContentCreateBody::~SWGUtil.ContentCreateBody() {
    this->cleanup();
}

void
SWGUtil.ContentCreateBody::init() {
    coluuid = new QString("");
    m_coluuid_isSet = false;
    dir = new QString("");
    m_dir_isSet = false;
    location = new QString("");
    m_location_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    root = new QString("");
    m_root_isSet = false;
    type = 0;
    m_type_isSet = false;
}

void
SWGUtil.ContentCreateBody::cleanup() {
    if(coluuid != nullptr) { 
        delete coluuid;
    }
    if(dir != nullptr) { 
        delete dir;
    }
    if(location != nullptr) { 
        delete location;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(root != nullptr) { 
        delete root;
    }

}

SWGUtil.ContentCreateBody*
SWGUtil.ContentCreateBody::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGUtil.ContentCreateBody::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&coluuid, pJson["coluuid"], "QString", "QString");
    
    ::Swagger::setValue(&dir, pJson["dir"], "QString", "QString");
    
    ::Swagger::setValue(&location, pJson["location"], "QString", "QString");
    
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&root, pJson["root"], "QString", "QString");
    
    ::Swagger::setValue(&type, pJson["type"], "qint32", "");
    
}

QString
SWGUtil.ContentCreateBody::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGUtil.ContentCreateBody::asJsonObject() {
    QJsonObject obj;
    if(coluuid != nullptr && *coluuid != QString("")){
        toJsonValue(QString("coluuid"), coluuid, obj, QString("QString"));
    }
    if(dir != nullptr && *dir != QString("")){
        toJsonValue(QString("dir"), dir, obj, QString("QString"));
    }
    if(location != nullptr && *location != QString("")){
        toJsonValue(QString("location"), location, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(root != nullptr && *root != QString("")){
        toJsonValue(QString("root"), root, obj, QString("QString"));
    }
    if(m_type_isSet){
        obj.insert("type", QJsonValue(type));
    }

    return obj;
}

QString*
SWGUtil.ContentCreateBody::getColuuid() {
    return coluuid;
}
void
SWGUtil.ContentCreateBody::setColuuid(QString* coluuid) {
    this->coluuid = coluuid;
    this->m_coluuid_isSet = true;
}

QString*
SWGUtil.ContentCreateBody::getDir() {
    return dir;
}
void
SWGUtil.ContentCreateBody::setDir(QString* dir) {
    this->dir = dir;
    this->m_dir_isSet = true;
}

QString*
SWGUtil.ContentCreateBody::getLocation() {
    return location;
}
void
SWGUtil.ContentCreateBody::setLocation(QString* location) {
    this->location = location;
    this->m_location_isSet = true;
}

QString*
SWGUtil.ContentCreateBody::getName() {
    return name;
}
void
SWGUtil.ContentCreateBody::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QString*
SWGUtil.ContentCreateBody::getRoot() {
    return root;
}
void
SWGUtil.ContentCreateBody::setRoot(QString* root) {
    this->root = root;
    this->m_root_isSet = true;
}

qint32
SWGUtil.ContentCreateBody::getType() {
    return type;
}
void
SWGUtil.ContentCreateBody::setType(qint32 type) {
    this->type = type;
    this->m_type_isSet = true;
}


bool
SWGUtil.ContentCreateBody::isSet(){
    bool isObjectUpdated = false;
    do{
        if(coluuid != nullptr && *coluuid != QString("")){ isObjectUpdated = true; break;}
        if(dir != nullptr && *dir != QString("")){ isObjectUpdated = true; break;}
        if(location != nullptr && *location != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(root != nullptr && *root != QString("")){ isObjectUpdated = true; break;}
        if(m_type_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

