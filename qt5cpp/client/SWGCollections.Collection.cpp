/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGCollections.Collection.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGCollections.Collection::SWGCollections.Collection(QString json) {
    init();
    this->fromJson(json);
}

SWGCollections.Collection::SWGCollections.Collection() {
    init();
}

SWGCollections.Collection::~SWGCollections.Collection() {
    this->cleanup();
}

void
SWGCollections.Collection::init() {
    cid = new QString("");
    m_cid_isSet = false;
    created_at = new QString("");
    m_created_at_isSet = false;
    description = new QString("");
    m_description_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    user_id = 0;
    m_user_id_isSet = false;
    uuid = new QString("");
    m_uuid_isSet = false;
}

void
SWGCollections.Collection::cleanup() {
    if(cid != nullptr) { 
        delete cid;
    }
    if(created_at != nullptr) { 
        delete created_at;
    }
    if(description != nullptr) { 
        delete description;
    }
    if(name != nullptr) { 
        delete name;
    }

    if(uuid != nullptr) { 
        delete uuid;
    }
}

SWGCollections.Collection*
SWGCollections.Collection::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGCollections.Collection::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&cid, pJson["cid"], "QString", "QString");
    
    ::Swagger::setValue(&created_at, pJson["createdAt"], "QString", "QString");
    
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    ::Swagger::setValue(&user_id, pJson["userId"], "qint32", "");
    
    ::Swagger::setValue(&uuid, pJson["uuid"], "QString", "QString");
    
}

QString
SWGCollections.Collection::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGCollections.Collection::asJsonObject() {
    QJsonObject obj;
    if(cid != nullptr && *cid != QString("")){
        toJsonValue(QString("cid"), cid, obj, QString("QString"));
    }
    if(created_at != nullptr && *created_at != QString("")){
        toJsonValue(QString("createdAt"), created_at, obj, QString("QString"));
    }
    if(description != nullptr && *description != QString("")){
        toJsonValue(QString("description"), description, obj, QString("QString"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(m_user_id_isSet){
        obj.insert("userId", QJsonValue(user_id));
    }
    if(uuid != nullptr && *uuid != QString("")){
        toJsonValue(QString("uuid"), uuid, obj, QString("QString"));
    }

    return obj;
}

QString*
SWGCollections.Collection::getCid() {
    return cid;
}
void
SWGCollections.Collection::setCid(QString* cid) {
    this->cid = cid;
    this->m_cid_isSet = true;
}

QString*
SWGCollections.Collection::getCreatedAt() {
    return created_at;
}
void
SWGCollections.Collection::setCreatedAt(QString* created_at) {
    this->created_at = created_at;
    this->m_created_at_isSet = true;
}

QString*
SWGCollections.Collection::getDescription() {
    return description;
}
void
SWGCollections.Collection::setDescription(QString* description) {
    this->description = description;
    this->m_description_isSet = true;
}

QString*
SWGCollections.Collection::getName() {
    return name;
}
void
SWGCollections.Collection::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

qint32
SWGCollections.Collection::getUserId() {
    return user_id;
}
void
SWGCollections.Collection::setUserId(qint32 user_id) {
    this->user_id = user_id;
    this->m_user_id_isSet = true;
}

QString*
SWGCollections.Collection::getUuid() {
    return uuid;
}
void
SWGCollections.Collection::setUuid(QString* uuid) {
    this->uuid = uuid;
    this->m_uuid_isSet = true;
}


bool
SWGCollections.Collection::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cid != nullptr && *cid != QString("")){ isObjectUpdated = true; break;}
        if(created_at != nullptr && *created_at != QString("")){ isObjectUpdated = true; break;}
        if(description != nullptr && *description != QString("")){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(m_user_id_isSet){ isObjectUpdated = true; break;}
        if(uuid != nullptr && *uuid != QString("")){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

