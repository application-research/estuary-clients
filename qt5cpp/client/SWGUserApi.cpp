/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGUserApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGUserApi::SWGUserApi() {}

SWGUserApi::~SWGUserApi() {}

SWGUserApi::SWGUserApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGUserApi::userApiKeysGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/api-keys");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::userApiKeysGetCallback);

    worker->execute(&input);
}

void
SWGUserApi::userApiKeysGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<SWGMain.getApiKeysResp*>* output = new QList<SWGMain.getApiKeysResp*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<SWGMain.getApiKeysResp*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        SWGMain.getApiKeysResp* o = new SWGMain.getApiKeysResp();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<SWGMain.getApiKeysResp*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit userApiKeysGetSignal(output);
    } else {
        emit userApiKeysGetSignalE(output, error_type, error_str);
        emit userApiKeysGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::userApiKeysKeyDelete(QString* key) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/api-keys/{key}");

    QString keyPathParam("{"); keyPathParam.append("key").append("}");
    fullPath.replace(keyPathParam, stringValue(key));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::userApiKeysKeyDeleteCallback);

    worker->execute(&input);
}

void
SWGUserApi::userApiKeysKeyDeleteCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit userApiKeysKeyDeleteSignal();
    } else {
        emit userApiKeysKeyDeleteSignalE(error_type, error_str);
        emit userApiKeysKeyDeleteSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::userApiKeysPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/api-keys");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::userApiKeysPostCallback);

    worker->execute(&input);
}

void
SWGUserApi::userApiKeysPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGMain.getApiKeysResp* output = static_cast<SWGMain.getApiKeysResp*>(create(json, QString("SWGMain.getApiKeysResp")));
    auto wrapper = new SWGQObjectWrapper<SWGMain.getApiKeysResp*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit userApiKeysPostSignal(output);
    } else {
        emit userApiKeysPostSignalE(output, error_type, error_str);
        emit userApiKeysPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::userExportGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/export");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::userExportGetCallback);

    worker->execute(&input);
}

void
SWGUserApi::userExportGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit userExportGetSignal(output);
    } else {
        emit userExportGetSignalE(output, error_type, error_str);
        emit userExportGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGUserApi::userStatsGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/user/stats");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGUserApi::userStatsGetCallback);

    worker->execute(&input);
}

void
SWGUserApi::userStatsGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    SWGMain.userStatsResponse* output = static_cast<SWGMain.userStatsResponse*>(create(json, QString("SWGMain.userStatsResponse")));
    auto wrapper = new SWGQObjectWrapper<SWGMain.userStatsResponse*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit userStatsGetSignal(output);
    } else {
        emit userStatsGetSignalE(output, error_type, error_str);
        emit userStatsGetSignalEFull(worker, error_type, error_str);
    }
}


}
