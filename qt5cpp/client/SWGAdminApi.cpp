/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGAdminApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGAdminApi::SWGAdminApi() {}

SWGAdminApi::~SWGAdminApi() {}

SWGAdminApi::SWGAdminApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGAdminApi::adminPeeringPeersDelete(QList<bool>*& peer_ids) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");


    QJsonObject peer_ids_jobj;
    toJsonArray((QList<void*>*)peer_ids, peer_ids_jobj, QString("body"), QString("SWGUser*"));

    QJsonDocument doc(peer_ids_jobj);
    QByteArray bytes = doc.toJson();

    input.request_body.append(bytes);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminPeeringPeersDeleteCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminPeeringPeersDeleteCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringPeersDeleteSignal(output);
    } else {
        emit adminPeeringPeersDeleteSignalE(output, error_type, error_str);
        emit adminPeeringPeersDeleteSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminPeeringPeersGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminPeeringPeersGetCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminPeeringPeersGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringPeersGetSignal(output);
    } else {
        emit adminPeeringPeersGetSignalE(output, error_type, error_str);
        emit adminPeeringPeersGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminPeeringPeersPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminPeeringPeersPostCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminPeeringPeersPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringPeersPostSignal(output);
    } else {
        emit adminPeeringPeersPostSignalE(output, error_type, error_str);
        emit adminPeeringPeersPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminPeeringStartPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/start");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminPeeringStartPostCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminPeeringStartPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringStartPostSignal(output);
    } else {
        emit adminPeeringStartPostSignalE(output, error_type, error_str);
        emit adminPeeringStartPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminPeeringStatusGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/status");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminPeeringStatusGetCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminPeeringStatusGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringStatusGetSignal(output);
    } else {
        emit adminPeeringStatusGetSignalE(output, error_type, error_str);
        emit adminPeeringStatusGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminPeeringStopPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/stop");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminPeeringStopPostCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminPeeringStopPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringStopPostSignal(output);
    } else {
        emit adminPeeringStopPostSignalE(output, error_type, error_str);
        emit adminPeeringStopPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminSystemConfigGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/system/config");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminSystemConfigGetCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminSystemConfigGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminSystemConfigGetSignal(output);
    } else {
        emit adminSystemConfigGetSignalE(output, error_type, error_str);
        emit adminSystemConfigGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGAdminApi::adminUsersGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/users");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGAdminApi::adminUsersGetCallback);

    worker->execute(&input);
}

void
SWGAdminApi::adminUsersGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminUsersGetSignal(output);
    } else {
        emit adminUsersGetSignalE(output, error_type, error_str);
        emit adminUsersGetSignalEFull(worker, error_type, error_str);
    }
}


}
