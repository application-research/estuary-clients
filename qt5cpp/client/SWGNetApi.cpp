/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGNetApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGNetApi::SWGNetApi() {}

SWGNetApi::~SWGNetApi() {}

SWGNetApi::SWGNetApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGNetApi::netAddrsGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/net/addrs");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGNetApi::netAddrsGetCallback);

    worker->execute(&input);
}

void
SWGNetApi::netAddrsGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<QString*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<QString*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit netAddrsGetSignal(output);
    } else {
        emit netAddrsGetSignalE(output, error_type, error_str);
        emit netAddrsGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGNetApi::publicMinersFailuresMinerGet(QString* miner) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/miners/failures/{miner}");

    QString minerPathParam("{"); minerPathParam.append("miner").append("}");
    fullPath.replace(minerPathParam, stringValue(miner));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGNetApi::publicMinersFailuresMinerGetCallback);

    worker->execute(&input);
}

void
SWGNetApi::publicMinersFailuresMinerGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicMinersFailuresMinerGetSignal();
    } else {
        emit publicMinersFailuresMinerGetSignalE(error_type, error_str);
        emit publicMinersFailuresMinerGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGNetApi::publicMinersGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/miners");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGNetApi::publicMinersGetCallback);

    worker->execute(&input);
}

void
SWGNetApi::publicMinersGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicMinersGetSignal();
    } else {
        emit publicMinersGetSignalE(error_type, error_str);
        emit publicMinersGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGNetApi::publicNetAddrsGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/net/addrs");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGNetApi::publicNetAddrsGetCallback);

    worker->execute(&input);
}

void
SWGNetApi::publicNetAddrsGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<QString*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<QString*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicNetAddrsGetSignal(output);
    } else {
        emit publicNetAddrsGetSignalE(output, error_type, error_str);
        emit publicNetAddrsGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGNetApi::publicNetPeersGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/net/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGNetApi::publicNetPeersGetCallback);

    worker->execute(&input);
}

void
SWGNetApi::publicNetPeersGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QList<QString*>* output = new QList<QString*>();
    QString json(worker->response);
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    auto wrapper = new SWGQObjectWrapper<QList<QString*>*> (output);
    wrapper->deleteLater();
    foreach(QJsonValue obj, jsonArray) {
        QString* o = new QString();
        QJsonObject jv = obj.toObject();
        QJsonObject * ptr = (QJsonObject*)&jv;
        o->fromJsonObject(*ptr);
        auto objwrapper = new SWGQObjectWrapper<QString*> (o);
        objwrapper->deleteLater();
        output->append(o);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicNetPeersGetSignal(output);
    } else {
        emit publicNetPeersGetSignalE(output, error_type, error_str);
        emit publicNetPeersGetSignalEFull(worker, error_type, error_str);
    }
}


}
