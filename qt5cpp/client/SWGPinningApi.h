/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGPinningApi_H_
#define _SWG_SWGPinningApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGTypes.IpfsPin.h"
#include "SWGUtil.HttpError.h"

#include <QObject>

namespace Swagger {

class SWGPinningApi: public QObject {
    Q_OBJECT

public:
    SWGPinningApi();
    SWGPinningApi(QString host, QString basePath);
    ~SWGPinningApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void pinningPinsGet();
    void pinningPinsPinidDelete(QString* pinid);
    void pinningPinsPinidGet(QString* pinid);
    void pinningPinsPinidPost(QString* pinid, QString*& cid, QString*& name, QString*& origins, QString*& meta);
    void pinningPinsPost(SWGTypes.IpfsPin& pin);
    
private:
    void pinningPinsGetCallback (SWGHttpRequestWorker * worker);
    void pinningPinsPinidDeleteCallback (SWGHttpRequestWorker * worker);
    void pinningPinsPinidGetCallback (SWGHttpRequestWorker * worker);
    void pinningPinsPinidPostCallback (SWGHttpRequestWorker * worker);
    void pinningPinsPostCallback (SWGHttpRequestWorker * worker);
    
signals:
    void pinningPinsGetSignal(QString* summary);
    void pinningPinsPinidDeleteSignal(QString* summary);
    void pinningPinsPinidGetSignal(QString* summary);
    void pinningPinsPinidPostSignal(QString* summary);
    void pinningPinsPostSignal(QString* summary);
    
    void pinningPinsGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPinidDeleteSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPinidGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPinidPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void pinningPinsGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPinidDeleteSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPinidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPinidPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void pinningPinsPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
