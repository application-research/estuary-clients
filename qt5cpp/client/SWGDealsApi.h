/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGDealsApi_H_
#define _SWG_SWGDealsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGMain.ChannelIDParam.h"
#include "SWGMain.estimateDealBody.h"
#include "SWGUtil.HttpError.h"

#include <QObject>

namespace Swagger {

class SWGDealsApi: public QObject {
    Q_OBJECT

public:
    SWGDealsApi();
    SWGDealsApi(QString host, QString basePath);
    ~SWGDealsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void dealEstimatePost(SWGMain.estimateDealBody& body);
    void dealInfoDealidGet(qint32 dealid);
    void dealProposalPropcidGet(QString* propcid);
    void dealQueryMinerGet(QString* miner);
    void dealStatusByProposalPropcidGet(QString* propcid);
    void dealStatusMinerPropcidGet(QString* miner, QString* propcid);
    void dealTransferInProgressGet();
    void dealTransferStatusPost(SWGMain.ChannelIDParam& chanid);
    void dealsFailuresGet();
    void dealsMakeMinerPost(QString* miner, QString*& deal_request);
    void dealsStatusDealGet(qint32 deal);
    void publicDealsFailuresGet();
    void publicMinersStorageQueryMinerGet(QString* miner);
    
private:
    void dealEstimatePostCallback (SWGHttpRequestWorker * worker);
    void dealInfoDealidGetCallback (SWGHttpRequestWorker * worker);
    void dealProposalPropcidGetCallback (SWGHttpRequestWorker * worker);
    void dealQueryMinerGetCallback (SWGHttpRequestWorker * worker);
    void dealStatusByProposalPropcidGetCallback (SWGHttpRequestWorker * worker);
    void dealStatusMinerPropcidGetCallback (SWGHttpRequestWorker * worker);
    void dealTransferInProgressGetCallback (SWGHttpRequestWorker * worker);
    void dealTransferStatusPostCallback (SWGHttpRequestWorker * worker);
    void dealsFailuresGetCallback (SWGHttpRequestWorker * worker);
    void dealsMakeMinerPostCallback (SWGHttpRequestWorker * worker);
    void dealsStatusDealGetCallback (SWGHttpRequestWorker * worker);
    void publicDealsFailuresGetCallback (SWGHttpRequestWorker * worker);
    void publicMinersStorageQueryMinerGetCallback (SWGHttpRequestWorker * worker);
    
signals:
    void dealEstimatePostSignal(QString* summary);
    void dealInfoDealidGetSignal(QString* summary);
    void dealProposalPropcidGetSignal(QString* summary);
    void dealQueryMinerGetSignal(QString* summary);
    void dealStatusByProposalPropcidGetSignal(QString* summary);
    void dealStatusMinerPropcidGetSignal(QString* summary);
    void dealTransferInProgressGetSignal(QString* summary);
    void dealTransferStatusPostSignal(QString* summary);
    void dealsFailuresGetSignal(QString* summary);
    void dealsMakeMinerPostSignal(QString* summary);
    void dealsStatusDealGetSignal(QString* summary);
    void publicDealsFailuresGetSignal(QString* summary);
    void publicMinersStorageQueryMinerGetSignal(QString* summary);
    
    void dealEstimatePostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealInfoDealidGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealProposalPropcidGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealQueryMinerGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusByProposalPropcidGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusMinerPropcidGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferInProgressGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferStatusPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsFailuresGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsMakeMinerPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsStatusDealGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void publicDealsFailuresGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void publicMinersStorageQueryMinerGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void dealEstimatePostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealInfoDealidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealProposalPropcidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealQueryMinerGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusByProposalPropcidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusMinerPropcidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferInProgressGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferStatusPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsFailuresGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsMakeMinerPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsStatusDealGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void publicDealsFailuresGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void publicMinersStorageQueryMinerGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
