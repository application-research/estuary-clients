/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGDealsApi_H_
#define _SWG_SWGDealsApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGMain.estimateDealBody.h"

#include <QObject>

namespace Swagger {

class SWGDealsApi: public QObject {
    Q_OBJECT

public:
    SWGDealsApi();
    SWGDealsApi(QString host, QString basePath);
    ~SWGDealsApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void dealEstimatePost(SWGMain.estimateDealBody& body);
    void dealInfoDealidGet(qint32 dealid);
    void dealProposalPropcidGet(QString* propcid);
    void dealQueryMinerGet(QString* miner);
    void dealStatusByProposalPropcidGet(QString* propcid);
    void dealStatusMinerPropcidGet(QString* miner, QString* propcid);
    void dealTransferInProgressGet();
    void dealTransferStatusPost();
    void dealsFailuresGet();
    void dealsMakeMinerPost(QString* miner, QString*& deal_request);
    void dealsStatusDealGet(qint32 deal);
    void publicDealsFailuresGet();
    void publicMinersStorageQueryMinerGet(QString* miner);
    
private:
    void dealEstimatePostCallback (SWGHttpRequestWorker * worker);
    void dealInfoDealidGetCallback (SWGHttpRequestWorker * worker);
    void dealProposalPropcidGetCallback (SWGHttpRequestWorker * worker);
    void dealQueryMinerGetCallback (SWGHttpRequestWorker * worker);
    void dealStatusByProposalPropcidGetCallback (SWGHttpRequestWorker * worker);
    void dealStatusMinerPropcidGetCallback (SWGHttpRequestWorker * worker);
    void dealTransferInProgressGetCallback (SWGHttpRequestWorker * worker);
    void dealTransferStatusPostCallback (SWGHttpRequestWorker * worker);
    void dealsFailuresGetCallback (SWGHttpRequestWorker * worker);
    void dealsMakeMinerPostCallback (SWGHttpRequestWorker * worker);
    void dealsStatusDealGetCallback (SWGHttpRequestWorker * worker);
    void publicDealsFailuresGetCallback (SWGHttpRequestWorker * worker);
    void publicMinersStorageQueryMinerGetCallback (SWGHttpRequestWorker * worker);
    
signals:
    void dealEstimatePostSignal();
    void dealInfoDealidGetSignal();
    void dealProposalPropcidGetSignal();
    void dealQueryMinerGetSignal();
    void dealStatusByProposalPropcidGetSignal();
    void dealStatusMinerPropcidGetSignal();
    void dealTransferInProgressGetSignal();
    void dealTransferStatusPostSignal();
    void dealsFailuresGetSignal();
    void dealsMakeMinerPostSignal();
    void dealsStatusDealGetSignal();
    void publicDealsFailuresGetSignal();
    void publicMinersStorageQueryMinerGetSignal();
    
    void dealEstimatePostSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealInfoDealidGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealProposalPropcidGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealQueryMinerGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusByProposalPropcidGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusMinerPropcidGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferInProgressGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferStatusPostSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsFailuresGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsMakeMinerPostSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsStatusDealGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void publicDealsFailuresGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    void publicMinersStorageQueryMinerGetSignalE(QNetworkReply::NetworkError error_type, QString& error_str);
    
    void dealEstimatePostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealInfoDealidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealProposalPropcidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealQueryMinerGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusByProposalPropcidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealStatusMinerPropcidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferInProgressGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealTransferStatusPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsFailuresGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsMakeMinerPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void dealsStatusDealGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void publicDealsFailuresGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void publicMinersStorageQueryMinerGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
