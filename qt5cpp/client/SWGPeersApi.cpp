/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGPeersApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGPeersApi::SWGPeersApi() {}

SWGPeersApi::~SWGPeersApi() {}

SWGPeersApi::SWGPeersApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGPeersApi::adminPeeringPeersDelete() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGPeersApi::adminPeeringPeersDeleteCallback);

    worker->execute(&input);
}

void
SWGPeersApi::adminPeeringPeersDeleteCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringPeersDeleteSignal();
    } else {
        emit adminPeeringPeersDeleteSignalE(error_type, error_str);
        emit adminPeeringPeersDeleteSignalEFull(worker, error_type, error_str);
    }
}

void
SWGPeersApi::adminPeeringPeersGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGPeersApi::adminPeeringPeersGetCallback);

    worker->execute(&input);
}

void
SWGPeersApi::adminPeeringPeersGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringPeersGetSignal();
    } else {
        emit adminPeeringPeersGetSignalE(error_type, error_str);
        emit adminPeeringPeersGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGPeersApi::adminPeeringPeersPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/peers");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGPeersApi::adminPeeringPeersPostCallback);

    worker->execute(&input);
}

void
SWGPeersApi::adminPeeringPeersPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringPeersPostSignal();
    } else {
        emit adminPeeringPeersPostSignalE(error_type, error_str);
        emit adminPeeringPeersPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGPeersApi::adminPeeringStartPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/start");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGPeersApi::adminPeeringStartPostCallback);

    worker->execute(&input);
}

void
SWGPeersApi::adminPeeringStartPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringStartPostSignal();
    } else {
        emit adminPeeringStartPostSignalE(error_type, error_str);
        emit adminPeeringStartPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGPeersApi::adminPeeringStatusGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/status");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGPeersApi::adminPeeringStatusGetCallback);

    worker->execute(&input);
}

void
SWGPeersApi::adminPeeringStatusGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringStatusGetSignal();
    } else {
        emit adminPeeringStatusGetSignalE(error_type, error_str);
        emit adminPeeringStatusGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGPeersApi::adminPeeringStopPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/admin/peering/stop");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGPeersApi::adminPeeringStopPostCallback);

    worker->execute(&input);
}

void
SWGPeersApi::adminPeeringStopPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit adminPeeringStopPostSignal();
    } else {
        emit adminPeeringStopPostSignalE(error_type, error_str);
        emit adminPeeringStopPostSignalEFull(worker, error_type, error_str);
    }
}


}
