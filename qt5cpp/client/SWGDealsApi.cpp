/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGDealsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGDealsApi::SWGDealsApi() {}

SWGDealsApi::~SWGDealsApi() {}

SWGDealsApi::SWGDealsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGDealsApi::dealEstimatePost(SWGMain.estimateDealBody& body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/estimate");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");


    
    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealEstimatePostCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealEstimatePostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealEstimatePostSignal();
    } else {
        emit dealEstimatePostSignalE(error_type, error_str);
        emit dealEstimatePostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealInfoDealidGet(qint32 dealid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/info/{dealid}");

    QString dealidPathParam("{"); dealidPathParam.append("dealid").append("}");
    fullPath.replace(dealidPathParam, stringValue(dealid));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealInfoDealidGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealInfoDealidGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealInfoDealidGetSignal();
    } else {
        emit dealInfoDealidGetSignalE(error_type, error_str);
        emit dealInfoDealidGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealProposalPropcidGet(QString* propcid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/proposal/{propcid}");

    QString propcidPathParam("{"); propcidPathParam.append("propcid").append("}");
    fullPath.replace(propcidPathParam, stringValue(propcid));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealProposalPropcidGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealProposalPropcidGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealProposalPropcidGetSignal();
    } else {
        emit dealProposalPropcidGetSignalE(error_type, error_str);
        emit dealProposalPropcidGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealQueryMinerGet(QString* miner) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/query/{miner}");

    QString minerPathParam("{"); minerPathParam.append("miner").append("}");
    fullPath.replace(minerPathParam, stringValue(miner));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealQueryMinerGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealQueryMinerGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealQueryMinerGetSignal();
    } else {
        emit dealQueryMinerGetSignalE(error_type, error_str);
        emit dealQueryMinerGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealStatusByProposalPropcidGet(QString* propcid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/status-by-proposal/{propcid}");

    QString propcidPathParam("{"); propcidPathParam.append("propcid").append("}");
    fullPath.replace(propcidPathParam, stringValue(propcid));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealStatusByProposalPropcidGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealStatusByProposalPropcidGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealStatusByProposalPropcidGetSignal();
    } else {
        emit dealStatusByProposalPropcidGetSignalE(error_type, error_str);
        emit dealStatusByProposalPropcidGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealStatusMinerPropcidGet(QString* miner, QString* propcid) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/status/{miner}/{propcid}");

    QString minerPathParam("{"); minerPathParam.append("miner").append("}");
    fullPath.replace(minerPathParam, stringValue(miner));
    QString propcidPathParam("{"); propcidPathParam.append("propcid").append("}");
    fullPath.replace(propcidPathParam, stringValue(propcid));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealStatusMinerPropcidGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealStatusMinerPropcidGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealStatusMinerPropcidGetSignal();
    } else {
        emit dealStatusMinerPropcidGetSignalE(error_type, error_str);
        emit dealStatusMinerPropcidGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealTransferInProgressGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/transfer/in-progress");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealTransferInProgressGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealTransferInProgressGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealTransferInProgressGetSignal();
    } else {
        emit dealTransferInProgressGetSignalE(error_type, error_str);
        emit dealTransferInProgressGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealTransferStatusPost() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deal/transfer/status");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealTransferStatusPostCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealTransferStatusPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealTransferStatusPostSignal();
    } else {
        emit dealTransferStatusPostSignalE(error_type, error_str);
        emit dealTransferStatusPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealsFailuresGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deals/failures");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealsFailuresGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealsFailuresGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealsFailuresGetSignal();
    } else {
        emit dealsFailuresGetSignalE(error_type, error_str);
        emit dealsFailuresGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealsMakeMinerPost(QString* miner, QString*& deal_request) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deals/make/{miner}");

    QString minerPathParam("{"); minerPathParam.append("miner").append("}");
    fullPath.replace(minerPathParam, stringValue(miner));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "POST");


    
    QString output(*deal_request);
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealsMakeMinerPostCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealsMakeMinerPostCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealsMakeMinerPostSignal();
    } else {
        emit dealsMakeMinerPostSignalE(error_type, error_str);
        emit dealsMakeMinerPostSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::dealsStatusDealGet(qint32 deal) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/deals/status/{deal}");

    QString dealPathParam("{"); dealPathParam.append("deal").append("}");
    fullPath.replace(dealPathParam, stringValue(deal));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::dealsStatusDealGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::dealsStatusDealGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit dealsStatusDealGetSignal();
    } else {
        emit dealsStatusDealGetSignalE(error_type, error_str);
        emit dealsStatusDealGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::publicDealsFailuresGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/deals/failures");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::publicDealsFailuresGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::publicDealsFailuresGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicDealsFailuresGetSignal();
    } else {
        emit publicDealsFailuresGetSignalE(error_type, error_str);
        emit publicDealsFailuresGetSignalEFull(worker, error_type, error_str);
    }
}

void
SWGDealsApi::publicMinersStorageQueryMinerGet(QString* miner) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/miners/storage/query/{miner}");

    QString minerPathParam("{"); minerPathParam.append("miner").append("}");
    fullPath.replace(minerPathParam, stringValue(miner));


    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGDealsApi::publicMinersStorageQueryMinerGetCallback);

    worker->execute(&input);
}

void
SWGDealsApi::publicMinersStorageQueryMinerGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicMinersStorageQueryMinerGetSignal();
    } else {
        emit publicMinersStorageQueryMinerGetSignalE(error_type, error_str);
        emit publicMinersStorageQueryMinerGetSignalEFull(worker, error_type, error_str);
    }
}


}
