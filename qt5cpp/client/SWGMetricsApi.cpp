/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGMetricsApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"
#include "SWGQObjectWrapper.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGMetricsApi::SWGMetricsApi() {}

SWGMetricsApi::~SWGMetricsApi() {}

SWGMetricsApi::SWGMetricsApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGMetricsApi::publicMetricsDealsOnChainGet() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/public/metrics/deals-on-chain");



    SWGHttpRequestWorker *worker = new SWGHttpRequestWorker();
    SWGHttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &SWGHttpRequestWorker::on_execution_finished,
            this,
            &SWGMetricsApi::publicMetricsDealsOnChainGetCallback);

    worker->execute(&input);
}

void
SWGMetricsApi::publicMetricsDealsOnChainGetCallback(SWGHttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    auto wrapper = new SWGQObjectWrapper<QString*> (output);
    wrapper->deleteLater();
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        emit publicMetricsDealsOnChainGetSignal(output);
    } else {
        emit publicMetricsDealsOnChainGetSignalE(output, error_type, error_str);
        emit publicMetricsDealsOnChainGetSignalEFull(worker, error_type, error_str);
    }
}


}
