/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGTypes.IpfsPin.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGTypes.IpfsPin::SWGTypes.IpfsPin(QString json) {
    init();
    this->fromJson(json);
}

SWGTypes.IpfsPin::SWGTypes.IpfsPin() {
    init();
}

SWGTypes.IpfsPin::~SWGTypes.IpfsPin() {
    this->cleanup();
}

void
SWGTypes.IpfsPin::init() {
    cid = new QString("");
    m_cid_isSet = false;
    meta = NULL;
    m_meta_isSet = false;
    name = new QString("");
    m_name_isSet = false;
    origins = new QList<QString*>();
    m_origins_isSet = false;
}

void
SWGTypes.IpfsPin::cleanup() {
    if(cid != nullptr) { 
        delete cid;
    }
    if(meta != nullptr) { 
        delete meta;
    }
    if(name != nullptr) { 
        delete name;
    }
    if(origins != nullptr) { 
        auto arr = origins;
        for(auto o: *arr) { 
            delete o;
        }
        delete origins;
    }
}

SWGTypes.IpfsPin*
SWGTypes.IpfsPin::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGTypes.IpfsPin::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&cid, pJson["cid"], "QString", "QString");
    
    ::Swagger::setValue(&meta, pJson["meta"], "SWGObject", "SWGObject");
    
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    
    
    ::Swagger::setValue(&origins, pJson["origins"], "QList", "QString");
}

QString
SWGTypes.IpfsPin::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGTypes.IpfsPin::asJsonObject() {
    QJsonObject obj;
    if(cid != nullptr && *cid != QString("")){
        toJsonValue(QString("cid"), cid, obj, QString("QString"));
    }
    if((meta != nullptr) && (meta->isSet())){
        toJsonValue(QString("meta"), meta, obj, QString("SWGObject"));
    }
    if(name != nullptr && *name != QString("")){
        toJsonValue(QString("name"), name, obj, QString("QString"));
    }
    if(origins->size() > 0){
        toJsonArray((QList<void*>*)origins, obj, "origins", "QString");
    }

    return obj;
}

QString*
SWGTypes.IpfsPin::getCid() {
    return cid;
}
void
SWGTypes.IpfsPin::setCid(QString* cid) {
    this->cid = cid;
    this->m_cid_isSet = true;
}

SWGObject*
SWGTypes.IpfsPin::getMeta() {
    return meta;
}
void
SWGTypes.IpfsPin::setMeta(SWGObject* meta) {
    this->meta = meta;
    this->m_meta_isSet = true;
}

QString*
SWGTypes.IpfsPin::getName() {
    return name;
}
void
SWGTypes.IpfsPin::setName(QString* name) {
    this->name = name;
    this->m_name_isSet = true;
}

QList<QString*>*
SWGTypes.IpfsPin::getOrigins() {
    return origins;
}
void
SWGTypes.IpfsPin::setOrigins(QList<QString*>* origins) {
    this->origins = origins;
    this->m_origins_isSet = true;
}


bool
SWGTypes.IpfsPin::isSet(){
    bool isObjectUpdated = false;
    do{
        if(cid != nullptr && *cid != QString("")){ isObjectUpdated = true; break;}
        if(meta != nullptr && meta->isSet()){ isObjectUpdated = true; break;}
        if(name != nullptr && *name != QString("")){ isObjectUpdated = true; break;}
        if(origins->size() > 0){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

