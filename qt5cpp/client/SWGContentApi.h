/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGContentApi_H_
#define _SWG_SWGContentApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGHttpRequest.h"
#include "SWGMain.importDealBody.h"
#include "SWGUtil.ContentAddIpfsBody.h"
#include "SWGUtil.ContentAddResponse.h"
#include "SWGUtil.ContentCreateBody.h"
#include "SWGUtil.HttpError.h"

#include <QObject>

namespace Swagger {

class SWGContentApi: public QObject {
    Q_OBJECT

public:
    SWGContentApi();
    SWGContentApi(QString host, QString basePath);
    ~SWGContentApi();

    QString host;
    QString basePath;
    QMap<QString, QString> defaultHeaders;

    void contentAddCarPost(QString*& body, QString* ignore_dupes, QString* filename);
    void contentAddIpfsPost(SWGUtil.ContentAddIpfsBody& body, QString* ignore_dupes);
    void contentAddPost(SWGHttpRequestInputFileElement* data, QString* filename, QString* coluuid, qint32 replication, QString* ignore_dupes, QString* lazy_provide, QString* dir);
    void contentAggregatedContentGet(QString* content);
    void contentAllDealsGet(QString* begin, QString* duration, QString* all);
    void contentBwUsageContentGet(QString* content);
    void contentCreatePost(SWGUtil.ContentCreateBody& req, QString* ignore_dupes);
    void contentDealsGet(qint32 limit, qint32 offset);
    void contentEnsureReplicationDatacidGet(QString* datacid);
    void contentFailuresContentGet(QString* content);
    void contentIdGet(qint32 id);
    void contentImportdealPost(SWGMain.importDealBody& body);
    void contentListGet();
    void contentReadContGet(QString* cont);
    void contentStagingZonesGet();
    void contentStatsGet(QString* limit, QString* offset);
    void contentStatusIdGet(qint32 id);
    
private:
    void contentAddCarPostCallback (SWGHttpRequestWorker * worker);
    void contentAddIpfsPostCallback (SWGHttpRequestWorker * worker);
    void contentAddPostCallback (SWGHttpRequestWorker * worker);
    void contentAggregatedContentGetCallback (SWGHttpRequestWorker * worker);
    void contentAllDealsGetCallback (SWGHttpRequestWorker * worker);
    void contentBwUsageContentGetCallback (SWGHttpRequestWorker * worker);
    void contentCreatePostCallback (SWGHttpRequestWorker * worker);
    void contentDealsGetCallback (SWGHttpRequestWorker * worker);
    void contentEnsureReplicationDatacidGetCallback (SWGHttpRequestWorker * worker);
    void contentFailuresContentGetCallback (SWGHttpRequestWorker * worker);
    void contentIdGetCallback (SWGHttpRequestWorker * worker);
    void contentImportdealPostCallback (SWGHttpRequestWorker * worker);
    void contentListGetCallback (SWGHttpRequestWorker * worker);
    void contentReadContGetCallback (SWGHttpRequestWorker * worker);
    void contentStagingZonesGetCallback (SWGHttpRequestWorker * worker);
    void contentStatsGetCallback (SWGHttpRequestWorker * worker);
    void contentStatusIdGetCallback (SWGHttpRequestWorker * worker);
    
signals:
    void contentAddCarPostSignal(QString* summary);
    void contentAddIpfsPostSignal(QString* summary);
    void contentAddPostSignal(SWGUtil.ContentAddResponse* summary);
    void contentAggregatedContentGetSignal(QString* summary);
    void contentAllDealsGetSignal(QString* summary);
    void contentBwUsageContentGetSignal(QString* summary);
    void contentCreatePostSignal(QString* summary);
    void contentDealsGetSignal(QString* summary);
    void contentEnsureReplicationDatacidGetSignal(QString* summary);
    void contentFailuresContentGetSignal(QString* summary);
    void contentIdGetSignal(QString* summary);
    void contentImportdealPostSignal(QString* summary);
    void contentListGetSignal(QString* summary);
    void contentReadContGetSignal(QString* summary);
    void contentStagingZonesGetSignal(QString* summary);
    void contentStatsGetSignal(QString* summary);
    void contentStatusIdGetSignal(QString* summary);
    
    void contentAddCarPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAddIpfsPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAddPostSignalE(SWGUtil.ContentAddResponse* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAggregatedContentGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAllDealsGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentBwUsageContentGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentCreatePostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentDealsGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentEnsureReplicationDatacidGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentFailuresContentGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentIdGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentImportdealPostSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentListGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentReadContGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentStagingZonesGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentStatsGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentStatusIdGetSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
    void contentAddCarPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAddIpfsPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAddPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAggregatedContentGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentAllDealsGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentBwUsageContentGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentCreatePostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentDealsGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentEnsureReplicationDatacidGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentFailuresContentGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentIdGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentImportdealPostSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentListGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentReadContGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentStagingZonesGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentStatsGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    void contentStatusIdGetSignalEFull(SWGHttpRequestWorker* worker, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
