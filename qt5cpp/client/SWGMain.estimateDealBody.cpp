/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGMain.estimateDealBody.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGMain.estimateDealBody::SWGMain.estimateDealBody(QString json) {
    init();
    this->fromJson(json);
}

SWGMain.estimateDealBody::SWGMain.estimateDealBody() {
    init();
}

SWGMain.estimateDealBody::~SWGMain.estimateDealBody() {
    this->cleanup();
}

void
SWGMain.estimateDealBody::init() {
    duration_blks = 0;
    m_duration_blks_isSet = false;
    replication = 0;
    m_replication_isSet = false;
    size = 0;
    m_size_isSet = false;
    verified = false;
    m_verified_isSet = false;
}

void
SWGMain.estimateDealBody::cleanup() {




}

SWGMain.estimateDealBody*
SWGMain.estimateDealBody::fromJson(QString json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGMain.estimateDealBody::fromJsonObject(QJsonObject pJson) {
    ::Swagger::setValue(&duration_blks, pJson["durationBlks"], "qint32", "");
    
    ::Swagger::setValue(&replication, pJson["replication"], "qint32", "");
    
    ::Swagger::setValue(&size, pJson["size"], "qint32", "");
    
    ::Swagger::setValue(&verified, pJson["verified"], "bool", "");
    
}

QString
SWGMain.estimateDealBody::asJson ()
{
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject
SWGMain.estimateDealBody::asJsonObject() {
    QJsonObject obj;
    if(m_duration_blks_isSet){
        obj.insert("durationBlks", QJsonValue(duration_blks));
    }
    if(m_replication_isSet){
        obj.insert("replication", QJsonValue(replication));
    }
    if(m_size_isSet){
        obj.insert("size", QJsonValue(size));
    }
    if(m_verified_isSet){
        obj.insert("verified", QJsonValue(verified));
    }

    return obj;
}

qint32
SWGMain.estimateDealBody::getDurationBlks() {
    return duration_blks;
}
void
SWGMain.estimateDealBody::setDurationBlks(qint32 duration_blks) {
    this->duration_blks = duration_blks;
    this->m_duration_blks_isSet = true;
}

qint32
SWGMain.estimateDealBody::getReplication() {
    return replication;
}
void
SWGMain.estimateDealBody::setReplication(qint32 replication) {
    this->replication = replication;
    this->m_replication_isSet = true;
}

qint32
SWGMain.estimateDealBody::getSize() {
    return size;
}
void
SWGMain.estimateDealBody::setSize(qint32 size) {
    this->size = size;
    this->m_size_isSet = true;
}

bool
SWGMain.estimateDealBody::isVerified() {
    return verified;
}
void
SWGMain.estimateDealBody::setVerified(bool verified) {
    this->verified = verified;
    this->m_verified_isSet = true;
}


bool
SWGMain.estimateDealBody::isSet(){
    bool isObjectUpdated = false;
    do{
        if(m_duration_blks_isSet){ isObjectUpdated = true; break;}
        if(m_replication_isSet){ isObjectUpdated = true; break;}
        if(m_size_isSet){ isObjectUpdated = true; break;}
        if(m_verified_isSet){ isObjectUpdated = true; break;}
    }while(false);
    return isObjectUpdated;
}
}

