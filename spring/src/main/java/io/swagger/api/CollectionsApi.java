/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.28).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import java.util.List;
import io.swagger.model.MainCollection;
import io.swagger.model.MainCreateCollectionBody;
import java.util.Map;
import io.swagger.model.UtilHttpError;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-10-08T00:00:16.548Z")

@Validated
@Api(value = "collections", description = "the collections API")
@RequestMapping(value = "")
public interface CollectionsApi {

    @ApiOperation(value = "Produce a CID of the collection contents", nickname = "collectionsColuuidCommitPost", notes = "This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/collections/{coluuid}/commit",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<String> collectionsColuuidCommitPost(@ApiParam(value = "coluuid",required=true) @PathVariable("coluuid") String coluuid);


    @ApiOperation(value = "Deletes a collection", nickname = "collectionsColuuidDelete", notes = "This endpoint is used to delete an existing collection.", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/collections/{coluuid}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> collectionsColuuidDelete(@ApiParam(value = "Collection ID",required=true) @PathVariable("coluuid") String coluuid);


    @ApiOperation(value = "Get contents in a collection", nickname = "collectionsColuuidGet", notes = "This endpoint is used to get contents in a collection. If no colpath query param is passed", response = String.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = String.class) })
    @RequestMapping(value = "/collections/{coluuid}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<String> collectionsColuuidGet(@NotNull @ApiParam(value = "Collection UUID", required = true) @Valid @RequestParam(value = "coluuid", required = true) String coluuid,@ApiParam(value = "Directory") @Valid @RequestParam(value = "dir", required = false) String dir);


    @ApiOperation(value = "Add contents to a collection", nickname = "collectionsColuuidPost", notes = "This endpoint adds already-pinned contents (that have ContentIDs) to a collection.", response = String.class, responseContainer = "Map", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Map.class, responseContainer = "Map") })
    @RequestMapping(value = "/collections/{coluuid}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Map<String, String>> collectionsColuuidPost(@ApiParam(value = "Content IDs to add to collection" ,required=true )  @Valid @RequestBody List<Integer> body);


    @ApiOperation(value = "Add a file to a collection", nickname = "collectionsFsAddPost", notes = "This endpoint adds a file to a collection", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = {  })
    @RequestMapping(value = "/collections/fs/add",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> collectionsFsAddPost(@NotNull @ApiParam(value = "Collection ID", required = true) @Valid @RequestParam(value = "coluuid", required = true) String coluuid,@NotNull @ApiParam(value = "Content", required = true) @Valid @RequestParam(value = "content", required = true) String content,@NotNull @ApiParam(value = "Path to file", required = true) @Valid @RequestParam(value = "path", required = true) String path);


    @ApiOperation(value = "List all collections", nickname = "collectionsGet", notes = "This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.", response = MainCollection.class, responseContainer = "List", authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MainCollection.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Bad Request", response = UtilHttpError.class),
        @ApiResponse(code = 404, message = "Not Found", response = UtilHttpError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = UtilHttpError.class) })
    @RequestMapping(value = "/collections/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<MainCollection>> collectionsGet(@ApiParam(value = "User ID",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Create a new collection", nickname = "collectionsPost", notes = "This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.", response = MainCollection.class, authorizations = {
        @Authorization(value = "bearerAuth")
    }, tags={ "collections", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MainCollection.class),
        @ApiResponse(code = 400, message = "Bad Request", response = UtilHttpError.class),
        @ApiResponse(code = 404, message = "Not Found", response = UtilHttpError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = UtilHttpError.class) })
    @RequestMapping(value = "/collections/",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<MainCollection> collectionsPost(@ApiParam(value = "Collection name and description" ,required=true )  @Valid @RequestBody MainCreateCollectionBody body);

}
