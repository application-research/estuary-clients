/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import java.io.File
import io.swagger.client.model.MainImportDealBody
import io.swagger.client.model.UtilContentAddIpfsBody
import io.swagger.client.model.UtilContentAddResponse
import io.swagger.client.model.UtilContentCreateBody
import io.swagger.client.model.UtilHttpError
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object ContentApi {

  /**
   * This endpoint is used to add a car object to the network. The object can be a file or a directory.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param body Car
   * @param ignoreDupes Ignore Dupes
   * @param filename Filename
   */
  def contentAddCarPost(body: String, ignoreDupes: Option[String] = None, filename: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/content/add-car", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withQueryParam("ignore-dupes", ignoreDupes)
      .withQueryParam("filename", filename)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param body IPFS Body
   * @param ignoreDupes Ignore Dupes
   */
  def contentAddIpfsPost(body: UtilContentAddIpfsBody, ignoreDupes: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/content/add-ipfs", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withQueryParam("ignore-dupes", ignoreDupes)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to upload new content.
   * 
   * Expected answers:
   *   code 200 : UtilContentAddResponse (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param data File to upload
   * @param filename Filenam to use for upload
   * @param coluuid Collection UUID
   * @param replication Replication value
   * @param ignoreDupes Ignore Dupes true/false
   * @param lazyProvide Lazy Provide true/false
   * @param dir Directory
   */
  def contentAddPost(data: File, filename: Option[String] = None, coluuid: Option[String] = None, replication: Option[Int] = None, ignoreDupes: Option[String] = None, lazyProvide: Option[String] = None, dir: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[UtilContentAddResponse] =
    ApiRequest[UtilContentAddResponse](ApiMethods.POST, "https://api.estuary.tech", "/content/add", "multipart/form-data")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withFormParam("data", data)
      .withFormParam("filename", filename)
      .withQueryParam("coluuid", coluuid)
      .withQueryParam("replication", replication)
      .withQueryParam("ignore-dupes", ignoreDupes)
      .withQueryParam("lazy-provide", lazyProvide)
      .withQueryParam("dir", dir)
      .withSuccessResponse[UtilContentAddResponse](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint returns aggregated content stats
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param content Content ID
   */
  def contentAggregatedContentGet(content: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/aggregated/{content}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("content", content)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to get all deals for a user
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param begin Begin
   * @param duration Duration
   * @param all All
   */
  def contentAllDealsGet(begin: String, duration: String, all: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/all-deals", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("begin", begin)
      .withQueryParam("duration", duration)
      .withQueryParam("all", all)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint returns content bandwidth
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param content Content ID
   */
  def contentBwUsageContentGet(content: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/bw-usage/{content}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("content", content)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint adds a new content
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param req Content
   * @param ignoreDupes Ignore Dupes
   */
  def contentCreatePost(req: UtilContentCreateBody, ignoreDupes: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/content/create", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(req)
      .withQueryParam("ignore-dupes", ignoreDupes)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint lists all content with deals
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param limit Limit
   * @param offset Offset
   */
  def contentDealsGet(limit: Option[Int] = None, offset: Option[Int] = None)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/deals", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint ensures that the content is replicated to the specified number of providers
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param datacid Data CID
   */
  def contentEnsureReplicationDatacidGet(datacid: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/ensure-replication/{datacid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("datacid", datacid)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint returns all failures for a content
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param content Content ID
   */
  def contentFailuresContentGet(content: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/failures/{content}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("content", content)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint returns a content by its ID
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param id Content ID
   */
  def contentIdGet(id: Int)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/{id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("id", id)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint imports a deal into the shuttle.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param body Import a deal
   */
  def contentImportdealPost(body: MainImportDealBody)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/content/importdeal", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint lists all content
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   */
  def contentListGet()(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/list", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint reads content from the blockstore
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param cont CID
   */
  def contentReadContGet(cont: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/read/{cont}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("cont", cont)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to get staging zone for user.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   */
  def contentStagingZonesGet()(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/staging-zones", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param limit limit
   * @param offset offset
   */
  def contentStatsGet(limit: String, offset: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/stats", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("limit", limit)
      .withQueryParam("offset", offset)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint returns the status of a content
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param id Content ID
   */
  def contentStatusIdGet(id: Int)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/content/status/{id}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("id", id)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
      

}

