/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.MainCollection
import io.swagger.client.model.MainCreateCollectionBody
import io.swagger.client.model.UtilHttpError
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object CollectionsApi {

  /**
   * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid coluuid
   */
  def collectionsColuuidCommitPost(coluuid: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/collections/{coluuid}/commit", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("coluuid", coluuid)
      .withSuccessResponse[String](200)
        /**
   * This endpoint is used to delete an existing collection.
   * 
   * Expected answers:
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid Collection ID
   */
  def collectionsColuuidDelete(coluuid: String)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "https://api.estuary.tech", "/collections/{coluuid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("coluuid", coluuid)
        /**
   * This endpoint is used to get contents in a collection. If no colpath query param is passed
   * 
   * Expected answers:
   *   code 200 : String (OK)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid Collection UUID
   * @param dir Directory
   */
  def collectionsColuuidGet(coluuid: String, dir: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/collections/{coluuid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("coluuid", coluuid)
      .withQueryParam("dir", dir)
      .withSuccessResponse[String](200)
        /**
   * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
   * 
   * Expected answers:
   *   code 200 : Map[String, String] (OK)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param body Content IDs to add to collection
   */
  def collectionsColuuidPost(body: Seq[Int])(implicit apiKey: ApiKeyValue): ApiRequest[Map[String, String]] =
    ApiRequest[Map[String, String]](ApiMethods.POST, "https://api.estuary.tech", "/collections/{coluuid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withSuccessResponse[Map[String, String]](200)
        /**
   * This endpoint adds a file to a collection
   * 
   * Expected answers:
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid Collection ID
   * @param content Content
   * @param path Path to file
   */
  def collectionsFsAddPost(coluuid: String, content: String, path: String)(implicit apiKey: ApiKeyValue): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.POST, "https://api.estuary.tech", "/collections/fs/add", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("coluuid", coluuid)
      .withQueryParam("content", content)
      .withQueryParam("path", path)
        /**
   * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
   * 
   * Expected answers:
   *   code 200 : Seq[MainCollection] (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 404 : UtilHttpError (Not Found)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param id User ID
   */
  def collectionsGet(id: Int)(implicit apiKey: ApiKeyValue): ApiRequest[Seq[MainCollection]] =
    ApiRequest[Seq[MainCollection]](ApiMethods.GET, "https://api.estuary.tech", "/collections/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("id", id)
      .withSuccessResponse[Seq[MainCollection]](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](404)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
   * 
   * Expected answers:
   *   code 200 : MainCollection (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 404 : UtilHttpError (Not Found)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param body Collection name and description
   */
  def collectionsPost(body: MainCreateCollectionBody)(implicit apiKey: ApiKeyValue): ApiRequest[MainCollection] =
    ApiRequest[MainCollection](ApiMethods.POST, "https://api.estuary.tech", "/collections/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withSuccessResponse[MainCollection](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](404)
      .withErrorResponse[UtilHttpError](500)
      

}

