/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.CollectionsCollection
import io.swagger.client.model.MainCreateCollectionBody
import io.swagger.client.model.MainDeleteContentFromCollectionBody
import io.swagger.client.model.UtilHttpError
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object CollectionsApi {

  /**
   * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid coluuid
   */
  def collectionsColuuidCommitPost(coluuid: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/collections/{coluuid}/commit", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("coluuid", coluuid)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid Collection ID
   * @param contentid Content ID
   * @param body Variable to use when filtering for files (must be either &#39;path&#39; or &#39;content_id&#39;)
   */
  def collectionsColuuidContentsDelete(coluuid: String, contentid: String, body: MainDeleteContentFromCollectionBody)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, "https://api.estuary.tech", "/collections/{coluuid}/contents", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withPathParam("coluuid", coluuid)
      .withPathParam("contentid", contentid)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to delete an existing collection.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid Collection ID
   */
  def collectionsColuuidDelete(coluuid: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.DELETE, "https://api.estuary.tech", "/collections/{coluuid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withPathParam("coluuid", coluuid)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to get contents in a collection. If no colpath query param is passed
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid coluuid
   * @param dir Directory
   */
  def collectionsColuuidGet(coluuid: String, dir: Option[String] = None)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.GET, "https://api.estuary.tech", "/collections/{coluuid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("dir", dir)
      .withPathParam("coluuid", coluuid)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid coluuid
   * @param contentIDs Content IDs to add to collection
   */
  def collectionsColuuidPost(coluuid: String, contentIDs: Seq[Int])(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/collections/{coluuid}", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(contentIDs)
      .withPathParam("coluuid", coluuid)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint adds a file to a collection
   * 
   * Expected answers:
   *   code 200 : String (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param coluuid Collection ID
   * @param content Content
   * @param path Path to file
   */
  def collectionsFsAddPost(coluuid: String, content: String, path: String)(implicit apiKey: ApiKeyValue): ApiRequest[String] =
    ApiRequest[String](ApiMethods.POST, "https://api.estuary.tech", "/collections/fs/add", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withQueryParam("coluuid", coluuid)
      .withQueryParam("content", content)
      .withQueryParam("path", path)
      .withSuccessResponse[String](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
   * 
   * Expected answers:
   *   code 200 : Seq[Seq[CollectionsCollection]] (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 404 : UtilHttpError (Not Found)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   */
  def collectionsGet()(implicit apiKey: ApiKeyValue): ApiRequest[Seq[Seq[CollectionsCollection]]] =
    ApiRequest[Seq[Seq[CollectionsCollection]]](ApiMethods.GET, "https://api.estuary.tech", "/collections/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withSuccessResponse[Seq[Seq[CollectionsCollection]]](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](404)
      .withErrorResponse[UtilHttpError](500)
        /**
   * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
   * 
   * Expected answers:
   *   code 200 : CollectionsCollection (OK)
   *   code 400 : UtilHttpError (Bad Request)
   *   code 404 : UtilHttpError (Not Found)
   *   code 500 : UtilHttpError (Internal Server Error)
   * 
   * Available security schemes:
   *   bearerAuth (apiKey)
   * 
   * @param body Collection name and description
   */
  def collectionsPost(body: MainCreateCollectionBody)(implicit apiKey: ApiKeyValue): ApiRequest[CollectionsCollection] =
    ApiRequest[CollectionsCollection](ApiMethods.POST, "https://api.estuary.tech", "/collections/", "application/json")
      .withApiKey(apiKey, "Authorization", HEADER)
      .withBody(body)
      .withSuccessResponse[CollectionsCollection](200)
      .withErrorResponse[UtilHttpError](400)
      .withErrorResponse[UtilHttpError](404)
      .withErrorResponse[UtilHttpError](500)
      

}

