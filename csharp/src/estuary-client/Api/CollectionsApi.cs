/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using estuary-client.Client;
using estuary-client.Model;

namespace estuary-client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ICollectionsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Produce a CID of the collection contents
        /// </summary>
        /// <remarks>
        /// This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>string</returns>
        string CollectionsColuuidCommitPost (string coluuid);

        /// <summary>
        /// Produce a CID of the collection contents
        /// </summary>
        /// <remarks>
        /// This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CollectionsColuuidCommitPostWithHttpInfo (string coluuid);
        /// <summary>
        /// Deletes a content from a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>string</returns>
        string CollectionsColuuidContentsDelete (MainDeleteContentFromCollectionBody body, string coluuid, string contentid);

        /// <summary>
        /// Deletes a content from a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CollectionsColuuidContentsDeleteWithHttpInfo (MainDeleteContentFromCollectionBody body, string coluuid, string contentid);
        /// <summary>
        /// Deletes a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>string</returns>
        string CollectionsColuuidDelete (string coluuid);

        /// <summary>
        /// Deletes a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CollectionsColuuidDeleteWithHttpInfo (string coluuid);
        /// <summary>
        /// Get contents in a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>string</returns>
        string CollectionsColuuidGet (string coluuid, string dir = null);

        /// <summary>
        /// Get contents in a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CollectionsColuuidGetWithHttpInfo (string coluuid, string dir = null);
        /// <summary>
        /// Add contents to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>string</returns>
        string CollectionsColuuidPost (List<int?> body, string coluuid);

        /// <summary>
        /// Add contents to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CollectionsColuuidPostWithHttpInfo (List<int?> body, string coluuid);
        /// <summary>
        /// Add a file to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds a file to a collection
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>string</returns>
        string CollectionsFsAddPost (string coluuid, string content, string path);

        /// <summary>
        /// Add a file to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds a file to a collection
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> CollectionsFsAddPostWithHttpInfo (string coluuid, string content, string path);
        /// <summary>
        /// List all collections
        /// </summary>
        /// <remarks>
        /// This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;List&lt;CollectionsCollection&gt;&gt;</returns>
        List<List<CollectionsCollection>> CollectionsGet ();

        /// <summary>
        /// List all collections
        /// </summary>
        /// <remarks>
        /// This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;List&lt;CollectionsCollection&gt;&gt;</returns>
        ApiResponse<List<List<CollectionsCollection>>> CollectionsGetWithHttpInfo ();
        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>CollectionsCollection</returns>
        CollectionsCollection CollectionsPost (MainCreateCollectionBody body);

        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>ApiResponse of CollectionsCollection</returns>
        ApiResponse<CollectionsCollection> CollectionsPostWithHttpInfo (MainCreateCollectionBody body);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Produce a CID of the collection contents
        /// </summary>
        /// <remarks>
        /// This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CollectionsColuuidCommitPostAsync (string coluuid);

        /// <summary>
        /// Produce a CID of the collection contents
        /// </summary>
        /// <remarks>
        /// This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidCommitPostAsyncWithHttpInfo (string coluuid);
        /// <summary>
        /// Deletes a content from a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CollectionsColuuidContentsDeleteAsync (MainDeleteContentFromCollectionBody body, string coluuid, string contentid);

        /// <summary>
        /// Deletes a content from a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidContentsDeleteAsyncWithHttpInfo (MainDeleteContentFromCollectionBody body, string coluuid, string contentid);
        /// <summary>
        /// Deletes a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CollectionsColuuidDeleteAsync (string coluuid);

        /// <summary>
        /// Deletes a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to delete an existing collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidDeleteAsyncWithHttpInfo (string coluuid);
        /// <summary>
        /// Get contents in a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CollectionsColuuidGetAsync (string coluuid, string dir = null);

        /// <summary>
        /// Get contents in a collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidGetAsyncWithHttpInfo (string coluuid, string dir = null);
        /// <summary>
        /// Add contents to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CollectionsColuuidPostAsync (List<int?> body, string coluuid);

        /// <summary>
        /// Add contents to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidPostAsyncWithHttpInfo (List<int?> body, string coluuid);
        /// <summary>
        /// Add a file to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds a file to a collection
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> CollectionsFsAddPostAsync (string coluuid, string content, string path);

        /// <summary>
        /// Add a file to a collection
        /// </summary>
        /// <remarks>
        /// This endpoint adds a file to a collection
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> CollectionsFsAddPostAsyncWithHttpInfo (string coluuid, string content, string path);
        /// <summary>
        /// List all collections
        /// </summary>
        /// <remarks>
        /// This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;List&lt;CollectionsCollection&gt;&gt;</returns>
        System.Threading.Tasks.Task<List<List<CollectionsCollection>>> CollectionsGetAsync ();

        /// <summary>
        /// List all collections
        /// </summary>
        /// <remarks>
        /// This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;List&lt;CollectionsCollection&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<List<CollectionsCollection>>>> CollectionsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>Task of CollectionsCollection</returns>
        System.Threading.Tasks.Task<CollectionsCollection> CollectionsPostAsync (MainCreateCollectionBody body);

        /// <summary>
        /// Create a new collection
        /// </summary>
        /// <remarks>
        /// This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>Task of ApiResponse (CollectionsCollection)</returns>
        System.Threading.Tasks.Task<ApiResponse<CollectionsCollection>> CollectionsPostAsyncWithHttpInfo (MainCreateCollectionBody body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class CollectionsApi : ICollectionsApi
    {
        private estuary-client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CollectionsApi(String basePath)
        {
            this.Configuration = new estuary-client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// </summary>
        /// <returns></returns>
        public CollectionsApi()
        {
            this.Configuration = estuary-client.Client.Configuration.Default;

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CollectionsApi(estuary-client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = estuary-client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public estuary-client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public estuary-client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Produce a CID of the collection contents This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>string</returns>
        public string CollectionsColuuidCommitPost (string coluuid)
        {
             ApiResponse<string> localVarResponse = CollectionsColuuidCommitPostWithHttpInfo(coluuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Produce a CID of the collection contents This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CollectionsColuuidCommitPostWithHttpInfo (string coluuid)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidCommitPost");

            var localVarPath = "/collections/{coluuid}/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidCommitPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Produce a CID of the collection contents This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CollectionsColuuidCommitPostAsync (string coluuid)
        {
             ApiResponse<string> localVarResponse = await CollectionsColuuidCommitPostAsyncWithHttpInfo(coluuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Produce a CID of the collection contents This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidCommitPostAsyncWithHttpInfo (string coluuid)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidCommitPost");

            var localVarPath = "/collections/{coluuid}/commit";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidCommitPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes a content from a collection This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>string</returns>
        public string CollectionsColuuidContentsDelete (MainDeleteContentFromCollectionBody body, string coluuid, string contentid)
        {
             ApiResponse<string> localVarResponse = CollectionsColuuidContentsDeleteWithHttpInfo(body, coluuid, contentid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a content from a collection This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CollectionsColuuidContentsDeleteWithHttpInfo (MainDeleteContentFromCollectionBody body, string coluuid, string contentid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CollectionsApi->CollectionsColuuidContentsDelete");
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidContentsDelete");
            // verify the required parameter 'contentid' is set
            if (contentid == null)
                throw new ApiException(400, "Missing required parameter 'contentid' when calling CollectionsApi->CollectionsColuuidContentsDelete");

            var localVarPath = "/collections/{coluuid}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            if (contentid != null) localVarPathParams.Add("contentid", this.Configuration.ApiClient.ParameterToString(contentid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidContentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes a content from a collection This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CollectionsColuuidContentsDeleteAsync (MainDeleteContentFromCollectionBody body, string coluuid, string contentid)
        {
             ApiResponse<string> localVarResponse = await CollectionsColuuidContentsDeleteAsyncWithHttpInfo(body, coluuid, contentid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a content from a collection This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;)</param>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="contentid">Content ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidContentsDeleteAsyncWithHttpInfo (MainDeleteContentFromCollectionBody body, string coluuid, string contentid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CollectionsApi->CollectionsColuuidContentsDelete");
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidContentsDelete");
            // verify the required parameter 'contentid' is set
            if (contentid == null)
                throw new ApiException(400, "Missing required parameter 'contentid' when calling CollectionsApi->CollectionsColuuidContentsDelete");

            var localVarPath = "/collections/{coluuid}/contents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            if (contentid != null) localVarPathParams.Add("contentid", this.Configuration.ApiClient.ParameterToString(contentid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidContentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes a collection This endpoint is used to delete an existing collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>string</returns>
        public string CollectionsColuuidDelete (string coluuid)
        {
             ApiResponse<string> localVarResponse = CollectionsColuuidDeleteWithHttpInfo(coluuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a collection This endpoint is used to delete an existing collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CollectionsColuuidDeleteWithHttpInfo (string coluuid)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidDelete");

            var localVarPath = "/collections/{coluuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Deletes a collection This endpoint is used to delete an existing collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CollectionsColuuidDeleteAsync (string coluuid)
        {
             ApiResponse<string> localVarResponse = await CollectionsColuuidDeleteAsyncWithHttpInfo(coluuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a collection This endpoint is used to delete an existing collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidDeleteAsyncWithHttpInfo (string coluuid)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidDelete");

            var localVarPath = "/collections/{coluuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "*/*"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get contents in a collection This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>string</returns>
        public string CollectionsColuuidGet (string coluuid, string dir = null)
        {
             ApiResponse<string> localVarResponse = CollectionsColuuidGetWithHttpInfo(coluuid, dir);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get contents in a collection This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CollectionsColuuidGetWithHttpInfo (string coluuid, string dir = null)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidGet");

            var localVarPath = "/collections/{coluuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            if (dir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dir", dir)); // query parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get contents in a collection This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CollectionsColuuidGetAsync (string coluuid, string dir = null)
        {
             ApiResponse<string> localVarResponse = await CollectionsColuuidGetAsyncWithHttpInfo(coluuid, dir);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get contents in a collection This endpoint is used to get contents in a collection. If no colpath query param is passed
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">coluuid</param>
        /// <param name="dir">Directory (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidGetAsyncWithHttpInfo (string coluuid, string dir = null)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidGet");

            var localVarPath = "/collections/{coluuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            if (dir != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "dir", dir)); // query parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add contents to a collection This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>string</returns>
        public string CollectionsColuuidPost (List<int?> body, string coluuid)
        {
             ApiResponse<string> localVarResponse = CollectionsColuuidPostWithHttpInfo(body, coluuid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add contents to a collection This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CollectionsColuuidPostWithHttpInfo (List<int?> body, string coluuid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CollectionsApi->CollectionsColuuidPost");
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidPost");

            var localVarPath = "/collections/{coluuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add contents to a collection This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CollectionsColuuidPostAsync (List<int?> body, string coluuid)
        {
             ApiResponse<string> localVarResponse = await CollectionsColuuidPostAsyncWithHttpInfo(body, coluuid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add contents to a collection This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Content IDs to add to collection</param>
        /// <param name="coluuid">Collection UUID</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CollectionsColuuidPostAsyncWithHttpInfo (List<int?> body, string coluuid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CollectionsApi->CollectionsColuuidPost");
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsColuuidPost");

            var localVarPath = "/collections/{coluuid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarPathParams.Add("coluuid", this.Configuration.ApiClient.ParameterToString(coluuid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsColuuidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add a file to a collection This endpoint adds a file to a collection
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>string</returns>
        public string CollectionsFsAddPost (string coluuid, string content, string path)
        {
             ApiResponse<string> localVarResponse = CollectionsFsAddPostWithHttpInfo(coluuid, content, path);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a file to a collection This endpoint adds a file to a collection
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > CollectionsFsAddPostWithHttpInfo (string coluuid, string content, string path)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsFsAddPost");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling CollectionsApi->CollectionsFsAddPost");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CollectionsApi->CollectionsFsAddPost");

            var localVarPath = "/collections/fs/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coluuid", coluuid)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsFsAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Add a file to a collection This endpoint adds a file to a collection
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> CollectionsFsAddPostAsync (string coluuid, string content, string path)
        {
             ApiResponse<string> localVarResponse = await CollectionsFsAddPostAsyncWithHttpInfo(coluuid, content, path);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a file to a collection This endpoint adds a file to a collection
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="coluuid">Collection ID</param>
        /// <param name="content">Content</param>
        /// <param name="path">Path to file</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> CollectionsFsAddPostAsyncWithHttpInfo (string coluuid, string content, string path)
        {
            // verify the required parameter 'coluuid' is set
            if (coluuid == null)
                throw new ApiException(400, "Missing required parameter 'coluuid' when calling CollectionsApi->CollectionsFsAddPost");
            // verify the required parameter 'content' is set
            if (content == null)
                throw new ApiException(400, "Missing required parameter 'content' when calling CollectionsApi->CollectionsFsAddPost");
            // verify the required parameter 'path' is set
            if (path == null)
                throw new ApiException(400, "Missing required parameter 'path' when calling CollectionsApi->CollectionsFsAddPost");

            var localVarPath = "/collections/fs/add";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (coluuid != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "coluuid", coluuid)); // query parameter
            if (content != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "content", content)); // query parameter
            if (path != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "path", path)); // query parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsFsAddPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// List all collections This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;List&lt;CollectionsCollection&gt;&gt;</returns>
        public List<List<CollectionsCollection>> CollectionsGet ()
        {
             ApiResponse<List<List<CollectionsCollection>>> localVarResponse = CollectionsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all collections This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;List&lt;CollectionsCollection&gt;&gt;</returns>
        public ApiResponse< List<List<CollectionsCollection>> > CollectionsGetWithHttpInfo ()
        {

            var localVarPath = "/collections/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<List<CollectionsCollection>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<List<CollectionsCollection>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<List<CollectionsCollection>>)));
        }

        /// <summary>
        /// List all collections This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;List&lt;CollectionsCollection&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<List<List<CollectionsCollection>>> CollectionsGetAsync ()
        {
             ApiResponse<List<List<CollectionsCollection>>> localVarResponse = await CollectionsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all collections This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;List&lt;CollectionsCollection&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<List<CollectionsCollection>>>> CollectionsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/collections/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<List<CollectionsCollection>>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<List<CollectionsCollection>>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<List<CollectionsCollection>>)));
        }

        /// <summary>
        /// Create a new collection This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>CollectionsCollection</returns>
        public CollectionsCollection CollectionsPost (MainCreateCollectionBody body)
        {
             ApiResponse<CollectionsCollection> localVarResponse = CollectionsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new collection This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>ApiResponse of CollectionsCollection</returns>
        public ApiResponse< CollectionsCollection > CollectionsPostWithHttpInfo (MainCreateCollectionBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CollectionsApi->CollectionsPost");

            var localVarPath = "/collections/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CollectionsCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionsCollection)));
        }

        /// <summary>
        /// Create a new collection This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>Task of CollectionsCollection</returns>
        public async System.Threading.Tasks.Task<CollectionsCollection> CollectionsPostAsync (MainCreateCollectionBody body)
        {
             ApiResponse<CollectionsCollection> localVarResponse = await CollectionsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new collection This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Collection name and description</param>
        /// <returns>Task of ApiResponse (CollectionsCollection)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CollectionsCollection>> CollectionsPostAsyncWithHttpInfo (MainCreateCollectionBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling CollectionsApi->CollectionsPost");

            var localVarPath = "/collections/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CollectionsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CollectionsCollection>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (CollectionsCollection) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CollectionsCollection)));
        }

    }
}
