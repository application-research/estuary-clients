/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using estuary-client.Client;
using estuary-client.Model;

namespace estuary-client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface ISpApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>GithubComApplicationResearchEstuaryApiV2ClaimResponse</returns>
        GithubComApplicationResearchEstuaryApiV2ClaimResponse StorageProvidersClaimPost (MinerClaimMinerBody body);

        /// <summary>
        /// Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>ApiResponse of GithubComApplicationResearchEstuaryApiV2ClaimResponse</returns>
        ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse> StorageProvidersClaimPostWithHttpInfo (MinerClaimMinerBody body);
        /// <summary>
        /// Get Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user get the message in order to claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse</returns>
        GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse StorageProvidersClaimSpGet (string sp);

        /// <summary>
        /// Get Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user get the message in order to claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>ApiResponse of GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse</returns>
        ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> StorageProvidersClaimSpGetWithHttpInfo (string sp);
        /// <summary>
        /// Get all storage providers deals
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers deals
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>string</returns>
        string StorageProvidersDealsSpGet (string sp, string ignoreFailed = null);

        /// <summary>
        /// Get all storage providers deals
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers deals
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StorageProvidersDealsSpGetWithHttpInfo (string sp, string ignoreFailed = null);
        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>string</returns>
        string StorageProvidersFailuresSpGet (string sp);

        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StorageProvidersFailuresSpGetWithHttpInfo (string sp);
        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiStorageProviderResp&gt;</returns>
        List<ApiStorageProviderResp> StorageProvidersGet ();

        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiStorageProviderResp&gt;</returns>
        ApiResponse<List<ApiStorageProviderResp>> StorageProvidersGetWithHttpInfo ();
        /// <summary>
        /// Set Storage Provider Info
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user set storage provider info.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns></returns>
        void StorageProvidersSetInfoSpPut (MinerMinerSetInfoParams body, string sp);

        /// <summary>
        /// Set Storage Provider Info
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user set storage provider info.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StorageProvidersSetInfoSpPutWithHttpInfo (MinerMinerSetInfoParams body, string sp);
        /// <summary>
        /// Get storage provider stats
        /// </summary>
        /// <remarks>
        /// This endpoint returns storage provider stats
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>string</returns>
        string StorageProvidersStatsSpGet (string sp);

        /// <summary>
        /// Get storage provider stats
        /// </summary>
        /// <remarks>
        /// This endpoint returns storage provider stats
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> StorageProvidersStatsSpGetWithHttpInfo (string sp);
        /// <summary>
        /// Suspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user suspend a storage provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        Dictionary<string, string> StorageProvidersSuspendSpPost (MinerSuspendMinerBody body, string sp);

        /// <summary>
        /// Suspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user suspend a storage provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        ApiResponse<Dictionary<string, string>> StorageProvidersSuspendSpPostWithHttpInfo (MinerSuspendMinerBody body, string sp);
        /// <summary>
        /// Unuspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user unsuspend a Storage Provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns></returns>
        void StorageProvidersUnsuspendSpPut (string sp);

        /// <summary>
        /// Unuspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user unsuspend a Storage Provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> StorageProvidersUnsuspendSpPutWithHttpInfo (string sp);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>Task of GithubComApplicationResearchEstuaryApiV2ClaimResponse</returns>
        System.Threading.Tasks.Task<GithubComApplicationResearchEstuaryApiV2ClaimResponse> StorageProvidersClaimPostAsync (MinerClaimMinerBody body);

        /// <summary>
        /// Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>Task of ApiResponse (GithubComApplicationResearchEstuaryApiV2ClaimResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>> StorageProvidersClaimPostAsyncWithHttpInfo (MinerClaimMinerBody body);
        /// <summary>
        /// Get Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user get the message in order to claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>Task of GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse</returns>
        System.Threading.Tasks.Task<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> StorageProvidersClaimSpGetAsync (string sp);

        /// <summary>
        /// Get Claim Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user get the message in order to claim a storage provider
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>Task of ApiResponse (GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>> StorageProvidersClaimSpGetAsyncWithHttpInfo (string sp);
        /// <summary>
        /// Get all storage providers deals
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers deals
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StorageProvidersDealsSpGetAsync (string sp, string ignoreFailed = null);

        /// <summary>
        /// Get all storage providers deals
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers deals
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StorageProvidersDealsSpGetAsyncWithHttpInfo (string sp, string ignoreFailed = null);
        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StorageProvidersFailuresSpGetAsync (string sp);

        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StorageProvidersFailuresSpGetAsyncWithHttpInfo (string sp);
        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiStorageProviderResp&gt;</returns>
        System.Threading.Tasks.Task<List<ApiStorageProviderResp>> StorageProvidersGetAsync ();

        /// <summary>
        /// Get all storage providers
        /// </summary>
        /// <remarks>
        /// This endpoint returns all storage providers
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiStorageProviderResp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ApiStorageProviderResp>>> StorageProvidersGetAsyncWithHttpInfo ();
        /// <summary>
        /// Set Storage Provider Info
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user set storage provider info.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StorageProvidersSetInfoSpPutAsync (MinerMinerSetInfoParams body, string sp);

        /// <summary>
        /// Set Storage Provider Info
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user set storage provider info.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StorageProvidersSetInfoSpPutAsyncWithHttpInfo (MinerMinerSetInfoParams body, string sp);
        /// <summary>
        /// Get storage provider stats
        /// </summary>
        /// <remarks>
        /// This endpoint returns storage provider stats
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> StorageProvidersStatsSpGetAsync (string sp);

        /// <summary>
        /// Get storage provider stats
        /// </summary>
        /// <remarks>
        /// This endpoint returns storage provider stats
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> StorageProvidersStatsSpGetAsyncWithHttpInfo (string sp);
        /// <summary>
        /// Suspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user suspend a storage provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, string>> StorageProvidersSuspendSpPostAsync (MinerSuspendMinerBody body, string sp);

        /// <summary>
        /// Suspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user suspend a storage provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> StorageProvidersSuspendSpPostAsyncWithHttpInfo (MinerSuspendMinerBody body, string sp);
        /// <summary>
        /// Unuspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user unsuspend a Storage Provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task StorageProvidersUnsuspendSpPutAsync (string sp);

        /// <summary>
        /// Unuspend Storage Provider
        /// </summary>
        /// <remarks>
        /// This endpoint lets a user unsuspend a Storage Provider.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> StorageProvidersUnsuspendSpPutAsyncWithHttpInfo (string sp);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class SpApi : ISpApi
    {
        private estuary-client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SpApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SpApi(String basePath)
        {
            this.Configuration = new estuary-client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpApi"/> class
        /// </summary>
        /// <returns></returns>
        public SpApi()
        {
            this.Configuration = estuary-client.Client.Configuration.Default;

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SpApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SpApi(estuary-client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = estuary-client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public estuary-client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public estuary-client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Claim Storage Provider This endpoint lets a user claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>GithubComApplicationResearchEstuaryApiV2ClaimResponse</returns>
        public GithubComApplicationResearchEstuaryApiV2ClaimResponse StorageProvidersClaimPost (MinerClaimMinerBody body)
        {
             ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse> localVarResponse = StorageProvidersClaimPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Claim Storage Provider This endpoint lets a user claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>ApiResponse of GithubComApplicationResearchEstuaryApiV2ClaimResponse</returns>
        public ApiResponse< GithubComApplicationResearchEstuaryApiV2ClaimResponse > StorageProvidersClaimPostWithHttpInfo (MinerClaimMinerBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SpApi->StorageProvidersClaimPost");

            var localVarPath = "/storage-providers/claim";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersClaimPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GithubComApplicationResearchEstuaryApiV2ClaimResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GithubComApplicationResearchEstuaryApiV2ClaimResponse)));
        }

        /// <summary>
        /// Claim Storage Provider This endpoint lets a user claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>Task of GithubComApplicationResearchEstuaryApiV2ClaimResponse</returns>
        public async System.Threading.Tasks.Task<GithubComApplicationResearchEstuaryApiV2ClaimResponse> StorageProvidersClaimPostAsync (MinerClaimMinerBody body)
        {
             ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse> localVarResponse = await StorageProvidersClaimPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Claim Storage Provider This endpoint lets a user claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Claim Storage Provider Body</param>
        /// <returns>Task of ApiResponse (GithubComApplicationResearchEstuaryApiV2ClaimResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>> StorageProvidersClaimPostAsyncWithHttpInfo (MinerClaimMinerBody body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SpApi->StorageProvidersClaimPost");

            var localVarPath = "/storage-providers/claim";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersClaimPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GithubComApplicationResearchEstuaryApiV2ClaimResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GithubComApplicationResearchEstuaryApiV2ClaimResponse)));
        }

        /// <summary>
        /// Get Claim Storage Provider This endpoint lets a user get the message in order to claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse</returns>
        public GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse StorageProvidersClaimSpGet (string sp)
        {
             ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> localVarResponse = StorageProvidersClaimSpGetWithHttpInfo(sp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Claim Storage Provider This endpoint lets a user get the message in order to claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>ApiResponse of GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse</returns>
        public ApiResponse< GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse > StorageProvidersClaimSpGetWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersClaimSpGet");

            var localVarPath = "/storage-providers/claim/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersClaimSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse)));
        }

        /// <summary>
        /// Get Claim Storage Provider This endpoint lets a user get the message in order to claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>Task of GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse</returns>
        public async System.Threading.Tasks.Task<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> StorageProvidersClaimSpGetAsync (string sp)
        {
             ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> localVarResponse = await StorageProvidersClaimSpGetAsyncWithHttpInfo(sp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Claim Storage Provider This endpoint lets a user get the message in order to claim a storage provider
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider claim message</param>
        /// <returns>Task of ApiResponse (GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>> StorageProvidersClaimSpGetAsyncWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersClaimSpGet");

            var localVarPath = "/storage-providers/claim/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersClaimSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse)));
        }

        /// <summary>
        /// Get all storage providers deals This endpoint returns all storage providers deals
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>string</returns>
        public string StorageProvidersDealsSpGet (string sp, string ignoreFailed = null)
        {
             ApiResponse<string> localVarResponse = StorageProvidersDealsSpGetWithHttpInfo(sp, ignoreFailed);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all storage providers deals This endpoint returns all storage providers deals
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > StorageProvidersDealsSpGetWithHttpInfo (string sp, string ignoreFailed = null)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersDealsSpGet");

            var localVarPath = "/storage-providers/deals/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            if (ignoreFailed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignore-failed", ignoreFailed)); // query parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersDealsSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all storage providers deals This endpoint returns all storage providers deals
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StorageProvidersDealsSpGetAsync (string sp, string ignoreFailed = null)
        {
             ApiResponse<string> localVarResponse = await StorageProvidersDealsSpGetAsyncWithHttpInfo(sp, ignoreFailed);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all storage providers deals This endpoint returns all storage providers deals
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <param name="ignoreFailed">Ignore Failed (optional)</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> StorageProvidersDealsSpGetAsyncWithHttpInfo (string sp, string ignoreFailed = null)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersDealsSpGet");

            var localVarPath = "/storage-providers/deals/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            if (ignoreFailed != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignore-failed", ignoreFailed)); // query parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersDealsSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>string</returns>
        public string StorageProvidersFailuresSpGet (string sp)
        {
             ApiResponse<string> localVarResponse = StorageProvidersFailuresSpGetWithHttpInfo(sp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > StorageProvidersFailuresSpGetWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersFailuresSpGet");

            var localVarPath = "/storage-providers/failures/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersFailuresSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StorageProvidersFailuresSpGetAsync (string sp)
        {
             ApiResponse<string> localVarResponse = await StorageProvidersFailuresSpGetAsyncWithHttpInfo(sp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> StorageProvidersFailuresSpGetAsyncWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersFailuresSpGet");

            var localVarPath = "/storage-providers/failures/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersFailuresSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;ApiStorageProviderResp&gt;</returns>
        public List<ApiStorageProviderResp> StorageProvidersGet ()
        {
             ApiResponse<List<ApiStorageProviderResp>> localVarResponse = StorageProvidersGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;ApiStorageProviderResp&gt;</returns>
        public ApiResponse< List<ApiStorageProviderResp> > StorageProvidersGetWithHttpInfo ()
        {

            var localVarPath = "/storage-providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiStorageProviderResp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ApiStorageProviderResp>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiStorageProviderResp>)));
        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;ApiStorageProviderResp&gt;</returns>
        public async System.Threading.Tasks.Task<List<ApiStorageProviderResp>> StorageProvidersGetAsync ()
        {
             ApiResponse<List<ApiStorageProviderResp>> localVarResponse = await StorageProvidersGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all storage providers This endpoint returns all storage providers
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;ApiStorageProviderResp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<ApiStorageProviderResp>>> StorageProvidersGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/storage-providers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<ApiStorageProviderResp>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<ApiStorageProviderResp>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<ApiStorageProviderResp>)));
        }

        /// <summary>
        /// Set Storage Provider Info This endpoint lets a user set storage provider info.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns></returns>
        public void StorageProvidersSetInfoSpPut (MinerMinerSetInfoParams body, string sp)
        {
             StorageProvidersSetInfoSpPutWithHttpInfo(body, sp);
        }

        /// <summary>
        /// Set Storage Provider Info This endpoint lets a user set storage provider info.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StorageProvidersSetInfoSpPutWithHttpInfo (MinerMinerSetInfoParams body, string sp)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SpApi->StorageProvidersSetInfoSpPut");
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersSetInfoSpPut");

            var localVarPath = "/storage-providers/set-info/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersSetInfoSpPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Set Storage Provider Info This endpoint lets a user set storage provider info.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StorageProvidersSetInfoSpPutAsync (MinerMinerSetInfoParams body, string sp)
        {
             await StorageProvidersSetInfoSpPutAsyncWithHttpInfo(body, sp);

        }

        /// <summary>
        /// Set Storage Provider Info This endpoint lets a user set storage provider info.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Storage Provider set info params</param>
        /// <param name="sp">Storage Provider to set info for</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StorageProvidersSetInfoSpPutAsyncWithHttpInfo (MinerMinerSetInfoParams body, string sp)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SpApi->StorageProvidersSetInfoSpPut");
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersSetInfoSpPut");

            var localVarPath = "/storage-providers/set-info/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersSetInfoSpPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get storage provider stats This endpoint returns storage provider stats
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>string</returns>
        public string StorageProvidersStatsSpGet (string sp)
        {
             ApiResponse<string> localVarResponse = StorageProvidersStatsSpGetWithHttpInfo(sp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get storage provider stats This endpoint returns storage provider stats
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > StorageProvidersStatsSpGetWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersStatsSpGet");

            var localVarPath = "/storage-providers/stats/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersStatsSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Get storage provider stats This endpoint returns storage provider stats
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> StorageProvidersStatsSpGetAsync (string sp)
        {
             ApiResponse<string> localVarResponse = await StorageProvidersStatsSpGetAsyncWithHttpInfo(sp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get storage provider stats This endpoint returns storage provider stats
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Filter by storage provider</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> StorageProvidersStatsSpGetAsyncWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersStatsSpGet");

            var localVarPath = "/storage-providers/stats/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersStatsSpGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (string) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        /// Suspend Storage Provider This endpoint lets a user suspend a storage provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>Dictionary&lt;string, string&gt;</returns>
        public Dictionary<string, string> StorageProvidersSuspendSpPost (MinerSuspendMinerBody body, string sp)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = StorageProvidersSuspendSpPostWithHttpInfo(body, sp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Suspend Storage Provider This endpoint lets a user suspend a storage provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
        public ApiResponse< Dictionary<string, string> > StorageProvidersSuspendSpPostWithHttpInfo (MinerSuspendMinerBody body, string sp)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SpApi->StorageProvidersSuspendSpPost");
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersSuspendSpPost");

            var localVarPath = "/storage-providers/suspend/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersSuspendSpPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Suspend Storage Provider This endpoint lets a user suspend a storage provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, string>> StorageProvidersSuspendSpPostAsync (MinerSuspendMinerBody body, string sp)
        {
             ApiResponse<Dictionary<string, string>> localVarResponse = await StorageProvidersSuspendSpPostAsyncWithHttpInfo(body, sp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Suspend Storage Provider This endpoint lets a user suspend a storage provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Suspend Storage Provider Body</param>
        /// <param name="sp">Storage Provider to suspend</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> StorageProvidersSuspendSpPostAsyncWithHttpInfo (MinerSuspendMinerBody body, string sp)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SpApi->StorageProvidersSuspendSpPost");
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersSuspendSpPost");

            var localVarPath = "/storage-providers/suspend/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersSuspendSpPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Dictionary<string, string>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Dictionary<string, string>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Dictionary<string, string>)));
        }

        /// <summary>
        /// Unuspend Storage Provider This endpoint lets a user unsuspend a Storage Provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns></returns>
        public void StorageProvidersUnsuspendSpPut (string sp)
        {
             StorageProvidersUnsuspendSpPutWithHttpInfo(sp);
        }

        /// <summary>
        /// Unuspend Storage Provider This endpoint lets a user unsuspend a Storage Provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> StorageProvidersUnsuspendSpPutWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersUnsuspendSpPut");

            var localVarPath = "/storage-providers/unsuspend/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersUnsuspendSpPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Unuspend Storage Provider This endpoint lets a user unsuspend a Storage Provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task StorageProvidersUnsuspendSpPutAsync (string sp)
        {
             await StorageProvidersUnsuspendSpPutAsyncWithHttpInfo(sp);

        }

        /// <summary>
        /// Unuspend Storage Provider This endpoint lets a user unsuspend a Storage Provider.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="sp">Storage Provider to unsuspend</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> StorageProvidersUnsuspendSpPutAsyncWithHttpInfo (string sp)
        {
            // verify the required parameter 'sp' is set
            if (sp == null)
                throw new ApiException(400, "Missing required parameter 'sp' when calling SpApi->StorageProvidersUnsuspendSpPut");

            var localVarPath = "/storage-providers/unsuspend/{sp}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (sp != null) localVarPathParams.Add("sp", this.Configuration.ApiClient.ParameterToString(sp)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StorageProvidersUnsuspendSpPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
