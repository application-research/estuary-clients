/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using estuary-client.Client;
using estuary-client.Model;

namespace estuary-client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public interface IPinningApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List all pin status objects
        /// </summary>
        /// <remarks>
        /// This endpoint lists all pin status objects
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PinnerIpfsListPinStatusResponse</returns>
        PinnerIpfsListPinStatusResponse PinningPinsGet ();

        /// <summary>
        /// List all pin status objects
        /// </summary>
        /// <remarks>
        /// This endpoint lists all pin status objects
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PinnerIpfsListPinStatusResponse</returns>
        ApiResponse<PinnerIpfsListPinStatusResponse> PinningPinsGetWithHttpInfo ();
        /// <summary>
        /// Delete a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns></returns>
        void PinningPinsPinidDelete (string pinid);

        /// <summary>
        /// Delete a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PinningPinsPinidDeleteWithHttpInfo (string pinid);
        /// <summary>
        /// Get a pin status object
        /// </summary>
        /// <remarks>
        /// This endpoint returns a pin status object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>PinnerIpfsPinStatusResponse</returns>
        PinnerIpfsPinStatusResponse PinningPinsPinidGet (string pinid);

        /// <summary>
        /// Get a pin status object
        /// </summary>
        /// <remarks>
        /// This endpoint returns a pin status object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>ApiResponse of PinnerIpfsPinStatusResponse</returns>
        ApiResponse<PinnerIpfsPinStatusResponse> PinningPinsPinidGetWithHttpInfo (string pinid);
        /// <summary>
        /// Replace a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint replaces a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>PinnerIpfsPinStatusResponse</returns>
        PinnerIpfsPinStatusResponse PinningPinsPinidPost (PinnerIpfsPin body, string pinid);

        /// <summary>
        /// Replace a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint replaces a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>ApiResponse of PinnerIpfsPinStatusResponse</returns>
        ApiResponse<PinnerIpfsPinStatusResponse> PinningPinsPinidPostWithHttpInfo (PinnerIpfsPin body, string pinid);
        /// <summary>
        /// Add and pin object
        /// </summary>
        /// <remarks>
        /// This endpoint adds a pin to the IPFS daemon.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>PinnerIpfsPinStatusResponse</returns>
        PinnerIpfsPinStatusResponse PinningPinsPost (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null);

        /// <summary>
        /// Add and pin object
        /// </summary>
        /// <remarks>
        /// This endpoint adds a pin to the IPFS daemon.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>ApiResponse of PinnerIpfsPinStatusResponse</returns>
        ApiResponse<PinnerIpfsPinStatusResponse> PinningPinsPostWithHttpInfo (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// List all pin status objects
        /// </summary>
        /// <remarks>
        /// This endpoint lists all pin status objects
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PinnerIpfsListPinStatusResponse</returns>
        System.Threading.Tasks.Task<PinnerIpfsListPinStatusResponse> PinningPinsGetAsync ();

        /// <summary>
        /// List all pin status objects
        /// </summary>
        /// <remarks>
        /// This endpoint lists all pin status objects
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PinnerIpfsListPinStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinnerIpfsListPinStatusResponse>> PinningPinsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Delete a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PinningPinsPinidDeleteAsync (string pinid);

        /// <summary>
        /// Delete a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint deletes a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PinningPinsPinidDeleteAsyncWithHttpInfo (string pinid);
        /// <summary>
        /// Get a pin status object
        /// </summary>
        /// <remarks>
        /// This endpoint returns a pin status object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>Task of PinnerIpfsPinStatusResponse</returns>
        System.Threading.Tasks.Task<PinnerIpfsPinStatusResponse> PinningPinsPinidGetAsync (string pinid);

        /// <summary>
        /// Get a pin status object
        /// </summary>
        /// <remarks>
        /// This endpoint returns a pin status object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>Task of ApiResponse (PinnerIpfsPinStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinnerIpfsPinStatusResponse>> PinningPinsPinidGetAsyncWithHttpInfo (string pinid);
        /// <summary>
        /// Replace a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint replaces a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>Task of PinnerIpfsPinStatusResponse</returns>
        System.Threading.Tasks.Task<PinnerIpfsPinStatusResponse> PinningPinsPinidPostAsync (PinnerIpfsPin body, string pinid);

        /// <summary>
        /// Replace a pinned object
        /// </summary>
        /// <remarks>
        /// This endpoint replaces a pinned object.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>Task of ApiResponse (PinnerIpfsPinStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinnerIpfsPinStatusResponse>> PinningPinsPinidPostAsyncWithHttpInfo (PinnerIpfsPin body, string pinid);
        /// <summary>
        /// Add and pin object
        /// </summary>
        /// <remarks>
        /// This endpoint adds a pin to the IPFS daemon.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>Task of PinnerIpfsPinStatusResponse</returns>
        System.Threading.Tasks.Task<PinnerIpfsPinStatusResponse> PinningPinsPostAsync (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null);

        /// <summary>
        /// Add and pin object
        /// </summary>
        /// <remarks>
        /// This endpoint adds a pin to the IPFS daemon.
        /// </remarks>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>Task of ApiResponse (PinnerIpfsPinStatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<PinnerIpfsPinStatusResponse>> PinningPinsPostAsyncWithHttpInfo (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
        public partial class PinningApi : IPinningApi
    {
        private estuary-client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PinningApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PinningApi(String basePath)
        {
            this.Configuration = new estuary-client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PinningApi"/> class
        /// </summary>
        /// <returns></returns>
        public PinningApi()
        {
            this.Configuration = estuary-client.Client.Configuration.Default;

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PinningApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PinningApi(estuary-client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = estuary-client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = estuary-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public estuary-client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public estuary-client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// List all pin status objects This endpoint lists all pin status objects
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>PinnerIpfsListPinStatusResponse</returns>
        public PinnerIpfsListPinStatusResponse PinningPinsGet ()
        {
             ApiResponse<PinnerIpfsListPinStatusResponse> localVarResponse = PinningPinsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// List all pin status objects This endpoint lists all pin status objects
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of PinnerIpfsListPinStatusResponse</returns>
        public ApiResponse< PinnerIpfsListPinStatusResponse > PinningPinsGetWithHttpInfo ()
        {

            var localVarPath = "/pinning/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsListPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsListPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsListPinStatusResponse)));
        }

        /// <summary>
        /// List all pin status objects This endpoint lists all pin status objects
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of PinnerIpfsListPinStatusResponse</returns>
        public async System.Threading.Tasks.Task<PinnerIpfsListPinStatusResponse> PinningPinsGetAsync ()
        {
             ApiResponse<PinnerIpfsListPinStatusResponse> localVarResponse = await PinningPinsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// List all pin status objects This endpoint lists all pin status objects
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (PinnerIpfsListPinStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinnerIpfsListPinStatusResponse>> PinningPinsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/pinning/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsListPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsListPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsListPinStatusResponse)));
        }

        /// <summary>
        /// Delete a pinned object This endpoint deletes a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns></returns>
        public void PinningPinsPinidDelete (string pinid)
        {
             PinningPinsPinidDeleteWithHttpInfo(pinid);
        }

        /// <summary>
        /// Delete a pinned object This endpoint deletes a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PinningPinsPinidDeleteWithHttpInfo (string pinid)
        {
            // verify the required parameter 'pinid' is set
            if (pinid == null)
                throw new ApiException(400, "Missing required parameter 'pinid' when calling PinningApi->PinningPinsPinidDelete");

            var localVarPath = "/pinning/pins/{pinid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pinid != null) localVarPathParams.Add("pinid", this.Configuration.ApiClient.ParameterToString(pinid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPinidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Delete a pinned object This endpoint deletes a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PinningPinsPinidDeleteAsync (string pinid)
        {
             await PinningPinsPinidDeleteAsyncWithHttpInfo(pinid);

        }

        /// <summary>
        /// Delete a pinned object This endpoint deletes a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">Pin ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PinningPinsPinidDeleteAsyncWithHttpInfo (string pinid)
        {
            // verify the required parameter 'pinid' is set
            if (pinid == null)
                throw new ApiException(400, "Missing required parameter 'pinid' when calling PinningApi->PinningPinsPinidDelete");

            var localVarPath = "/pinning/pins/{pinid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pinid != null) localVarPathParams.Add("pinid", this.Configuration.ApiClient.ParameterToString(pinid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPinidDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get a pin status object This endpoint returns a pin status object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>PinnerIpfsPinStatusResponse</returns>
        public PinnerIpfsPinStatusResponse PinningPinsPinidGet (string pinid)
        {
             ApiResponse<PinnerIpfsPinStatusResponse> localVarResponse = PinningPinsPinidGetWithHttpInfo(pinid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a pin status object This endpoint returns a pin status object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>ApiResponse of PinnerIpfsPinStatusResponse</returns>
        public ApiResponse< PinnerIpfsPinStatusResponse > PinningPinsPinidGetWithHttpInfo (string pinid)
        {
            // verify the required parameter 'pinid' is set
            if (pinid == null)
                throw new ApiException(400, "Missing required parameter 'pinid' when calling PinningApi->PinningPinsPinidGet");

            var localVarPath = "/pinning/pins/{pinid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pinid != null) localVarPathParams.Add("pinid", this.Configuration.ApiClient.ParameterToString(pinid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPinidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsPinStatusResponse)));
        }

        /// <summary>
        /// Get a pin status object This endpoint returns a pin status object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>Task of PinnerIpfsPinStatusResponse</returns>
        public async System.Threading.Tasks.Task<PinnerIpfsPinStatusResponse> PinningPinsPinidGetAsync (string pinid)
        {
             ApiResponse<PinnerIpfsPinStatusResponse> localVarResponse = await PinningPinsPinidGetAsyncWithHttpInfo(pinid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a pin status object This endpoint returns a pin status object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pinid">cid</param>
        /// <returns>Task of ApiResponse (PinnerIpfsPinStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinnerIpfsPinStatusResponse>> PinningPinsPinidGetAsyncWithHttpInfo (string pinid)
        {
            // verify the required parameter 'pinid' is set
            if (pinid == null)
                throw new ApiException(400, "Missing required parameter 'pinid' when calling PinningApi->PinningPinsPinidGet");

            var localVarPath = "/pinning/pins/{pinid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pinid != null) localVarPathParams.Add("pinid", this.Configuration.ApiClient.ParameterToString(pinid)); // path parameter
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPinidGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsPinStatusResponse)));
        }

        /// <summary>
        /// Replace a pinned object This endpoint replaces a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>PinnerIpfsPinStatusResponse</returns>
        public PinnerIpfsPinStatusResponse PinningPinsPinidPost (PinnerIpfsPin body, string pinid)
        {
             ApiResponse<PinnerIpfsPinStatusResponse> localVarResponse = PinningPinsPinidPostWithHttpInfo(body, pinid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace a pinned object This endpoint replaces a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>ApiResponse of PinnerIpfsPinStatusResponse</returns>
        public ApiResponse< PinnerIpfsPinStatusResponse > PinningPinsPinidPostWithHttpInfo (PinnerIpfsPin body, string pinid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PinningApi->PinningPinsPinidPost");
            // verify the required parameter 'pinid' is set
            if (pinid == null)
                throw new ApiException(400, "Missing required parameter 'pinid' when calling PinningApi->PinningPinsPinidPost");

            var localVarPath = "/pinning/pins/{pinid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pinid != null) localVarPathParams.Add("pinid", this.Configuration.ApiClient.ParameterToString(pinid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPinidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsPinStatusResponse)));
        }

        /// <summary>
        /// Replace a pinned object This endpoint replaces a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>Task of PinnerIpfsPinStatusResponse</returns>
        public async System.Threading.Tasks.Task<PinnerIpfsPinStatusResponse> PinningPinsPinidPostAsync (PinnerIpfsPin body, string pinid)
        {
             ApiResponse<PinnerIpfsPinStatusResponse> localVarResponse = await PinningPinsPinidPostAsyncWithHttpInfo(body, pinid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace a pinned object This endpoint replaces a pinned object.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">New pin</param>
        /// <param name="pinid">Pin ID to be replaced</param>
        /// <returns>Task of ApiResponse (PinnerIpfsPinStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinnerIpfsPinStatusResponse>> PinningPinsPinidPostAsyncWithHttpInfo (PinnerIpfsPin body, string pinid)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PinningApi->PinningPinsPinidPost");
            // verify the required parameter 'pinid' is set
            if (pinid == null)
                throw new ApiException(400, "Missing required parameter 'pinid' when calling PinningApi->PinningPinsPinidPost");

            var localVarPath = "/pinning/pins/{pinid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pinid != null) localVarPathParams.Add("pinid", this.Configuration.ApiClient.ParameterToString(pinid)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPinidPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsPinStatusResponse)));
        }

        /// <summary>
        /// Add and pin object This endpoint adds a pin to the IPFS daemon.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>PinnerIpfsPinStatusResponse</returns>
        public PinnerIpfsPinStatusResponse PinningPinsPost (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null)
        {
             ApiResponse<PinnerIpfsPinStatusResponse> localVarResponse = PinningPinsPostWithHttpInfo(body, ignoreDupes, overwrite);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add and pin object This endpoint adds a pin to the IPFS daemon.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>ApiResponse of PinnerIpfsPinStatusResponse</returns>
        public ApiResponse< PinnerIpfsPinStatusResponse > PinningPinsPostWithHttpInfo (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PinningApi->PinningPinsPost");

            var localVarPath = "/pinning/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ignoreDupes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignore-dupes", ignoreDupes)); // query parameter
            if (overwrite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overwrite", overwrite)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsPinStatusResponse)));
        }

        /// <summary>
        /// Add and pin object This endpoint adds a pin to the IPFS daemon.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>Task of PinnerIpfsPinStatusResponse</returns>
        public async System.Threading.Tasks.Task<PinnerIpfsPinStatusResponse> PinningPinsPostAsync (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null)
        {
             ApiResponse<PinnerIpfsPinStatusResponse> localVarResponse = await PinningPinsPostAsyncWithHttpInfo(body, ignoreDupes, overwrite);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add and pin object This endpoint adds a pin to the IPFS daemon.
        /// </summary>
        /// <exception cref="estuary-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">Pin Body {cid:cid, name:name}</param>
        /// <param name="ignoreDupes">Ignore Dupes (optional)</param>
        /// <param name="overwrite">Overwrite conflicting files in collections (optional)</param>
        /// <returns>Task of ApiResponse (PinnerIpfsPinStatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PinnerIpfsPinStatusResponse>> PinningPinsPostAsyncWithHttpInfo (PinnerIpfsPin body, string ignoreDupes = null, string overwrite = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PinningApi->PinningPinsPost");

            var localVarPath = "/pinning/pins";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (ignoreDupes != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "ignore-dupes", ignoreDupes)); // query parameter
            if (overwrite != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "overwrite", overwrite)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }
            // authentication (bearerAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PinningPinsPost", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PinnerIpfsPinStatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PinnerIpfsPinStatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PinnerIpfsPinStatusResponse)));
        }

    }
}
