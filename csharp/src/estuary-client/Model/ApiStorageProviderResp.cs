/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// ApiStorageProviderResp
    /// </summary>
    [DataContract]
        public partial class ApiStorageProviderResp :  IEquatable<ApiStorageProviderResp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiStorageProviderResp" /> class.
        /// </summary>
        /// <param name="addr">addr.</param>
        /// <param name="name">name.</param>
        /// <param name="suspended">suspended.</param>
        /// <param name="suspendedReason">suspendedReason.</param>
        /// <param name="version">version.</param>
        public ApiStorageProviderResp(AddressAddress addr = default(AddressAddress), string name = default(string), bool? suspended = default(bool?), string suspendedReason = default(string), string version = default(string))
        {
            this.Addr = addr;
            this.Name = name;
            this.Suspended = suspended;
            this.SuspendedReason = suspendedReason;
            this.Version = version;
        }
        
        /// <summary>
        /// Gets or Sets Addr
        /// </summary>
        [DataMember(Name="addr", EmitDefaultValue=false)]
        public AddressAddress Addr { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Suspended
        /// </summary>
        [DataMember(Name="suspended", EmitDefaultValue=false)]
        public bool? Suspended { get; set; }

        /// <summary>
        /// Gets or Sets SuspendedReason
        /// </summary>
        [DataMember(Name="suspendedReason", EmitDefaultValue=false)]
        public string SuspendedReason { get; set; }

        /// <summary>
        /// Gets or Sets Version
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiStorageProviderResp {\n");
            sb.Append("  Addr: ").Append(Addr).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Suspended: ").Append(Suspended).Append("\n");
            sb.Append("  SuspendedReason: ").Append(SuspendedReason).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiStorageProviderResp);
        }

        /// <summary>
        /// Returns true if ApiStorageProviderResp instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiStorageProviderResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiStorageProviderResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addr == input.Addr ||
                    (this.Addr != null &&
                    this.Addr.Equals(input.Addr))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Suspended == input.Suspended ||
                    (this.Suspended != null &&
                    this.Suspended.Equals(input.Suspended))
                ) && 
                (
                    this.SuspendedReason == input.SuspendedReason ||
                    (this.SuspendedReason != null &&
                    this.SuspendedReason.Equals(input.SuspendedReason))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addr != null)
                    hashCode = hashCode * 59 + this.Addr.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Suspended != null)
                    hashCode = hashCode * 59 + this.Suspended.GetHashCode();
                if (this.SuspendedReason != null)
                    hashCode = hashCode * 59 + this.SuspendedReason.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
