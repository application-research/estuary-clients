/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// MinerMinerChainInfo
    /// </summary>
    [DataContract]
        public partial class MinerMinerChainInfo :  IEquatable<MinerMinerChainInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MinerMinerChainInfo" /> class.
        /// </summary>
        /// <param name="addresses">addresses.</param>
        /// <param name="owner">owner.</param>
        /// <param name="peerId">peerId.</param>
        /// <param name="worker">worker.</param>
        public MinerMinerChainInfo(List<string> addresses = default(List<string>), string owner = default(string), string peerId = default(string), string worker = default(string))
        {
            this.Addresses = addresses;
            this.Owner = owner;
            this.PeerId = peerId;
            this.Worker = worker;
        }
        
        /// <summary>
        /// Gets or Sets Addresses
        /// </summary>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<string> Addresses { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// Gets or Sets PeerId
        /// </summary>
        [DataMember(Name="peerId", EmitDefaultValue=false)]
        public string PeerId { get; set; }

        /// <summary>
        /// Gets or Sets Worker
        /// </summary>
        [DataMember(Name="worker", EmitDefaultValue=false)]
        public string Worker { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MinerMinerChainInfo {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  PeerId: ").Append(PeerId).Append("\n");
            sb.Append("  Worker: ").Append(Worker).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MinerMinerChainInfo);
        }

        /// <summary>
        /// Returns true if MinerMinerChainInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of MinerMinerChainInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MinerMinerChainInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Addresses == input.Addresses ||
                    this.Addresses != null &&
                    input.Addresses != null &&
                    this.Addresses.SequenceEqual(input.Addresses)
                ) && 
                (
                    this.Owner == input.Owner ||
                    (this.Owner != null &&
                    this.Owner.Equals(input.Owner))
                ) && 
                (
                    this.PeerId == input.PeerId ||
                    (this.PeerId != null &&
                    this.PeerId.Equals(input.PeerId))
                ) && 
                (
                    this.Worker == input.Worker ||
                    (this.Worker != null &&
                    this.Worker.Equals(input.Worker))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Addresses != null)
                    hashCode = hashCode * 59 + this.Addresses.GetHashCode();
                if (this.Owner != null)
                    hashCode = hashCode * 59 + this.Owner.GetHashCode();
                if (this.PeerId != null)
                    hashCode = hashCode * 59 + this.PeerId.GetHashCode();
                if (this.Worker != null)
                    hashCode = hashCode * 59 + this.Worker.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
