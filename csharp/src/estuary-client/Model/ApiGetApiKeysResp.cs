/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// ApiGetApiKeysResp
    /// </summary>
    [DataContract]
        public partial class ApiGetApiKeysResp :  IEquatable<ApiGetApiKeysResp>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiGetApiKeysResp" /> class.
        /// </summary>
        /// <param name="expiry">expiry.</param>
        /// <param name="isSession">isSession.</param>
        /// <param name="label">label.</param>
        /// <param name="token">token.</param>
        /// <param name="tokenHash">tokenHash.</param>
        public ApiGetApiKeysResp(string expiry = default(string), bool? isSession = default(bool?), string label = default(string), string token = default(string), string tokenHash = default(string))
        {
            this.Expiry = expiry;
            this.IsSession = isSession;
            this.Label = label;
            this.Token = token;
            this.TokenHash = tokenHash;
        }
        
        /// <summary>
        /// Gets or Sets Expiry
        /// </summary>
        [DataMember(Name="expiry", EmitDefaultValue=false)]
        public string Expiry { get; set; }

        /// <summary>
        /// Gets or Sets IsSession
        /// </summary>
        [DataMember(Name="isSession", EmitDefaultValue=false)]
        public bool? IsSession { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets TokenHash
        /// </summary>
        [DataMember(Name="tokenHash", EmitDefaultValue=false)]
        public string TokenHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiGetApiKeysResp {\n");
            sb.Append("  Expiry: ").Append(Expiry).Append("\n");
            sb.Append("  IsSession: ").Append(IsSession).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  TokenHash: ").Append(TokenHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiGetApiKeysResp);
        }

        /// <summary>
        /// Returns true if ApiGetApiKeysResp instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiGetApiKeysResp to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiGetApiKeysResp input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Expiry == input.Expiry ||
                    (this.Expiry != null &&
                    this.Expiry.Equals(input.Expiry))
                ) && 
                (
                    this.IsSession == input.IsSession ||
                    (this.IsSession != null &&
                    this.IsSession.Equals(input.IsSession))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.TokenHash == input.TokenHash ||
                    (this.TokenHash != null &&
                    this.TokenHash.Equals(input.TokenHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Expiry != null)
                    hashCode = hashCode * 59 + this.Expiry.GetHashCode();
                if (this.IsSession != null)
                    hashCode = hashCode * 59 + this.IsSession.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.TokenHash != null)
                    hashCode = hashCode * 59 + this.TokenHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
