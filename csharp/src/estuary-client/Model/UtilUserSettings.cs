/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// UtilUserSettings
    /// </summary>
    [DataContract]
        public partial class UtilUserSettings :  IEquatable<UtilUserSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilUserSettings" /> class.
        /// </summary>
        /// <param name="contentAddingDisabled">contentAddingDisabled.</param>
        /// <param name="dealDuration">dealDuration.</param>
        /// <param name="dealMakingDisabled">dealMakingDisabled.</param>
        /// <param name="fileStagingThreshold">fileStagingThreshold.</param>
        /// <param name="flags">flags.</param>
        /// <param name="replication">replication.</param>
        /// <param name="uploadEndpoints">uploadEndpoints.</param>
        /// <param name="verified">verified.</param>
        public UtilUserSettings(bool? contentAddingDisabled = default(bool?), int? dealDuration = default(int?), bool? dealMakingDisabled = default(bool?), int? fileStagingThreshold = default(int?), int? flags = default(int?), int? replication = default(int?), List<string> uploadEndpoints = default(List<string>), bool? verified = default(bool?))
        {
            this.ContentAddingDisabled = contentAddingDisabled;
            this.DealDuration = dealDuration;
            this.DealMakingDisabled = dealMakingDisabled;
            this.FileStagingThreshold = fileStagingThreshold;
            this.Flags = flags;
            this.Replication = replication;
            this.UploadEndpoints = uploadEndpoints;
            this.Verified = verified;
        }
        
        /// <summary>
        /// Gets or Sets ContentAddingDisabled
        /// </summary>
        [DataMember(Name="contentAddingDisabled", EmitDefaultValue=false)]
        public bool? ContentAddingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets DealDuration
        /// </summary>
        [DataMember(Name="dealDuration", EmitDefaultValue=false)]
        public int? DealDuration { get; set; }

        /// <summary>
        /// Gets or Sets DealMakingDisabled
        /// </summary>
        [DataMember(Name="dealMakingDisabled", EmitDefaultValue=false)]
        public bool? DealMakingDisabled { get; set; }

        /// <summary>
        /// Gets or Sets FileStagingThreshold
        /// </summary>
        [DataMember(Name="fileStagingThreshold", EmitDefaultValue=false)]
        public int? FileStagingThreshold { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public int? Flags { get; set; }

        /// <summary>
        /// Gets or Sets Replication
        /// </summary>
        [DataMember(Name="replication", EmitDefaultValue=false)]
        public int? Replication { get; set; }

        /// <summary>
        /// Gets or Sets UploadEndpoints
        /// </summary>
        [DataMember(Name="uploadEndpoints", EmitDefaultValue=false)]
        public List<string> UploadEndpoints { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilUserSettings {\n");
            sb.Append("  ContentAddingDisabled: ").Append(ContentAddingDisabled).Append("\n");
            sb.Append("  DealDuration: ").Append(DealDuration).Append("\n");
            sb.Append("  DealMakingDisabled: ").Append(DealMakingDisabled).Append("\n");
            sb.Append("  FileStagingThreshold: ").Append(FileStagingThreshold).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Replication: ").Append(Replication).Append("\n");
            sb.Append("  UploadEndpoints: ").Append(UploadEndpoints).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UtilUserSettings);
        }

        /// <summary>
        /// Returns true if UtilUserSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of UtilUserSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilUserSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ContentAddingDisabled == input.ContentAddingDisabled ||
                    (this.ContentAddingDisabled != null &&
                    this.ContentAddingDisabled.Equals(input.ContentAddingDisabled))
                ) && 
                (
                    this.DealDuration == input.DealDuration ||
                    (this.DealDuration != null &&
                    this.DealDuration.Equals(input.DealDuration))
                ) && 
                (
                    this.DealMakingDisabled == input.DealMakingDisabled ||
                    (this.DealMakingDisabled != null &&
                    this.DealMakingDisabled.Equals(input.DealMakingDisabled))
                ) && 
                (
                    this.FileStagingThreshold == input.FileStagingThreshold ||
                    (this.FileStagingThreshold != null &&
                    this.FileStagingThreshold.Equals(input.FileStagingThreshold))
                ) && 
                (
                    this.Flags == input.Flags ||
                    (this.Flags != null &&
                    this.Flags.Equals(input.Flags))
                ) && 
                (
                    this.Replication == input.Replication ||
                    (this.Replication != null &&
                    this.Replication.Equals(input.Replication))
                ) && 
                (
                    this.UploadEndpoints == input.UploadEndpoints ||
                    this.UploadEndpoints != null &&
                    input.UploadEndpoints != null &&
                    this.UploadEndpoints.SequenceEqual(input.UploadEndpoints)
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ContentAddingDisabled != null)
                    hashCode = hashCode * 59 + this.ContentAddingDisabled.GetHashCode();
                if (this.DealDuration != null)
                    hashCode = hashCode * 59 + this.DealDuration.GetHashCode();
                if (this.DealMakingDisabled != null)
                    hashCode = hashCode * 59 + this.DealMakingDisabled.GetHashCode();
                if (this.FileStagingThreshold != null)
                    hashCode = hashCode * 59 + this.FileStagingThreshold.GetHashCode();
                if (this.Flags != null)
                    hashCode = hashCode * 59 + this.Flags.GetHashCode();
                if (this.Replication != null)
                    hashCode = hashCode * 59 + this.Replication.GetHashCode();
                if (this.UploadEndpoints != null)
                    hashCode = hashCode * 59 + this.UploadEndpoints.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
