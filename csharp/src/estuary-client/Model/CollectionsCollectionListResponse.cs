/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// CollectionsCollectionListResponse
    /// </summary>
    [DataContract]
        public partial class CollectionsCollectionListResponse :  IEquatable<CollectionsCollectionListResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CollectionsCollectionListResponse" /> class.
        /// </summary>
        /// <param name="cid">cid.</param>
        /// <param name="coluuid">coluuid.</param>
        /// <param name="contId">contId.</param>
        /// <param name="dir">dir.</param>
        /// <param name="name">name.</param>
        /// <param name="size">size.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public CollectionsCollectionListResponse(UtilDbCID cid = default(UtilDbCID), string coluuid = default(string), int? contId = default(int?), string dir = default(string), string name = default(string), int? size = default(int?), CollectionsCidType type = default(CollectionsCidType), string updatedAt = default(string))
        {
            this.Cid = cid;
            this.Coluuid = coluuid;
            this.ContId = contId;
            this.Dir = dir;
            this.Name = name;
            this.Size = size;
            this.Type = type;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public UtilDbCID Cid { get; set; }

        /// <summary>
        /// Gets or Sets Coluuid
        /// </summary>
        [DataMember(Name="coluuid", EmitDefaultValue=false)]
        public string Coluuid { get; set; }

        /// <summary>
        /// Gets or Sets ContId
        /// </summary>
        [DataMember(Name="contId", EmitDefaultValue=false)]
        public int? ContId { get; set; }

        /// <summary>
        /// Gets or Sets Dir
        /// </summary>
        [DataMember(Name="dir", EmitDefaultValue=false)]
        public string Dir { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public CollectionsCidType Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CollectionsCollectionListResponse {\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  Coluuid: ").Append(Coluuid).Append("\n");
            sb.Append("  ContId: ").Append(ContId).Append("\n");
            sb.Append("  Dir: ").Append(Dir).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CollectionsCollectionListResponse);
        }

        /// <summary>
        /// Returns true if CollectionsCollectionListResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CollectionsCollectionListResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CollectionsCollectionListResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.Coluuid == input.Coluuid ||
                    (this.Coluuid != null &&
                    this.Coluuid.Equals(input.Coluuid))
                ) && 
                (
                    this.ContId == input.ContId ||
                    (this.ContId != null &&
                    this.ContId.Equals(input.ContId))
                ) && 
                (
                    this.Dir == input.Dir ||
                    (this.Dir != null &&
                    this.Dir.Equals(input.Dir))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.Coluuid != null)
                    hashCode = hashCode * 59 + this.Coluuid.GetHashCode();
                if (this.ContId != null)
                    hashCode = hashCode * 59 + this.ContId.GetHashCode();
                if (this.Dir != null)
                    hashCode = hashCode * 59 + this.Dir.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
