/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// UtilViewerResponse
    /// </summary>
    [DataContract]
        public partial class UtilViewerResponse :  IEquatable<UtilViewerResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilViewerResponse" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="authExpiry">authExpiry.</param>
        /// <param name="id">id.</param>
        /// <param name="miners">miners.</param>
        /// <param name="perms">perms.</param>
        /// <param name="settings">settings.</param>
        /// <param name="username">username.</param>
        public UtilViewerResponse(string address = default(string), string authExpiry = default(string), int? id = default(int?), List<string> miners = default(List<string>), int? perms = default(int?), UtilUserSettings settings = default(UtilUserSettings), string username = default(string))
        {
            this.Address = address;
            this.AuthExpiry = authExpiry;
            this.Id = id;
            this.Miners = miners;
            this.Perms = perms;
            this.Settings = settings;
            this.Username = username;
        }
        
        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets AuthExpiry
        /// </summary>
        [DataMember(Name="auth_expiry", EmitDefaultValue=false)]
        public string AuthExpiry { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Miners
        /// </summary>
        [DataMember(Name="miners", EmitDefaultValue=false)]
        public List<string> Miners { get; set; }

        /// <summary>
        /// Gets or Sets Perms
        /// </summary>
        [DataMember(Name="perms", EmitDefaultValue=false)]
        public int? Perms { get; set; }

        /// <summary>
        /// Gets or Sets Settings
        /// </summary>
        [DataMember(Name="settings", EmitDefaultValue=false)]
        public UtilUserSettings Settings { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilViewerResponse {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  AuthExpiry: ").Append(AuthExpiry).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Miners: ").Append(Miners).Append("\n");
            sb.Append("  Perms: ").Append(Perms).Append("\n");
            sb.Append("  Settings: ").Append(Settings).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UtilViewerResponse);
        }

        /// <summary>
        /// Returns true if UtilViewerResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of UtilViewerResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilViewerResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.AuthExpiry == input.AuthExpiry ||
                    (this.AuthExpiry != null &&
                    this.AuthExpiry.Equals(input.AuthExpiry))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Miners == input.Miners ||
                    this.Miners != null &&
                    input.Miners != null &&
                    this.Miners.SequenceEqual(input.Miners)
                ) && 
                (
                    this.Perms == input.Perms ||
                    (this.Perms != null &&
                    this.Perms.Equals(input.Perms))
                ) && 
                (
                    this.Settings == input.Settings ||
                    (this.Settings != null &&
                    this.Settings.Equals(input.Settings))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.AuthExpiry != null)
                    hashCode = hashCode * 59 + this.AuthExpiry.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Miners != null)
                    hashCode = hashCode * 59 + this.Miners.GetHashCode();
                if (this.Perms != null)
                    hashCode = hashCode * 59 + this.Perms.GetHashCode();
                if (this.Settings != null)
                    hashCode = hashCode * 59 + this.Settings.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
