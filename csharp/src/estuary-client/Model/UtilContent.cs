/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = estuary-client.Client.SwaggerDateConverter;

namespace estuary-client.Model
{
    /// <summary>
    /// UtilContent
    /// </summary>
    [DataContract]
        public partial class UtilContent :  IEquatable<UtilContent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UtilContent" /> class.
        /// </summary>
        /// <param name="active">active.</param>
        /// <param name="aggregate">aggregate.</param>
        /// <param name="aggregatedIn">TODO: shift most of the &#x27;state&#x27; booleans in here into a single state field, should make reasoning about things much simpler.</param>
        /// <param name="cid">cid.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="dagSplit">If set, this content is part of a split dag. In such a case, the &#x27;root&#x27; content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates).</param>
        /// <param name="dealStatus">dealStatus.</param>
        /// <param name="description">description.</param>
        /// <param name="failed">failed.</param>
        /// <param name="id">id.</param>
        /// <param name="location">location.</param>
        /// <param name="name">name.</param>
        /// <param name="offloaded">offloaded.</param>
        /// <param name="origins">origins.</param>
        /// <param name="pinMeta">pinMeta.</param>
        /// <param name="pinning">pinning.</param>
        /// <param name="pinningStatus">pinningStatus.</param>
        /// <param name="replace">replace.</param>
        /// <param name="replication">replication.</param>
        /// <param name="size">size.</param>
        /// <param name="splitFrom">splitFrom.</param>
        /// <param name="type">type.</param>
        /// <param name="updatedAt">updatedAt.</param>
        /// <param name="userId">userId.</param>
        public UtilContent(bool? active = default(bool?), bool? aggregate = default(bool?), int? aggregatedIn = default(int?), UtilDbCID cid = default(UtilDbCID), string createdAt = default(string), bool? dagSplit = default(bool?), string dealStatus = default(string), string description = default(string), bool? failed = default(bool?), int? id = default(int?), string location = default(string), string name = default(string), bool? offloaded = default(bool?), string origins = default(string), string pinMeta = default(string), bool? pinning = default(bool?), string pinningStatus = default(string), bool? replace = default(bool?), int? replication = default(int?), int? size = default(int?), int? splitFrom = default(int?), UtilContentType type = default(UtilContentType), string updatedAt = default(string), int? userId = default(int?))
        {
            this.Active = active;
            this.Aggregate = aggregate;
            this.AggregatedIn = aggregatedIn;
            this.Cid = cid;
            this.CreatedAt = createdAt;
            this.DagSplit = dagSplit;
            this.DealStatus = dealStatus;
            this.Description = description;
            this.Failed = failed;
            this.Id = id;
            this.Location = location;
            this.Name = name;
            this.Offloaded = offloaded;
            this.Origins = origins;
            this.PinMeta = pinMeta;
            this.Pinning = pinning;
            this.PinningStatus = pinningStatus;
            this.Replace = replace;
            this.Replication = replication;
            this.Size = size;
            this.SplitFrom = splitFrom;
            this.Type = type;
            this.UpdatedAt = updatedAt;
            this.UserId = userId;
        }
        
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public bool? Active { get; set; }

        /// <summary>
        /// Gets or Sets Aggregate
        /// </summary>
        [DataMember(Name="aggregate", EmitDefaultValue=false)]
        public bool? Aggregate { get; set; }

        /// <summary>
        /// TODO: shift most of the &#x27;state&#x27; booleans in here into a single state field, should make reasoning about things much simpler
        /// </summary>
        /// <value>TODO: shift most of the &#x27;state&#x27; booleans in here into a single state field, should make reasoning about things much simpler</value>
        [DataMember(Name="aggregatedIn", EmitDefaultValue=false)]
        public int? AggregatedIn { get; set; }

        /// <summary>
        /// Gets or Sets Cid
        /// </summary>
        [DataMember(Name="cid", EmitDefaultValue=false)]
        public UtilDbCID Cid { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// If set, this content is part of a split dag. In such a case, the &#x27;root&#x27; content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates)
        /// </summary>
        /// <value>If set, this content is part of a split dag. In such a case, the &#x27;root&#x27; content should be advertised on the dht, but not have deals made for it, and the children should have deals made for them (unlike with aggregates)</value>
        [DataMember(Name="dagSplit", EmitDefaultValue=false)]
        public bool? DagSplit { get; set; }

        /// <summary>
        /// Gets or Sets DealStatus
        /// </summary>
        [DataMember(Name="dealStatus", EmitDefaultValue=false)]
        public string DealStatus { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Failed
        /// </summary>
        [DataMember(Name="failed", EmitDefaultValue=false)]
        public bool? Failed { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public string Location { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Offloaded
        /// </summary>
        [DataMember(Name="offloaded", EmitDefaultValue=false)]
        public bool? Offloaded { get; set; }

        /// <summary>
        /// Gets or Sets Origins
        /// </summary>
        [DataMember(Name="origins", EmitDefaultValue=false)]
        public string Origins { get; set; }

        /// <summary>
        /// Gets or Sets PinMeta
        /// </summary>
        [DataMember(Name="pinMeta", EmitDefaultValue=false)]
        public string PinMeta { get; set; }

        /// <summary>
        /// Gets or Sets Pinning
        /// </summary>
        [DataMember(Name="pinning", EmitDefaultValue=false)]
        public bool? Pinning { get; set; }

        /// <summary>
        /// Gets or Sets PinningStatus
        /// </summary>
        [DataMember(Name="pinningStatus", EmitDefaultValue=false)]
        public string PinningStatus { get; set; }

        /// <summary>
        /// Gets or Sets Replace
        /// </summary>
        [DataMember(Name="replace", EmitDefaultValue=false)]
        public bool? Replace { get; set; }

        /// <summary>
        /// Gets or Sets Replication
        /// </summary>
        [DataMember(Name="replication", EmitDefaultValue=false)]
        public int? Replication { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets SplitFrom
        /// </summary>
        [DataMember(Name="splitFrom", EmitDefaultValue=false)]
        public int? SplitFrom { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public UtilContentType Type { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public string UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="userId", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UtilContent {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Aggregate: ").Append(Aggregate).Append("\n");
            sb.Append("  AggregatedIn: ").Append(AggregatedIn).Append("\n");
            sb.Append("  Cid: ").Append(Cid).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  DagSplit: ").Append(DagSplit).Append("\n");
            sb.Append("  DealStatus: ").Append(DealStatus).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Offloaded: ").Append(Offloaded).Append("\n");
            sb.Append("  Origins: ").Append(Origins).Append("\n");
            sb.Append("  PinMeta: ").Append(PinMeta).Append("\n");
            sb.Append("  Pinning: ").Append(Pinning).Append("\n");
            sb.Append("  PinningStatus: ").Append(PinningStatus).Append("\n");
            sb.Append("  Replace: ").Append(Replace).Append("\n");
            sb.Append("  Replication: ").Append(Replication).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SplitFrom: ").Append(SplitFrom).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UtilContent);
        }

        /// <summary>
        /// Returns true if UtilContent instances are equal
        /// </summary>
        /// <param name="input">Instance of UtilContent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UtilContent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Active == input.Active ||
                    (this.Active != null &&
                    this.Active.Equals(input.Active))
                ) && 
                (
                    this.Aggregate == input.Aggregate ||
                    (this.Aggregate != null &&
                    this.Aggregate.Equals(input.Aggregate))
                ) && 
                (
                    this.AggregatedIn == input.AggregatedIn ||
                    (this.AggregatedIn != null &&
                    this.AggregatedIn.Equals(input.AggregatedIn))
                ) && 
                (
                    this.Cid == input.Cid ||
                    (this.Cid != null &&
                    this.Cid.Equals(input.Cid))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.DagSplit == input.DagSplit ||
                    (this.DagSplit != null &&
                    this.DagSplit.Equals(input.DagSplit))
                ) && 
                (
                    this.DealStatus == input.DealStatus ||
                    (this.DealStatus != null &&
                    this.DealStatus.Equals(input.DealStatus))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Failed == input.Failed ||
                    (this.Failed != null &&
                    this.Failed.Equals(input.Failed))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Offloaded == input.Offloaded ||
                    (this.Offloaded != null &&
                    this.Offloaded.Equals(input.Offloaded))
                ) && 
                (
                    this.Origins == input.Origins ||
                    (this.Origins != null &&
                    this.Origins.Equals(input.Origins))
                ) && 
                (
                    this.PinMeta == input.PinMeta ||
                    (this.PinMeta != null &&
                    this.PinMeta.Equals(input.PinMeta))
                ) && 
                (
                    this.Pinning == input.Pinning ||
                    (this.Pinning != null &&
                    this.Pinning.Equals(input.Pinning))
                ) && 
                (
                    this.PinningStatus == input.PinningStatus ||
                    (this.PinningStatus != null &&
                    this.PinningStatus.Equals(input.PinningStatus))
                ) && 
                (
                    this.Replace == input.Replace ||
                    (this.Replace != null &&
                    this.Replace.Equals(input.Replace))
                ) && 
                (
                    this.Replication == input.Replication ||
                    (this.Replication != null &&
                    this.Replication.Equals(input.Replication))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.SplitFrom == input.SplitFrom ||
                    (this.SplitFrom != null &&
                    this.SplitFrom.Equals(input.SplitFrom))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Active != null)
                    hashCode = hashCode * 59 + this.Active.GetHashCode();
                if (this.Aggregate != null)
                    hashCode = hashCode * 59 + this.Aggregate.GetHashCode();
                if (this.AggregatedIn != null)
                    hashCode = hashCode * 59 + this.AggregatedIn.GetHashCode();
                if (this.Cid != null)
                    hashCode = hashCode * 59 + this.Cid.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.DagSplit != null)
                    hashCode = hashCode * 59 + this.DagSplit.GetHashCode();
                if (this.DealStatus != null)
                    hashCode = hashCode * 59 + this.DealStatus.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Failed != null)
                    hashCode = hashCode * 59 + this.Failed.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Location != null)
                    hashCode = hashCode * 59 + this.Location.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Offloaded != null)
                    hashCode = hashCode * 59 + this.Offloaded.GetHashCode();
                if (this.Origins != null)
                    hashCode = hashCode * 59 + this.Origins.GetHashCode();
                if (this.PinMeta != null)
                    hashCode = hashCode * 59 + this.PinMeta.GetHashCode();
                if (this.Pinning != null)
                    hashCode = hashCode * 59 + this.Pinning.GetHashCode();
                if (this.PinningStatus != null)
                    hashCode = hashCode * 59 + this.PinningStatus.GetHashCode();
                if (this.Replace != null)
                    hashCode = hashCode * 59 + this.Replace.GetHashCode();
                if (this.Replication != null)
                    hashCode = hashCode * 59 + this.Replication.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.SplitFrom != null)
                    hashCode = hashCode * 59 + this.SplitFrom.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
