/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// MainEstimateDealBody
    /// </summary>
    [DataContract]
    public partial class MainEstimateDealBody :  IEquatable<MainEstimateDealBody>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MainEstimateDealBody" /> class.
        /// </summary>
        /// <param name="durationBlks">durationBlks.</param>
        /// <param name="replication">replication.</param>
        /// <param name="size">size.</param>
        /// <param name="verified">verified.</param>
        public MainEstimateDealBody(int? durationBlks = default(int?), int? replication = default(int?), int? size = default(int?), bool? verified = default(bool?))
        {
            this.DurationBlks = durationBlks;
            this.Replication = replication;
            this.Size = size;
            this.Verified = verified;
        }
        
        /// <summary>
        /// Gets or Sets DurationBlks
        /// </summary>
        [DataMember(Name="durationBlks", EmitDefaultValue=false)]
        public int? DurationBlks { get; set; }

        /// <summary>
        /// Gets or Sets Replication
        /// </summary>
        [DataMember(Name="replication", EmitDefaultValue=false)]
        public int? Replication { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public int? Size { get; set; }

        /// <summary>
        /// Gets or Sets Verified
        /// </summary>
        [DataMember(Name="verified", EmitDefaultValue=false)]
        public bool? Verified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MainEstimateDealBody {\n");
            sb.Append("  DurationBlks: ").Append(DurationBlks).Append("\n");
            sb.Append("  Replication: ").Append(Replication).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Verified: ").Append(Verified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MainEstimateDealBody);
        }

        /// <summary>
        /// Returns true if MainEstimateDealBody instances are equal
        /// </summary>
        /// <param name="input">Instance of MainEstimateDealBody to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MainEstimateDealBody input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DurationBlks == input.DurationBlks ||
                    (this.DurationBlks != null &&
                    this.DurationBlks.Equals(input.DurationBlks))
                ) && 
                (
                    this.Replication == input.Replication ||
                    (this.Replication != null &&
                    this.Replication.Equals(input.Replication))
                ) && 
                (
                    this.Size == input.Size ||
                    (this.Size != null &&
                    this.Size.Equals(input.Size))
                ) && 
                (
                    this.Verified == input.Verified ||
                    (this.Verified != null &&
                    this.Verified.Equals(input.Verified))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DurationBlks != null)
                    hashCode = hashCode * 59 + this.DurationBlks.GetHashCode();
                if (this.Replication != null)
                    hashCode = hashCode * 59 + this.Replication.GetHashCode();
                if (this.Size != null)
                    hashCode = hashCode * 59 + this.Size.GetHashCode();
                if (this.Verified != null)
                    hashCode = hashCode * 59 + this.Verified.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
