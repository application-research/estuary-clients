/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ApiStorageProviderResp;
import io.swagger.client.model.GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse;
import io.swagger.client.model.GithubComApplicationResearchEstuaryApiV2ClaimResponse;
import io.swagger.client.model.MinerClaimMinerBody;
import io.swagger.client.model.MinerMinerSetInfoParams;
import io.swagger.client.model.MinerSuspendMinerBody;
import io.swagger.client.model.UtilHttpError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpApi {
    private ApiClient apiClient;

    public SpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for storageProvidersClaimPost
     * @param body Claim Storage Provider Body (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersClaimPostCall(MinerClaimMinerBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/storage-providers/claim";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersClaimPostValidateBeforeCall(MinerClaimMinerBody body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling storageProvidersClaimPost(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersClaimPostCall(body, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Claim Storage Provider
     * This endpoint lets a user claim a storage provider
     * @param body Claim Storage Provider Body (required)
     * @return GithubComApplicationResearchEstuaryApiV2ClaimResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GithubComApplicationResearchEstuaryApiV2ClaimResponse storageProvidersClaimPost(MinerClaimMinerBody body) throws ApiException {
        ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse> resp = storageProvidersClaimPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Claim Storage Provider
     * This endpoint lets a user claim a storage provider
     * @param body Claim Storage Provider Body (required)
     * @return ApiResponse&lt;GithubComApplicationResearchEstuaryApiV2ClaimResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimResponse> storageProvidersClaimPostWithHttpInfo(MinerClaimMinerBody body) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersClaimPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<GithubComApplicationResearchEstuaryApiV2ClaimResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Claim Storage Provider (asynchronously)
     * This endpoint lets a user claim a storage provider
     * @param body Claim Storage Provider Body (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersClaimPostAsync(MinerClaimMinerBody body, final ApiCallback<GithubComApplicationResearchEstuaryApiV2ClaimResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersClaimPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GithubComApplicationResearchEstuaryApiV2ClaimResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersClaimSpGet
     * @param sp Storage Provider claim message (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersClaimSpGetCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storage-providers/claim/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersClaimSpGetValidateBeforeCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersClaimSpGet(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersClaimSpGetCall(sp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get Claim Storage Provider
     * This endpoint lets a user get the message in order to claim a storage provider
     * @param sp Storage Provider claim message (required)
     * @return GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse storageProvidersClaimSpGet(String sp) throws ApiException {
        ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> resp = storageProvidersClaimSpGetWithHttpInfo(sp);
        return resp.getData();
    }

    /**
     * Get Claim Storage Provider
     * This endpoint lets a user get the message in order to claim a storage provider
     * @param sp Storage Provider claim message (required)
     * @return ApiResponse&lt;GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> storageProvidersClaimSpGetWithHttpInfo(String sp) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersClaimSpGetValidateBeforeCall(sp, null, null);
        Type localVarReturnType = new TypeToken<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Claim Storage Provider (asynchronously)
     * This endpoint lets a user get the message in order to claim a storage provider
     * @param sp Storage Provider claim message (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersClaimSpGetAsync(String sp, final ApiCallback<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersClaimSpGetValidateBeforeCall(sp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersDealsSpGet
     * @param sp Filter by storage provider (required)
     * @param ignoreFailed Ignore Failed (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersDealsSpGetCall(String sp, String ignoreFailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storage-providers/deals/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (ignoreFailed != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("ignore-failed", ignoreFailed));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersDealsSpGetValidateBeforeCall(String sp, String ignoreFailed, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersDealsSpGet(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersDealsSpGetCall(sp, ignoreFailed, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage providers deals
     * This endpoint returns all storage providers deals
     * @param sp Filter by storage provider (required)
     * @param ignoreFailed Ignore Failed (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String storageProvidersDealsSpGet(String sp, String ignoreFailed) throws ApiException {
        ApiResponse<String> resp = storageProvidersDealsSpGetWithHttpInfo(sp, ignoreFailed);
        return resp.getData();
    }

    /**
     * Get all storage providers deals
     * This endpoint returns all storage providers deals
     * @param sp Filter by storage provider (required)
     * @param ignoreFailed Ignore Failed (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> storageProvidersDealsSpGetWithHttpInfo(String sp, String ignoreFailed) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersDealsSpGetValidateBeforeCall(sp, ignoreFailed, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage providers deals (asynchronously)
     * This endpoint returns all storage providers deals
     * @param sp Filter by storage provider (required)
     * @param ignoreFailed Ignore Failed (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersDealsSpGetAsync(String sp, String ignoreFailed, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersDealsSpGetValidateBeforeCall(sp, ignoreFailed, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersFailuresSpGet
     * @param sp Filter by storage provider (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersFailuresSpGetCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storage-providers/failures/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersFailuresSpGetValidateBeforeCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersFailuresSpGet(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersFailuresSpGetCall(sp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @param sp Filter by storage provider (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String storageProvidersFailuresSpGet(String sp) throws ApiException {
        ApiResponse<String> resp = storageProvidersFailuresSpGetWithHttpInfo(sp);
        return resp.getData();
    }

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @param sp Filter by storage provider (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> storageProvidersFailuresSpGetWithHttpInfo(String sp) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersFailuresSpGetValidateBeforeCall(sp, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage providers (asynchronously)
     * This endpoint returns all storage providers
     * @param sp Filter by storage provider (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersFailuresSpGetAsync(String sp, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersFailuresSpGetValidateBeforeCall(sp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersGet
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersGetCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storage-providers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersGetValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = storageProvidersGetCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @return List&lt;ApiStorageProviderResp&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<ApiStorageProviderResp> storageProvidersGet() throws ApiException {
        ApiResponse<List<ApiStorageProviderResp>> resp = storageProvidersGetWithHttpInfo();
        return resp.getData();
    }

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @return ApiResponse&lt;List&lt;ApiStorageProviderResp&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<ApiStorageProviderResp>> storageProvidersGetWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersGetValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<ApiStorageProviderResp>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get all storage providers (asynchronously)
     * This endpoint returns all storage providers
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersGetAsync(final ApiCallback<List<ApiStorageProviderResp>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersGetValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<ApiStorageProviderResp>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersSetInfoSpPut
     * @param body Storage Provider set info params (required)
     * @param sp Storage Provider to set info for (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersSetInfoSpPutCall(MinerMinerSetInfoParams body, String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/storage-providers/set-info/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersSetInfoSpPutValidateBeforeCall(MinerMinerSetInfoParams body, String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling storageProvidersSetInfoSpPut(Async)");
        }
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersSetInfoSpPut(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersSetInfoSpPutCall(body, sp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Set Storage Provider Info
     * This endpoint lets a user set storage provider info.
     * @param body Storage Provider set info params (required)
     * @param sp Storage Provider to set info for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void storageProvidersSetInfoSpPut(MinerMinerSetInfoParams body, String sp) throws ApiException {
        storageProvidersSetInfoSpPutWithHttpInfo(body, sp);
    }

    /**
     * Set Storage Provider Info
     * This endpoint lets a user set storage provider info.
     * @param body Storage Provider set info params (required)
     * @param sp Storage Provider to set info for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> storageProvidersSetInfoSpPutWithHttpInfo(MinerMinerSetInfoParams body, String sp) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersSetInfoSpPutValidateBeforeCall(body, sp, null, null);
        return apiClient.execute(call);
    }

    /**
     * Set Storage Provider Info (asynchronously)
     * This endpoint lets a user set storage provider info.
     * @param body Storage Provider set info params (required)
     * @param sp Storage Provider to set info for (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersSetInfoSpPutAsync(MinerMinerSetInfoParams body, String sp, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersSetInfoSpPutValidateBeforeCall(body, sp, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for storageProvidersStatsSpGet
     * @param sp Filter by storage provider (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersStatsSpGetCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storage-providers/stats/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersStatsSpGetValidateBeforeCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersStatsSpGet(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersStatsSpGetCall(sp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get storage provider stats
     * This endpoint returns storage provider stats
     * @param sp Filter by storage provider (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String storageProvidersStatsSpGet(String sp) throws ApiException {
        ApiResponse<String> resp = storageProvidersStatsSpGetWithHttpInfo(sp);
        return resp.getData();
    }

    /**
     * Get storage provider stats
     * This endpoint returns storage provider stats
     * @param sp Filter by storage provider (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> storageProvidersStatsSpGetWithHttpInfo(String sp) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersStatsSpGetValidateBeforeCall(sp, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get storage provider stats (asynchronously)
     * This endpoint returns storage provider stats
     * @param sp Filter by storage provider (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersStatsSpGetAsync(String sp, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersStatsSpGetValidateBeforeCall(sp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersSuspendSpPost
     * @param body Suspend Storage Provider Body (required)
     * @param sp Storage Provider to suspend (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersSuspendSpPostCall(MinerSuspendMinerBody body, String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;
        
        // create path and map variables
        String localVarPath = "/storage-providers/suspend/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "*/*"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersSuspendSpPostValidateBeforeCall(MinerSuspendMinerBody body, String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling storageProvidersSuspendSpPost(Async)");
        }
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersSuspendSpPost(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersSuspendSpPostCall(body, sp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Suspend Storage Provider
     * This endpoint lets a user suspend a storage provider.
     * @param body Suspend Storage Provider Body (required)
     * @param sp Storage Provider to suspend (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Map<String, String> storageProvidersSuspendSpPost(MinerSuspendMinerBody body, String sp) throws ApiException {
        ApiResponse<Map<String, String>> resp = storageProvidersSuspendSpPostWithHttpInfo(body, sp);
        return resp.getData();
    }

    /**
     * Suspend Storage Provider
     * This endpoint lets a user suspend a storage provider.
     * @param body Suspend Storage Provider Body (required)
     * @param sp Storage Provider to suspend (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Map<String, String>> storageProvidersSuspendSpPostWithHttpInfo(MinerSuspendMinerBody body, String sp) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersSuspendSpPostValidateBeforeCall(body, sp, null, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Suspend Storage Provider (asynchronously)
     * This endpoint lets a user suspend a storage provider.
     * @param body Suspend Storage Provider Body (required)
     * @param sp Storage Provider to suspend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersSuspendSpPostAsync(MinerSuspendMinerBody body, String sp, final ApiCallback<Map<String, String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersSuspendSpPostValidateBeforeCall(body, sp, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for storageProvidersUnsuspendSpPut
     * @param sp Storage Provider to unsuspend (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call storageProvidersUnsuspendSpPutCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/storage-providers/unsuspend/{sp}"
            .replaceAll("\\{" + "sp" + "\\}", apiClient.escapeString(sp.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call storageProvidersUnsuspendSpPutValidateBeforeCall(String sp, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'sp' is set
        if (sp == null) {
            throw new ApiException("Missing the required parameter 'sp' when calling storageProvidersUnsuspendSpPut(Async)");
        }
        
        com.squareup.okhttp.Call call = storageProvidersUnsuspendSpPutCall(sp, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unuspend Storage Provider
     * This endpoint lets a user unsuspend a Storage Provider.
     * @param sp Storage Provider to unsuspend (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void storageProvidersUnsuspendSpPut(String sp) throws ApiException {
        storageProvidersUnsuspendSpPutWithHttpInfo(sp);
    }

    /**
     * Unuspend Storage Provider
     * This endpoint lets a user unsuspend a Storage Provider.
     * @param sp Storage Provider to unsuspend (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> storageProvidersUnsuspendSpPutWithHttpInfo(String sp) throws ApiException {
        com.squareup.okhttp.Call call = storageProvidersUnsuspendSpPutValidateBeforeCall(sp, null, null);
        return apiClient.execute(call);
    }

    /**
     * Unuspend Storage Provider (asynchronously)
     * This endpoint lets a user unsuspend a Storage Provider.
     * @param sp Storage Provider to unsuspend (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call storageProvidersUnsuspendSpPutAsync(String sp, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = storageProvidersUnsuspendSpPutValidateBeforeCall(sp, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
