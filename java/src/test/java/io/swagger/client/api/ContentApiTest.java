/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.MainImportDealBody;
import io.swagger.client.model.TypesIpfsPin;
import io.swagger.client.model.UtilContentCreateBody;
import io.swagger.client.model.UtilHttpError;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ContentApi
 */
@Ignore
public class ContentApiTest {

    private final ContentApi api = new ContentApi();

    /**
     * Create an Estuary invite
     *
     * This endpoint is used to create an estuary invite.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void adminInvitesCodePostTest() throws Exception {
        String code = null;
        String response = api.adminInvitesCodePost(code);

        // TODO: test validations
    }
    /**
     * Get Estuary invites
     *
     * This endpoint is used to list all estuary invites.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void adminInvitesGetTest() throws Exception {
        String response = api.adminInvitesGet();

        // TODO: test validations
    }
    /**
     * Upload content via a car file
     *
     * This endpoint uploads content via a car file
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentAddCarPostTest() throws Exception {
        String response = api.contentAddCarPost();

        // TODO: test validations
    }
    /**
     * Add IPFS object
     *
     * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentAddIpfsPostTest() throws Exception {
        TypesIpfsPin body = null;
        String ignoreDupes = null;
        String response = api.contentAddIpfsPost(body, ignoreDupes);

        // TODO: test validations
    }
    /**
     * Upload a file
     *
     * This endpoint uploads a file.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentAddPostTest() throws Exception {
        String response = api.contentAddPost();

        // TODO: test validations
    }
    /**
     * Get aggregated content stats
     *
     * This endpoint returns aggregated content stats
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentAggregatedContentGetTest() throws Exception {
        String content = null;
        String response = api.contentAggregatedContentGet(content);

        // TODO: test validations
    }
    /**
     * Get all deals for a user
     *
     * This endpoint is used to get all deals for a user
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentAllDealsGetTest() throws Exception {
        String begin = null;
        String duration = null;
        String all = null;
        String response = api.contentAllDealsGet(begin, duration, all);

        // TODO: test validations
    }
    /**
     * Get content bandwidth
     *
     * This endpoint returns content bandwidth
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentBwUsageContentGetTest() throws Exception {
        String content = null;
        String response = api.contentBwUsageContentGet(content);

        // TODO: test validations
    }
    /**
     * Add a new content
     *
     * This endpoint adds a new content
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentCreatePostTest() throws Exception {
        UtilContentCreateBody body = null;
        String ignoreDupes = null;
        String response = api.contentCreatePost(body, ignoreDupes);

        // TODO: test validations
    }
    /**
     * Content with deals
     *
     * This endpoint lists all content with deals
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentDealsGetTest() throws Exception {
        Integer limit = null;
        Integer offset = null;
        String response = api.contentDealsGet(limit, offset);

        // TODO: test validations
    }
    /**
     * Ensure Replication
     *
     * This endpoint ensures that the content is replicated to the specified number of providers
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentEnsureReplicationDatacidGetTest() throws Exception {
        String datacid = null;
        String response = api.contentEnsureReplicationDatacidGet(datacid);

        // TODO: test validations
    }
    /**
     * List all failures for a content
     *
     * This endpoint returns all failures for a content
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentFailuresContentGetTest() throws Exception {
        String content = null;
        String response = api.contentFailuresContentGet(content);

        // TODO: test validations
    }
    /**
     * Content
     *
     * This endpoint returns a content by its ID
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentIdGetTest() throws Exception {
        Integer id = null;
        String response = api.contentIdGet(id);

        // TODO: test validations
    }
    /**
     * Import a deal
     *
     * This endpoint imports a deal into the shuttle.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentImportdealPostTest() throws Exception {
        MainImportDealBody body = null;
        String response = api.contentImportdealPost(body);

        // TODO: test validations
    }
    /**
     * List all pinned content
     *
     * This endpoint lists all content
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentListGetTest() throws Exception {
        String response = api.contentListGet();

        // TODO: test validations
    }
    /**
     * Read content
     *
     * This endpoint reads content from the blockstore
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentReadContGetTest() throws Exception {
        String cont = null;
        String response = api.contentReadContGet(cont);

        // TODO: test validations
    }
    /**
     * Get staging zone for user, excluding its contents
     *
     * This endpoint is used to get staging zone for user, excluding its contents.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentStagingZonesGetTest() throws Exception {
        String response = api.contentStagingZonesGet();

        // TODO: test validations
    }
    /**
     * Get contents for a staging zone
     *
     * This endpoint is used to get the contents for a staging zone
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentStagingZonesStagingZoneContentsGetTest() throws Exception {
        Integer stagingZone = null;
        String limit = null;
        String offset = null;
        String response = api.contentStagingZonesStagingZoneContentsGet(stagingZone, limit, offset);

        // TODO: test validations
    }
    /**
     * Get staging zone without its contents field populated
     *
     * This endpoint is used to get a staging zone, excluding its contents.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentStagingZonesStagingZoneGetTest() throws Exception {
        Integer stagingZone = null;
        String response = api.contentStagingZonesStagingZoneGet(stagingZone);

        // TODO: test validations
    }
    /**
     * Get content statistics
     *
     * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a content
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentStatsGetTest() throws Exception {
        String limit = null;
        String offset = null;
        String response = api.contentStatsGet(limit, offset);

        // TODO: test validations
    }
    /**
     * Content Status
     *
     * This endpoint returns the status of a content
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void contentStatusIdGetTest() throws Exception {
        Integer id = null;
        String response = api.contentStatusIdGet(id);

        // TODO: test validations
    }
}
