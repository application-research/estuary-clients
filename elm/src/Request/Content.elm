{-
   Estuary API
   This is the API for the Estuary application.

   OpenAPI spec version: 0.0.0
   

   NOTE: This file is auto generated by the swagger code generator program.
   https://github.com/swagger-api/swagger-codegen.git
   Do not edit this file manually.
-}


module Request.Content exposing (contentAddCarPost, contentAddIpfsPost, contentAddPost, contentAggregatedContentGet, contentAllDealsGet, contentBwUsageContentGet, contentCreatePost, contentDealsGet, contentEnsureReplicationDatacidGet, contentFailuresContentGet, contentIdGet, contentImportdealPost, contentListGet, contentReadContGet, contentStagingZonesGet, contentStatsGet, contentStatusIdGet)

import Data.UtilContentCreateBody exposing (UtilContentCreateBody, utilContentCreateBodyEncoder)
import Data.UtilContentAddIpfsBody exposing (UtilContentAddIpfsBody, utilContentAddIpfsBodyEncoder)
import Data.UtilHttpError exposing (UtilHttpError, utilHttpErrorDecoder)
import Data.UtilContentAddResponse exposing (UtilContentAddResponse, utilContentAddResponseDecoder)
import Data.String exposing (Decode.string, Encode.string, String)
import Data.MainImportDealBody exposing (MainImportDealBody, mainImportDealBodyEncoder)
import Http
import Json.Decode as Decode


basePath : String
basePath =
    "https://api.estuary.tech"


{-
   This endpoint is used to add a car object to the network. The object can be a file or a directory.
-}
contentAddCarPost : String -> Http.Request String
contentAddCarPost model =
    { method = "POST"
    , url = basePath ++ "/content/add-car"
    , headers = []
    , body = Http.jsonBody <| Encode.string model
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
-}
contentAddIpfsPost : UtilContentAddIpfsBody -> Http.Request String
contentAddIpfsPost model =
    { method = "POST"
    , url = basePath ++ "/content/add-ipfs"
    , headers = []
    , body = Http.jsonBody <| utilContentAddIpfsBodyEncoder model
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint is used to upload new content.
-}
contentAddPost : Http.Request UtilContentAddResponse
contentAddPost =
    { method = "POST"
    , url = basePath ++ "/content/add"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson utilContentAddResponseDecoder
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint returns aggregated content stats
-}
contentAggregatedContentGet : String -> Http.Request String
contentAggregatedContentGet content =
    { method = "GET"
    , url = basePath ++ "/content/aggregated/" ++ content
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint is used to get all deals for a user
-}
contentAllDealsGet : Http.Request String
contentAllDealsGet =
    { method = "GET"
    , url = basePath ++ "/content/all-deals"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint returns content bandwidth
-}
contentBwUsageContentGet : String -> Http.Request String
contentBwUsageContentGet content =
    { method = "GET"
    , url = basePath ++ "/content/bw-usage/" ++ content
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint adds a new content
-}
contentCreatePost : UtilContentCreateBody -> Http.Request String
contentCreatePost model =
    { method = "POST"
    , url = basePath ++ "/content/create"
    , headers = []
    , body = Http.jsonBody <| utilContentCreateBodyEncoder model
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint lists all content with deals
-}
contentDealsGet : Http.Request String
contentDealsGet =
    { method = "GET"
    , url = basePath ++ "/content/deals"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint ensures that the content is replicated to the specified number of providers
-}
contentEnsureReplicationDatacidGet : String -> Http.Request String
contentEnsureReplicationDatacidGet datacid =
    { method = "GET"
    , url = basePath ++ "/content/ensure-replication/" ++ datacid
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint returns all failures for a content
-}
contentFailuresContentGet : String -> Http.Request String
contentFailuresContentGet content =
    { method = "GET"
    , url = basePath ++ "/content/failures/" ++ content
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint returns a content by its ID
-}
contentIdGet : Int -> Http.Request String
contentIdGet id =
    { method = "GET"
    , url = basePath ++ "/content/" ++ toString id
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint imports a deal into the shuttle.
-}
contentImportdealPost : MainImportDealBody -> Http.Request String
contentImportdealPost model =
    { method = "POST"
    , url = basePath ++ "/content/importdeal"
    , headers = []
    , body = Http.jsonBody <| mainImportDealBodyEncoder model
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint lists all content
-}
contentListGet : Http.Request String
contentListGet =
    { method = "GET"
    , url = basePath ++ "/content/list"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint reads content from the blockstore
-}
contentReadContGet : String -> Http.Request String
contentReadContGet cont =
    { method = "GET"
    , url = basePath ++ "/content/read/" ++ cont
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint is used to get staging zone for user.
-}
contentStagingZonesGet : Http.Request String
contentStagingZonesGet =
    { method = "GET"
    , url = basePath ++ "/content/staging-zones"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
-}
contentStatsGet : Http.Request String
contentStatsGet =
    { method = "GET"
    , url = basePath ++ "/content/stats"
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


{-
   This endpoint returns the status of a content
-}
contentStatusIdGet : Int -> Http.Request String
contentStatusIdGet id =
    { method = "GET"
    , url = basePath ++ "/content/status/" ++ toString id
    , headers = []
    , body = Http.emptyBody
    , expect = Http.expectJson Decode.string
    , timeout = Just 30000
    , withCredentials = False
    }
        |> Http.request


