--  Estuary API
--  This is the API for the Estuary application.
--
--  OpenAPI spec version: 0.0.0
--  
--
--  NOTE: This package is auto generated by the swagger code generator 2.4.28.
--  https://github.com/swagger-api/swagger-codegen.git
--  Do not edit the class manually.
with Swagger.Streams;
package body .Clients is

   --  Remove peers on Peering Service
   --  This endpoint can be used to remove a Peer from the Peering Service
   procedure Admin_Peering_Peers_Delete
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.DELETE, URI);
   end Admin_Peering_Peers_Delete;

   --  List all Peering peers
   --  This endpoint can be used to list all peers on Peering Service
   procedure Admin_Peering_Peers_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Peering_Peers_Get;

   --  Add peers on Peering Service
   --  This endpoint can be used to add a Peer from the Peering Service
   procedure Admin_Peering_Peers_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Peers_Post;

   --  Start Peering
   --  This endpoint can be used to start the Peering Service
   procedure Admin_Peering_Start_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/start");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Start_Post;

   --  Check Peering Status
   --  This endpoint can be used to check the Peering status
   procedure Admin_Peering_Status_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/status");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Peering_Status_Get;

   --  Stop Peering
   --  This endpoint can be used to stop the Peering Service
   procedure Admin_Peering_Stop_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/stop");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Stop_Post;

   --  Get systems(estuary/shuttle) config
   --  This endpoint is used to get system configs.
   procedure Admin_System_Config_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/system/config");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_System_Config_Get;

   --  Get all users
   --  This endpoint is used to get all users.
   procedure Admin_Users_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/users");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Users_Get;

   --  Register autoretrieve server
   --  This endpoint registers a new autoretrieve server
   procedure Admin_Autoretrieve_Init_Post
      (Client : in out Client_Type;
       Addresses : in Swagger.UString;
       Pub_Key : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Addresses);
      .Models.Serialize (Req.Stream, "", Pub_Key);

      URI.Set_Path ("/admin/autoretrieve/init");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Admin_Autoretrieve_Init_Post;

   --  List autoretrieve servers
   --  This endpoint lists all registered autoretrieve servers
   procedure Admin_Autoretrieve_List_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/autoretrieve/list");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Autoretrieve_List_Get;

   --  Marks autoretrieve server as up
   --  This endpoint updates the lastConnection field for autoretrieve
   procedure Autoretrieve_Heartbeat_Post
      (Client : in out Client_Type;
       Token : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/autoretrieve/heartbeat");
      Client.Call (Swagger.Clients.POST, URI);
   end Autoretrieve_Heartbeat_Post;

   --  Produce a CID of the collection contents
   --  This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
   procedure Collections_Coluuid_Commit_Post
      (Client : in out Client_Type;
       Coluuid : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/collections/{coluuid}/commit");
      URI.Set_Path_Param ("coluuid", Coluuid);
      Client.Call (Swagger.Clients.POST, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end Collections_Coluuid_Commit_Post;

   --  Deletes a collection
   --  This endpoint is used to delete an existing collection.
   procedure Collections_Coluuid_Delete
      (Client : in out Client_Type;
       Coluuid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin


      URI.Set_Path ("/collections/{coluuid}");
      URI.Set_Path_Param ("coluuid", Coluuid);
      Client.Call (Swagger.Clients.DELETE, URI);
   end Collections_Coluuid_Delete;

   --  Get contents in a collection
   --  This endpoint is used to get contents in a collection. If no colpath query param is passed
   procedure Collections_Coluuid_Get
      (Client : in out Client_Type;
       Coluuid : in Swagger.UString;
       Dir : in Swagger.Nullable_UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("coluuid", Coluuid);
      URI.Add_Param ("dir", Dir);
      URI.Set_Path ("/collections/{coluuid}");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end Collections_Coluuid_Get;

   --  Add contents to a collection
   --  This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
   procedure Collections_Coluuid_Post
      (Client : in out Client_Type;
       P_Body : in Swagger.Nullable_Integer_Vectors.Vector;
       Result : out Swagger.Nullable_UString_Map) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/collections/{coluuid}");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Collections_Coluuid_Post;

   --  Add a file to a collection
   --  This endpoint adds a file to a collection
   procedure Collections_Fs_Add_Post
      (Client : in out Client_Type;
       Coluuid : in Swagger.UString;
       Content : in Swagger.UString;
       Path : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("coluuid", Coluuid);
      URI.Add_Param ("content", Content);
      URI.Add_Param ("path", Path);
      URI.Set_Path ("/collections/fs/add");
      Client.Call (Swagger.Clients.POST, URI);
   end Collections_Fs_Add_Post;

   --  List all collections
   --  This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
   procedure Collections_Get
      (Client : in out Client_Type;
       Id : in Integer;
       Result : out .Models.Main_Collection_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/collections/");
      URI.Set_Path_Param ("id", Swagger.To_String (Id));
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Collections_Get;

   --  Create a new collection
   --  This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
   procedure Collections_Post
      (Client : in out Client_Type;
       P_Body : in .Models.Main_createCollectionBody_Type;
       Result : out .Models.Main_Collection_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/collections/");
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Collections_Post;

   --  Add Car object
   --  This endpoint is used to add a car object to the network. The object can be a file or a directory.
   procedure Content_Add_Car_Post
      (Client : in out Client_Type;
       P_Body : in Swagger.UString;
       Filename : in Swagger.Nullable_UString;
       Commp : in Swagger.Nullable_UString;
       Size : in Swagger.Nullable_UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Add_Param ("filename", Filename);
      URI.Add_Param ("commp", Commp);
      URI.Add_Param ("size", Size);
      URI.Set_Path ("/content/add-car");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Content_Add_Car_Post;

   --  Add IPFS object
   --  This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
   procedure Content_Add_Ipfs_Post
      (Client : in out Client_Type;
       P_Body : in .Models.Util_ContentAddIpfsBody_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/content/add-ipfs");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Content_Add_Ipfs_Post;

   --  Add new content
   --  This endpoint is used to upload new content.
   procedure Content_Add_Post
      (Client : in out Client_Type;
       File : in Swagger.File_Part_Type;
       Coluuid : in Swagger.UString;
       Dir : in Swagger.UString;
       Result : out .Models.Util_ContentAddResponse_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_FORM));
      .Models.Serialize (Req.Stream, "file", File);

      URI.Set_Path ("/content/add");
      URI.Set_Path_Param ("coluuid", Coluuid);
      URI.Set_Path_Param ("dir", Dir);
      Client.Call (Swagger.Clients.POST, URI, Req, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Content_Add_Post;

   --  Get aggregated content stats
   --  This endpoint returns aggregated content stats
   procedure Content_Aggregated_Content_Get
      (Client : in out Client_Type;
       Content : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/aggregated/{content}");
      URI.Set_Path_Param ("content", Content);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end Content_Aggregated_Content_Get;

   --  Get all deals for a user
   --  This endpoint is used to get all deals for a user
   procedure Content_All_Deals_Get
      (Client : in out Client_Type;
       P_Begin : in Swagger.UString;
       Duration : in Swagger.UString;
       P_All : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("begin", P_Begin);
      URI.Add_Param ("duration", Duration);
      URI.Add_Param ("all", P_All);
      URI.Set_Path ("/content/all-deals");
      Client.Call (Swagger.Clients.GET, URI);
   end Content_All_Deals_Get;

   --  Get content bandwidth
   --  This endpoint returns content bandwidth
   procedure Content_Bw_Usage_Content_Get
      (Client : in out Client_Type;
       Content : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/bw-usage/{content}");
      URI.Set_Path_Param ("content", Content);
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Bw_Usage_Content_Get;

   --  Add a new content
   --  This endpoint adds a new content
   procedure Content_Create_Post
      (Client : in out Client_Type;
       P_Body : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/content/create");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Content_Create_Post;

   --  Content with deals
   --  This endpoint lists all content with deals
   procedure Content_Deals_Get
      (Client : in out Client_Type;
       Limit : in Swagger.Nullable_Integer;
       Offset : in Swagger.Nullable_Integer) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Add_Param ("limit", Limit);
      URI.Add_Param ("offset", Offset);
      URI.Set_Path ("/content/deals");
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Deals_Get;

   --  Ensure Replication
   --  This endpoint ensures that the content is replicated to the specified number of providers
   procedure Content_Ensure_Replication_Datacid_Get
      (Client : in out Client_Type;
       Datacid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/ensure-replication/{datacid}");
      URI.Set_Path_Param ("datacid", Datacid);
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Ensure_Replication_Datacid_Get;

   --  List all failures for a content
   --  This endpoint returns all failures for a content
   procedure Content_Failures_Content_Get
      (Client : in out Client_Type;
       Content : in Swagger.UString;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/failures/{content}");
      URI.Set_Path_Param ("content", Content);
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end Content_Failures_Content_Get;

   --  Import a deal
   --  This endpoint imports a deal into the shuttle.
   procedure Content_Importdeal_Post
      (Client : in out Client_Type;
       P_Body : in .Models.Main_importDealBody_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/content/importdeal");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Content_Importdeal_Post;

   --  List all pinned content
   --  This endpoint lists all content
   procedure Content_List_Get
      (Client : in out Client_Type;
       Result : out Swagger.Nullable_UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/list");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Content_List_Get;

   --  Read content
   --  This endpoint reads content from the blockstore
   procedure Content_Read_Cont_Get
      (Client : in out Client_Type;
       Cont : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/read/{cont}");
      URI.Set_Path_Param ("cont", Cont);
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Read_Cont_Get;

   --  Get staging zone for user
   --  This endpoint is used to get staging zone for user.
   procedure Content_Staging_Zones_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/staging-zones");
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Staging_Zones_Get;

   --  Get content statistics
   --  This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
   procedure Content_Stats_Get
      (Client : in out Client_Type;
       Limit : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/stats");
      URI.Set_Path_Param ("limit", Limit);
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Stats_Get;

   --  Content Status
   --  This endpoint returns the status of a content
   procedure Content_Status_Id_Get
      (Client : in out Client_Type;
       Id : in Integer) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/content/status/{id}");
      URI.Set_Path_Param ("id", Swagger.To_String (Id));
      Client.Call (Swagger.Clients.GET, URI);
   end Content_Status_Id_Get;

   --  Estimate the cost of a deal
   --  This endpoint estimates the cost of a deal
   procedure Deal_Estimate_Post
      (Client : in out Client_Type;
       P_Body : in .Models.Main_estimateDealBody_Type) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", P_Body);

      URI.Set_Path ("/deal/estimate");
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Deal_Estimate_Post;

   --  Get Deal Info
   --  This endpoint returns the deal info for a deal
   procedure Deal_Info_Dealid_Get
      (Client : in out Client_Type;
       Dealid : in Integer) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/info/{dealid}");
      URI.Set_Path_Param ("dealid", Swagger.To_String (Dealid));
      Client.Call (Swagger.Clients.GET, URI);
   end Deal_Info_Dealid_Get;

   --  Get Proposal
   --  This endpoint returns the proposal for a deal
   procedure Deal_Proposal_Propcid_Get
      (Client : in out Client_Type;
       Propcid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/proposal/{propcid}");
      URI.Set_Path_Param ("propcid", Propcid);
      Client.Call (Swagger.Clients.GET, URI);
   end Deal_Proposal_Propcid_Get;

   --  Query Ask
   --  This endpoint returns the ask for a given CID
   procedure Deal_Query_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/query/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Deal_Query_Miner_Get;

   --  Get Deal Status by PropCid
   --  Get Deal Status by PropCid
   procedure Deal_Status_By_Proposal_Propcid_Get
      (Client : in out Client_Type;
       Propcid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/status-by-proposal/{propcid}");
      URI.Set_Path_Param ("propcid", Propcid);
      Client.Call (Swagger.Clients.GET, URI);
   end Deal_Status_By_Proposal_Propcid_Get;

   --  Deal Status
   --  This endpoint returns the status of a deal
   procedure Deal_Status_Miner_Propcid_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString;
       Propcid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/status/{miner}/{propcid}");
      URI.Set_Path_Param ("miner", Miner);
      URI.Set_Path_Param ("propcid", Propcid);
      Client.Call (Swagger.Clients.GET, URI);
   end Deal_Status_Miner_Propcid_Get;

   --  Transfer In Progress
   --  This endpoint returns the in-progress transfers
   procedure Deal_Transfer_In_Progress_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/transfer/in-progress");
      Client.Call (Swagger.Clients.GET, URI);
   end Deal_Transfer_In_Progress_Get;

   --  Transfer Status
   --  This endpoint returns the status of a transfer
   procedure Deal_Transfer_Status_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deal/transfer/status");
      Client.Call (Swagger.Clients.POST, URI);
   end Deal_Transfer_Status_Post;

   --  Get storage failures for user
   --  This endpoint returns a list of storage failures for user
   procedure Deals_Failures_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deals/failures");
      Client.Call (Swagger.Clients.GET, URI);
   end Deals_Failures_Get;

   --  Make Deal
   --  This endpoint makes a deal for a given content and miner
   procedure Deals_Make_Miner_Post
      (Client : in out Client_Type;
       Miner : in Swagger.UString;
       Deal_Request : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Req   : Swagger.Clients.Request_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));
      Client.Initialize (Req, (1 => Swagger.Clients.APPLICATION_JSON));
      .Models.Serialize (Req.Stream, "", Deal_Request);

      URI.Set_Path ("/deals/make/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.POST, URI, Req);
   end Deals_Make_Miner_Post;

   --  Get Deal Status
   --  This endpoint returns the status of a deal
   procedure Deals_Status_Deal_Get
      (Client : in out Client_Type;
       Deal : in Integer) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/deals/status/{deal}");
      URI.Set_Path_Param ("deal", Swagger.To_String (Deal));
      Client.Call (Swagger.Clients.GET, URI);
   end Deals_Status_Deal_Get;

   --  Get storage failures
   --  This endpoint returns a list of storage failures
   procedure Public_Deals_Failures_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/deals/failures");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Deals_Failures_Get;

   --  Query Ask
   --  This endpoint returns the ask for a given CID
   procedure Public_Miners_Storage_Query_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/storage/query/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Storage_Query_Miner_Get;

   --  Get deal metrics
   --  This endpoint is used to get deal metrics
   procedure Public_Metrics_Deals_On_Chain_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/metrics/deals-on-chain");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Metrics_Deals_On_Chain_Get;

   --  Get all miners deals
   --  This endpoint returns all miners deals
   procedure Public_Miners_Deals_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/deals/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Deals_Miner_Get;

   --  Get miner stats
   --  This endpoint returns miner stats
   procedure Public_Miners_Stats_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/stats/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Stats_Miner_Get;

   --  Net Addrs
   --  This endpoint is used to get net addrs
   procedure Net_Addrs_Get
      (Client : in out Client_Type;
       Result : out Swagger.Nullable_UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/net/addrs");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Net_Addrs_Get;

   --  Get all miners
   --  This endpoint returns all miners
   procedure Public_Miners_Failures_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/failures/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Failures_Miner_Get;

   --  Get all miners
   --  This endpoint returns all miners
   procedure Public_Miners_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Get;

   --  Net Addrs
   --  This endpoint is used to get net addrs
   procedure Public_Net_Addrs_Get
      (Client : in out Client_Type;
       Result : out Swagger.Nullable_UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/net/addrs");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Public_Net_Addrs_Get;

   --  Net Peers
   --  This endpoint is used to get net peers
   procedure Public_Net_Peers_Get
      (Client : in out Client_Type;
       Result : out Swagger.Nullable_UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/net/peers");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Public_Net_Peers_Get;

   --  Remove peers on Peering Service
   --  This endpoint can be used to remove a Peer from the Peering Service
   procedure Admin_Peering_Peers_Delete
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.DELETE, URI);
   end Admin_Peering_Peers_Delete;

   --  List all Peering peers
   --  This endpoint can be used to list all peers on Peering Service
   procedure Admin_Peering_Peers_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Peering_Peers_Get;

   --  Add peers on Peering Service
   --  This endpoint can be used to add a Peer from the Peering Service
   procedure Admin_Peering_Peers_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Peers_Post;

   --  Start Peering
   --  This endpoint can be used to start the Peering Service
   procedure Admin_Peering_Start_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/start");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Start_Post;

   --  Check Peering Status
   --  This endpoint can be used to check the Peering status
   procedure Admin_Peering_Status_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/status");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Peering_Status_Get;

   --  Stop Peering
   --  This endpoint can be used to stop the Peering Service
   procedure Admin_Peering_Stop_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/stop");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Stop_Post;

   --  Remove peers on Peering Service
   --  This endpoint can be used to remove a Peer from the Peering Service
   procedure Admin_Peering_Peers_Delete
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.DELETE, URI);
   end Admin_Peering_Peers_Delete;

   --  List all Peering peers
   --  This endpoint can be used to list all peers on Peering Service
   procedure Admin_Peering_Peers_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Peering_Peers_Get;

   --  Add peers on Peering Service
   --  This endpoint can be used to add a Peer from the Peering Service
   procedure Admin_Peering_Peers_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/peers");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Peers_Post;

   --  Start Peering
   --  This endpoint can be used to start the Peering Service
   procedure Admin_Peering_Start_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/start");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Start_Post;

   --  Check Peering Status
   --  This endpoint can be used to check the Peering status
   procedure Admin_Peering_Status_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/status");
      Client.Call (Swagger.Clients.GET, URI);
   end Admin_Peering_Status_Get;

   --  Stop Peering
   --  This endpoint can be used to stop the Peering Service
   procedure Admin_Peering_Stop_Post
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/admin/peering/stop");
      Client.Call (Swagger.Clients.POST, URI);
   end Admin_Peering_Stop_Post;

   --  List all pin status objects
   --  This endpoint lists all pin status objects
   procedure Pinning_Pins_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/pinning/pins");
      Client.Call (Swagger.Clients.GET, URI);
   end Pinning_Pins_Get;

   --  Delete a pinned object
   --  This endpoint deletes a pinned object.
   procedure Pinning_Pins_Pinid_Delete
      (Client : in out Client_Type;
       Pinid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/pinning/pins/{pinid}");
      URI.Set_Path_Param ("pinid", Pinid);
      Client.Call (Swagger.Clients.DELETE, URI);
   end Pinning_Pins_Pinid_Delete;

   --  Get a pin status object
   --  This endpoint returns a pin status object.
   procedure Pinning_Pins_Pinid_Get
      (Client : in out Client_Type;
       Pinid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/pinning/pins/{pinid}");
      URI.Set_Path_Param ("pinid", Pinid);
      Client.Call (Swagger.Clients.GET, URI);
   end Pinning_Pins_Pinid_Get;

   --  Replace a pinned object
   --  This endpoint replaces a pinned object.
   procedure Pinning_Pins_Pinid_Post
      (Client : in out Client_Type;
       Pinid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/pinning/pins/{pinid}");
      URI.Set_Path_Param ("pinid", Pinid);
      Client.Call (Swagger.Clients.POST, URI);
   end Pinning_Pins_Pinid_Post;

   --  Add and pin object
   --  This endpoint adds a pin to the IPFS daemon.
   procedure Pinning_Pins_Post
      (Client : in out Client_Type;
       Cid : in Swagger.UString;
       Name : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/pinning/pins");
      URI.Set_Path_Param ("cid", Cid);
      URI.Set_Path_Param ("name", Name);
      Client.Call (Swagger.Clients.POST, URI);
   end Pinning_Pins_Post;

   --  Get Content by Cid
   --  This endpoint returns the content associated with a CID
   procedure Public_By_Cid_Cid_Get
      (Client : in out Client_Type;
       Cid : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/by-cid/{cid}");
      URI.Set_Path_Param ("cid", Cid);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_By_Cid_Cid_Get;

   --  Get public node info
   --  This endpoint returns information about the node
   procedure Public_Info_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/info");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Info_Get;

   --  Get deal metrics
   --  This endpoint is used to get deal metrics
   procedure Public_Metrics_Deals_On_Chain_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/metrics/deals-on-chain");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Metrics_Deals_On_Chain_Get;

   --  Get all miners deals
   --  This endpoint returns all miners deals
   procedure Public_Miners_Deals_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/deals/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Deals_Miner_Get;

   --  Get all miners
   --  This endpoint returns all miners
   procedure Public_Miners_Failures_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/failures/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Failures_Miner_Get;

   --  Get all miners
   --  This endpoint returns all miners
   procedure Public_Miners_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Get;

   --  Get miner stats
   --  This endpoint returns miner stats
   procedure Public_Miners_Stats_Miner_Get
      (Client : in out Client_Type;
       Miner : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/miners/stats/{miner}");
      URI.Set_Path_Param ("miner", Miner);
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Miners_Stats_Miner_Get;

   --  Net Addrs
   --  This endpoint is used to get net addrs
   procedure Public_Net_Addrs_Get
      (Client : in out Client_Type;
       Result : out Swagger.Nullable_UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/net/addrs");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Public_Net_Addrs_Get;

   --  Net Peers
   --  This endpoint is used to get net peers
   procedure Public_Net_Peers_Get
      (Client : in out Client_Type;
       Result : out Swagger.Nullable_UString_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/net/peers");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end Public_Net_Peers_Get;

   --  Public stats
   --  This endpoint is used to get public stats.
   procedure Public_Stats_Get
      (Client : in out Client_Type) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/public/stats");
      Client.Call (Swagger.Clients.GET, URI);
   end Public_Stats_Get;

   --  Get API keys for a user
   --  This endpoint is used to get API keys for a user. In estuary, each user can be given multiple API keys (tokens). This endpoint can be used to retrieve all available API keys for a given user.
   procedure User_Api_Keys_Get
      (Client : in out Client_Type;
       Result : out .Models.Main_getApiKeysResp_Type_Vectors.Vector) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/api-keys");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end User_Api_Keys_Get;

   --  Revoke a User API Key.
   --  This endpoint is used to revoke a user API key. In estuary, every user is assigned with an API key, this API key is generated and issued for each user and is primarily use to access all estuary features. This endpoint can be used to revoke the API key thats assigned to the user.
   procedure User_Api_Keys_Key_Delete
      (Client : in out Client_Type;
       Key : in Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/api-keys/{key}");
      URI.Set_Path_Param ("key", Key);
      Client.Call (Swagger.Clients.DELETE, URI);
   end User_Api_Keys_Key_Delete;

   --  Create API keys for a user
   --  This endpoint is used to create API keys for a user. In estuary, each user is given an API key to access all features.
   procedure User_Api_Keys_Post
      (Client : in out Client_Type;
       Result : out .Models.Main_getApiKeysResp_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/api-keys");
      Client.Call (Swagger.Clients.POST, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end User_Api_Keys_Post;

   --  Export user data
   --  This endpoint is used to get API keys for a user.
   procedure User_Export_Get
      (Client : in out Client_Type;
       Result : out Swagger.UString) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/export");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      Swagger.Streams.Deserialize (Reply, "", Result);
   end User_Export_Get;

   --  Create API keys for a user
   --  This endpoint is used to create API keys for a user.
   procedure User_Stats_Get
      (Client : in out Client_Type;
       Result : out .Models.Main_userStatsResponse_Type) is
      URI   : Swagger.Clients.URI_Type;
      Reply : Swagger.Value_Type;
   begin
      Client.Set_Accept ((1 => Swagger.Clients.APPLICATION_JSON));

      URI.Set_Path ("/user/stats");
      Client.Call (Swagger.Clients.GET, URI, Reply);
      .Models.Deserialize (Reply, "", Result);
   end User_Stats_Get;
end .Clients;
