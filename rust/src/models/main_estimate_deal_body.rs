/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MainEstimateDealBody {
  #[serde(rename = "durationBlks")]
  duration_blks: Option<i32>,
  #[serde(rename = "replication")]
  replication: Option<i32>,
  #[serde(rename = "size")]
  size: Option<i32>,
  #[serde(rename = "verified")]
  verified: Option<bool>
}

impl MainEstimateDealBody {
  pub fn new() -> MainEstimateDealBody {
    MainEstimateDealBody {
      duration_blks: None,
      replication: None,
      size: None,
      verified: None
    }
  }

  pub fn set_duration_blks(&mut self, duration_blks: i32) {
    self.duration_blks = Some(duration_blks);
  }

  pub fn with_duration_blks(mut self, duration_blks: i32) -> MainEstimateDealBody {
    self.duration_blks = Some(duration_blks);
    self
  }

  pub fn duration_blks(&self) -> Option<&i32> {
    self.duration_blks.as_ref()
  }

  pub fn reset_duration_blks(&mut self) {
    self.duration_blks = None;
  }

  pub fn set_replication(&mut self, replication: i32) {
    self.replication = Some(replication);
  }

  pub fn with_replication(mut self, replication: i32) -> MainEstimateDealBody {
    self.replication = Some(replication);
    self
  }

  pub fn replication(&self) -> Option<&i32> {
    self.replication.as_ref()
  }

  pub fn reset_replication(&mut self) {
    self.replication = None;
  }

  pub fn set_size(&mut self, size: i32) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: i32) -> MainEstimateDealBody {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&i32> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_verified(&mut self, verified: bool) {
    self.verified = Some(verified);
  }

  pub fn with_verified(mut self, verified: bool) -> MainEstimateDealBody {
    self.verified = Some(verified);
    self
  }

  pub fn verified(&self) -> Option<&bool> {
    self.verified.as_ref()
  }

  pub fn reset_verified(&mut self) {
    self.verified = None;
  }

}



