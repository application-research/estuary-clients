/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MainUserStatsResponse {
  #[serde(rename = "numPins")]
  num_pins: Option<i32>,
  #[serde(rename = "totalSize")]
  total_size: Option<i32>
}

impl MainUserStatsResponse {
  pub fn new() -> MainUserStatsResponse {
    MainUserStatsResponse {
      num_pins: None,
      total_size: None
    }
  }

  pub fn set_num_pins(&mut self, num_pins: i32) {
    self.num_pins = Some(num_pins);
  }

  pub fn with_num_pins(mut self, num_pins: i32) -> MainUserStatsResponse {
    self.num_pins = Some(num_pins);
    self
  }

  pub fn num_pins(&self) -> Option<&i32> {
    self.num_pins.as_ref()
  }

  pub fn reset_num_pins(&mut self) {
    self.num_pins = None;
  }

  pub fn set_total_size(&mut self, total_size: i32) {
    self.total_size = Some(total_size);
  }

  pub fn with_total_size(mut self, total_size: i32) -> MainUserStatsResponse {
    self.total_size = Some(total_size);
    self
  }

  pub fn total_size(&self) -> Option<&i32> {
    self.total_size.as_ref()
  }

  pub fn reset_total_size(&mut self) {
    self.total_size = None;
  }

}



