/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TypesIpfsListPinStatusResponse {
  #[serde(rename = "count")]
  count: Option<i32>,
  #[serde(rename = "results")]
  results: Option<Vec<::models::TypesIpfsPinStatusResponse>>
}

impl TypesIpfsListPinStatusResponse {
  pub fn new() -> TypesIpfsListPinStatusResponse {
    TypesIpfsListPinStatusResponse {
      count: None,
      results: None
    }
  }

  pub fn set_count(&mut self, count: i32) {
    self.count = Some(count);
  }

  pub fn with_count(mut self, count: i32) -> TypesIpfsListPinStatusResponse {
    self.count = Some(count);
    self
  }

  pub fn count(&self) -> Option<&i32> {
    self.count.as_ref()
  }

  pub fn reset_count(&mut self) {
    self.count = None;
  }

  pub fn set_results(&mut self, results: Vec<::models::TypesIpfsPinStatusResponse>) {
    self.results = Some(results);
  }

  pub fn with_results(mut self, results: Vec<::models::TypesIpfsPinStatusResponse>) -> TypesIpfsListPinStatusResponse {
    self.results = Some(results);
    self
  }

  pub fn results(&self) -> Option<&Vec<::models::TypesIpfsPinStatusResponse>> {
    self.results.as_ref()
  }

  pub fn reset_results(&mut self) {
    self.results = None;
  }

}



