/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TypesIpfsPin {
  #[serde(rename = "cid")]
  cid: Option<String>,
  #[serde(rename = "meta")]
  meta: Option<Value>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "origins")]
  origins: Option<Vec<String>>
}

impl TypesIpfsPin {
  pub fn new() -> TypesIpfsPin {
    TypesIpfsPin {
      cid: None,
      meta: None,
      name: None,
      origins: None
    }
  }

  pub fn set_cid(&mut self, cid: String) {
    self.cid = Some(cid);
  }

  pub fn with_cid(mut self, cid: String) -> TypesIpfsPin {
    self.cid = Some(cid);
    self
  }

  pub fn cid(&self) -> Option<&String> {
    self.cid.as_ref()
  }

  pub fn reset_cid(&mut self) {
    self.cid = None;
  }

  pub fn set_meta(&mut self, meta: Value) {
    self.meta = Some(meta);
  }

  pub fn with_meta(mut self, meta: Value) -> TypesIpfsPin {
    self.meta = Some(meta);
    self
  }

  pub fn meta(&self) -> Option<&Value> {
    self.meta.as_ref()
  }

  pub fn reset_meta(&mut self) {
    self.meta = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> TypesIpfsPin {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_origins(&mut self, origins: Vec<String>) {
    self.origins = Some(origins);
  }

  pub fn with_origins(mut self, origins: Vec<String>) -> TypesIpfsPin {
    self.origins = Some(origins);
    self
  }

  pub fn origins(&self) -> Option<&Vec<String>> {
    self.origins.as_ref()
  }

  pub fn reset_origins(&mut self) {
    self.origins = None;
  }

}



