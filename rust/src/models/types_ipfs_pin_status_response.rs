/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TypesIpfsPinStatusResponse {
  #[serde(rename = "created")]
  created: Option<String>,
  #[serde(rename = "delegates")]
  delegates: Option<Vec<String>>,
  #[serde(rename = "info")]
  info: Option<Value>,
  #[serde(rename = "pin")]
  pin: Option<::models::TypesIpfsPin>,
  #[serde(rename = "requestid")]
  requestid: Option<String>,
  #[serde(rename = "status")]
  status: Option<String>
}

impl TypesIpfsPinStatusResponse {
  pub fn new() -> TypesIpfsPinStatusResponse {
    TypesIpfsPinStatusResponse {
      created: None,
      delegates: None,
      info: None,
      pin: None,
      requestid: None,
      status: None
    }
  }

  pub fn set_created(&mut self, created: String) {
    self.created = Some(created);
  }

  pub fn with_created(mut self, created: String) -> TypesIpfsPinStatusResponse {
    self.created = Some(created);
    self
  }

  pub fn created(&self) -> Option<&String> {
    self.created.as_ref()
  }

  pub fn reset_created(&mut self) {
    self.created = None;
  }

  pub fn set_delegates(&mut self, delegates: Vec<String>) {
    self.delegates = Some(delegates);
  }

  pub fn with_delegates(mut self, delegates: Vec<String>) -> TypesIpfsPinStatusResponse {
    self.delegates = Some(delegates);
    self
  }

  pub fn delegates(&self) -> Option<&Vec<String>> {
    self.delegates.as_ref()
  }

  pub fn reset_delegates(&mut self) {
    self.delegates = None;
  }

  pub fn set_info(&mut self, info: Value) {
    self.info = Some(info);
  }

  pub fn with_info(mut self, info: Value) -> TypesIpfsPinStatusResponse {
    self.info = Some(info);
    self
  }

  pub fn info(&self) -> Option<&Value> {
    self.info.as_ref()
  }

  pub fn reset_info(&mut self) {
    self.info = None;
  }

  pub fn set_pin(&mut self, pin: ::models::TypesIpfsPin) {
    self.pin = Some(pin);
  }

  pub fn with_pin(mut self, pin: ::models::TypesIpfsPin) -> TypesIpfsPinStatusResponse {
    self.pin = Some(pin);
    self
  }

  pub fn pin(&self) -> Option<&::models::TypesIpfsPin> {
    self.pin.as_ref()
  }

  pub fn reset_pin(&mut self) {
    self.pin = None;
  }

  pub fn set_requestid(&mut self, requestid: String) {
    self.requestid = Some(requestid);
  }

  pub fn with_requestid(mut self, requestid: String) -> TypesIpfsPinStatusResponse {
    self.requestid = Some(requestid);
    self
  }

  pub fn requestid(&self) -> Option<&String> {
    self.requestid.as_ref()
  }

  pub fn reset_requestid(&mut self) {
    self.requestid = None;
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> TypesIpfsPinStatusResponse {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

}



