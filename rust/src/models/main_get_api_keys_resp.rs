/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MainGetApiKeysResp {
  #[serde(rename = "expiry")]
  expiry: Option<String>,
  #[serde(rename = "label")]
  label: Option<String>,
  #[serde(rename = "token")]
  token: Option<String>,
  #[serde(rename = "tokenHash")]
  token_hash: Option<String>
}

impl MainGetApiKeysResp {
  pub fn new() -> MainGetApiKeysResp {
    MainGetApiKeysResp {
      expiry: None,
      label: None,
      token: None,
      token_hash: None
    }
  }

  pub fn set_expiry(&mut self, expiry: String) {
    self.expiry = Some(expiry);
  }

  pub fn with_expiry(mut self, expiry: String) -> MainGetApiKeysResp {
    self.expiry = Some(expiry);
    self
  }

  pub fn expiry(&self) -> Option<&String> {
    self.expiry.as_ref()
  }

  pub fn reset_expiry(&mut self) {
    self.expiry = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: String) -> MainGetApiKeysResp {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&String> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_token(&mut self, token: String) {
    self.token = Some(token);
  }

  pub fn with_token(mut self, token: String) -> MainGetApiKeysResp {
    self.token = Some(token);
    self
  }

  pub fn token(&self) -> Option<&String> {
    self.token.as_ref()
  }

  pub fn reset_token(&mut self) {
    self.token = None;
  }

  pub fn set_token_hash(&mut self, token_hash: String) {
    self.token_hash = Some(token_hash);
  }

  pub fn with_token_hash(mut self, token_hash: String) -> MainGetApiKeysResp {
    self.token_hash = Some(token_hash);
    self
  }

  pub fn token_hash(&self) -> Option<&String> {
    self.token_hash.as_ref()
  }

  pub fn reset_token_hash(&mut self) {
    self.token_hash = None;
  }

}



