/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UtilContentCreateBody {
  #[serde(rename = "coluuid")]
  coluuid: Option<String>,
  #[serde(rename = "dir")]
  dir: Option<String>,
  #[serde(rename = "location")]
  location: Option<String>,
  #[serde(rename = "name")]
  name: Option<String>,
  #[serde(rename = "root")]
  root: Option<String>,
  #[serde(rename = "type")]
  _type: Option<i32>
}

impl UtilContentCreateBody {
  pub fn new() -> UtilContentCreateBody {
    UtilContentCreateBody {
      coluuid: None,
      dir: None,
      location: None,
      name: None,
      root: None,
      _type: None
    }
  }

  pub fn set_coluuid(&mut self, coluuid: String) {
    self.coluuid = Some(coluuid);
  }

  pub fn with_coluuid(mut self, coluuid: String) -> UtilContentCreateBody {
    self.coluuid = Some(coluuid);
    self
  }

  pub fn coluuid(&self) -> Option<&String> {
    self.coluuid.as_ref()
  }

  pub fn reset_coluuid(&mut self) {
    self.coluuid = None;
  }

  pub fn set_dir(&mut self, dir: String) {
    self.dir = Some(dir);
  }

  pub fn with_dir(mut self, dir: String) -> UtilContentCreateBody {
    self.dir = Some(dir);
    self
  }

  pub fn dir(&self) -> Option<&String> {
    self.dir.as_ref()
  }

  pub fn reset_dir(&mut self) {
    self.dir = None;
  }

  pub fn set_location(&mut self, location: String) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: String) -> UtilContentCreateBody {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&String> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> UtilContentCreateBody {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_root(&mut self, root: String) {
    self.root = Some(root);
  }

  pub fn with_root(mut self, root: String) -> UtilContentCreateBody {
    self.root = Some(root);
    self
  }

  pub fn root(&self) -> Option<&String> {
    self.root.as_ref()
  }

  pub fn reset_root(&mut self) {
    self.root = None;
  }

  pub fn set__type(&mut self, _type: i32) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: i32) -> UtilContentCreateBody {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&i32> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

}



