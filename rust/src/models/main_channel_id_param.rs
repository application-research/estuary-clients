/* 
 * Estuary API
 *
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct MainChannelIdParam {
  #[serde(rename = "id")]
  id: Option<i32>,
  #[serde(rename = "initiator")]
  initiator: Option<String>,
  #[serde(rename = "responder")]
  responder: Option<String>
}

impl MainChannelIdParam {
  pub fn new() -> MainChannelIdParam {
    MainChannelIdParam {
      id: None,
      initiator: None,
      responder: None
    }
  }

  pub fn set_id(&mut self, id: i32) {
    self.id = Some(id);
  }

  pub fn with_id(mut self, id: i32) -> MainChannelIdParam {
    self.id = Some(id);
    self
  }

  pub fn id(&self) -> Option<&i32> {
    self.id.as_ref()
  }

  pub fn reset_id(&mut self) {
    self.id = None;
  }

  pub fn set_initiator(&mut self, initiator: String) {
    self.initiator = Some(initiator);
  }

  pub fn with_initiator(mut self, initiator: String) -> MainChannelIdParam {
    self.initiator = Some(initiator);
    self
  }

  pub fn initiator(&self) -> Option<&String> {
    self.initiator.as_ref()
  }

  pub fn reset_initiator(&mut self) {
    self.initiator = None;
  }

  pub fn set_responder(&mut self, responder: String) {
    self.responder = Some(responder);
  }

  pub fn with_responder(mut self, responder: String) -> MainChannelIdParam {
    self.responder = Some(responder);
    self
  }

  pub fn responder(&self) -> Option<&String> {
    self.responder.as_ref()
  }

  pub fn reset_responder(&mut self) {
    self.responder = None;
  }

}



