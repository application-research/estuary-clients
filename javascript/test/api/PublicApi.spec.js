/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EstuaryApi);
  }
}(this, function(expect, EstuaryApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new EstuaryApi.PublicApi();
  });

  describe('(package)', function() {
    describe('PublicApi', function() {
      describe('publicByCidCidGet', function() {
        it('should call publicByCidCidGet successfully', function(done) {
          // TODO: uncomment, update parameter values for publicByCidCidGet call
          /*
          var cid = "cid_example";

          instance.publicByCidCidGet(cid, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicInfoGet', function() {
        it('should call publicInfoGet successfully', function(done) {
          // TODO: uncomment publicInfoGet call
          /*

          instance.publicInfoGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicMetricsDealsOnChainGet', function() {
        it('should call publicMetricsDealsOnChainGet successfully', function(done) {
          // TODO: uncomment publicMetricsDealsOnChainGet call
          /*

          instance.publicMetricsDealsOnChainGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicMinersDealsMinerGet', function() {
        it('should call publicMinersDealsMinerGet successfully', function(done) {
          // TODO: uncomment, update parameter values for publicMinersDealsMinerGet call
          /*
          var miner = "miner_example";

          instance.publicMinersDealsMinerGet(miner, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicMinersFailuresMinerGet', function() {
        it('should call publicMinersFailuresMinerGet successfully', function(done) {
          // TODO: uncomment, update parameter values for publicMinersFailuresMinerGet call
          /*
          var miner = "miner_example";

          instance.publicMinersFailuresMinerGet(miner, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicMinersGet', function() {
        it('should call publicMinersGet successfully', function(done) {
          // TODO: uncomment publicMinersGet call
          /*

          instance.publicMinersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicMinersStatsMinerGet', function() {
        it('should call publicMinersStatsMinerGet successfully', function(done) {
          // TODO: uncomment, update parameter values for publicMinersStatsMinerGet call
          /*
          var miner = "miner_example";

          instance.publicMinersStatsMinerGet(miner, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicNetAddrsGet', function() {
        it('should call publicNetAddrsGet successfully', function(done) {
          // TODO: uncomment publicNetAddrsGet call and complete the assertions
          /*

          instance.publicNetAddrsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicNetPeersGet', function() {
        it('should call publicNetPeersGet successfully', function(done) {
          // TODO: uncomment publicNetPeersGet call and complete the assertions
          /*

          instance.publicNetPeersGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a('string');
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('publicStatsGet', function() {
        it('should call publicStatsGet successfully', function(done) {
          // TODO: uncomment publicStatsGet call
          /*

          instance.publicStatsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
