/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.38
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.EstuaryClient);
  }
}(this, function(expect, EstuaryClient) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('UtilContent', function() {
      beforeEach(function() {
        instance = new EstuaryClient.UtilContent();
      });

      it('should create an instance of UtilContent', function() {
        // TODO: update the code to test UtilContent
        expect(instance).to.be.a(EstuaryClient.UtilContent);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property aggregate (base name: "aggregate")', function() {
        // TODO: update the code to test the property aggregate
        expect(instance).to.have.property('aggregate');
        // expect(instance.aggregate).to.be(expectedValueLiteral);
      });

      it('should have the property aggregatedIn (base name: "aggregatedIn")', function() {
        // TODO: update the code to test the property aggregatedIn
        expect(instance).to.have.property('aggregatedIn');
        // expect(instance.aggregatedIn).to.be(expectedValueLiteral);
      });

      it('should have the property cid (base name: "cid")', function() {
        // TODO: update the code to test the property cid
        expect(instance).to.have.property('cid');
        // expect(instance.cid).to.be(expectedValueLiteral);
      });

      it('should have the property createdAt (base name: "createdAt")', function() {
        // TODO: update the code to test the property createdAt
        expect(instance).to.have.property('createdAt');
        // expect(instance.createdAt).to.be(expectedValueLiteral);
      });

      it('should have the property dagSplit (base name: "dagSplit")', function() {
        // TODO: update the code to test the property dagSplit
        expect(instance).to.have.property('dagSplit');
        // expect(instance.dagSplit).to.be(expectedValueLiteral);
      });

      it('should have the property dealStatus (base name: "dealStatus")', function() {
        // TODO: update the code to test the property dealStatus
        expect(instance).to.have.property('dealStatus');
        // expect(instance.dealStatus).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property failed (base name: "failed")', function() {
        // TODO: update the code to test the property failed
        expect(instance).to.have.property('failed');
        // expect(instance.failed).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property offloaded (base name: "offloaded")', function() {
        // TODO: update the code to test the property offloaded
        expect(instance).to.have.property('offloaded');
        // expect(instance.offloaded).to.be(expectedValueLiteral);
      });

      it('should have the property origins (base name: "origins")', function() {
        // TODO: update the code to test the property origins
        expect(instance).to.have.property('origins');
        // expect(instance.origins).to.be(expectedValueLiteral);
      });

      it('should have the property pinMeta (base name: "pinMeta")', function() {
        // TODO: update the code to test the property pinMeta
        expect(instance).to.have.property('pinMeta');
        // expect(instance.pinMeta).to.be(expectedValueLiteral);
      });

      it('should have the property pinning (base name: "pinning")', function() {
        // TODO: update the code to test the property pinning
        expect(instance).to.have.property('pinning');
        // expect(instance.pinning).to.be(expectedValueLiteral);
      });

      it('should have the property pinningStatus (base name: "pinningStatus")', function() {
        // TODO: update the code to test the property pinningStatus
        expect(instance).to.have.property('pinningStatus');
        // expect(instance.pinningStatus).to.be(expectedValueLiteral);
      });

      it('should have the property replace (base name: "replace")', function() {
        // TODO: update the code to test the property replace
        expect(instance).to.have.property('replace');
        // expect(instance.replace).to.be(expectedValueLiteral);
      });

      it('should have the property replication (base name: "replication")', function() {
        // TODO: update the code to test the property replication
        expect(instance).to.have.property('replication');
        // expect(instance.replication).to.be(expectedValueLiteral);
      });

      it('should have the property size (base name: "size")', function() {
        // TODO: update the code to test the property size
        expect(instance).to.have.property('size');
        // expect(instance.size).to.be(expectedValueLiteral);
      });

      it('should have the property splitFrom (base name: "splitFrom")', function() {
        // TODO: update the code to test the property splitFrom
        expect(instance).to.have.property('splitFrom');
        // expect(instance.splitFrom).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property updatedAt (base name: "updatedAt")', function() {
        // TODO: update the code to test the property updatedAt
        expect(instance).to.have.property('updatedAt');
        // expect(instance.updatedAt).to.be(expectedValueLiteral);
      });

      it('should have the property userId (base name: "userId")', function() {
        // TODO: update the code to test the property userId
        expect(instance).to.have.property('userId');
        // expect(instance.userId).to.be(expectedValueLiteral);
      });

    });
  });

}));
