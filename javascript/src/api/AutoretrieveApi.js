/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.28
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.EstuaryApi) {
      root.EstuaryApi = {};
    }
    root.EstuaryApi.AutoretrieveApi = factory(root.EstuaryApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Autoretrieve service.
   * @module api/AutoretrieveApi
   * @version 0.0.0
   */

  /**
   * Constructs a new AutoretrieveApi. 
   * @alias module:api/AutoretrieveApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the adminAutoretrieveInitPost operation.
     * @callback module:api/AutoretrieveApi~adminAutoretrieveInitPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register autoretrieve server
     * This endpoint registers a new autoretrieve server
     * @param {String} addresses Autoretrieve's comma-separated list of addresses
     * @param {String} pubKey Autoretrieve's public key
     * @param {module:api/AutoretrieveApi~adminAutoretrieveInitPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.adminAutoretrieveInitPost = function(addresses, pubKey, callback) {
      var postBody = pubKey;

      // verify the required parameter 'addresses' is set
      if (addresses === undefined || addresses === null) {
        throw new Error("Missing the required parameter 'addresses' when calling adminAutoretrieveInitPost");
      }

      // verify the required parameter 'pubKey' is set
      if (pubKey === undefined || pubKey === null) {
        throw new Error("Missing the required parameter 'pubKey' when calling adminAutoretrieveInitPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/admin/autoretrieve/init', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the adminAutoretrieveListGet operation.
     * @callback module:api/AutoretrieveApi~adminAutoretrieveListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List autoretrieve servers
     * This endpoint lists all registered autoretrieve servers
     * @param {module:api/AutoretrieveApi~adminAutoretrieveListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.adminAutoretrieveListGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/admin/autoretrieve/list', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the autoretrieveHeartbeatPost operation.
     * @callback module:api/AutoretrieveApi~autoretrieveHeartbeatPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Marks autoretrieve server as up
     * This endpoint updates the lastConnection field for autoretrieve
     * @param {String} token Autoretrieve's auth token
     * @param {module:api/AutoretrieveApi~autoretrieveHeartbeatPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.autoretrieveHeartbeatPost = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling autoretrieveHeartbeatPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
        'token': token
      };
      var formParams = {
      };

      var authNames = ['bearerAuth'];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/autoretrieve/heartbeat', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
