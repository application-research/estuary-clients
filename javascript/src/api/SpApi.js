/*
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.36
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {ApiStorageProviderResp} from '../model/ApiStorageProviderResp';
import {GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse} from '../model/GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse';
import {GithubComApplicationResearchEstuaryApiV2ClaimResponse} from '../model/GithubComApplicationResearchEstuaryApiV2ClaimResponse';
import {MinerClaimMinerBody} from '../model/MinerClaimMinerBody';
import {MinerMinerSetInfoParams} from '../model/MinerMinerSetInfoParams';
import {MinerSuspendMinerBody} from '../model/MinerSuspendMinerBody';
import {UtilHttpError} from '../model/UtilHttpError';

/**
* Sp service.
* @module api/SpApi
* @version 1.0.6
*/
export class SpApi {

    /**
    * Constructs a new SpApi. 
    * @alias module:api/SpApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the storageProvidersClaimPost operation.
     * @callback moduleapi/SpApi~storageProvidersClaimPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GithubComApplicationResearchEstuaryApiV2ClaimResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Claim Storage Provider
     * This endpoint lets a user claim a storage provider
     * @param {module:model/MinerClaimMinerBody} body Claim Storage Provider Body
     * @param {module:api/SpApi~storageProvidersClaimPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersClaimPost(body, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling storageProvidersClaimPost");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = GithubComApplicationResearchEstuaryApiV2ClaimResponse;

      return this.apiClient.callApi(
        '/storage-providers/claim', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersClaimSpGet operation.
     * @callback moduleapi/SpApi~storageProvidersClaimSpGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Claim Storage Provider
     * This endpoint lets a user get the message in order to claim a storage provider
     * @param {String} sp Storage Provider claim message
     * @param {module:api/SpApi~storageProvidersClaimSpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersClaimSpGet(sp, callback) {
      
      let postBody = null;
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersClaimSpGet");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GithubComApplicationResearchEstuaryApiV2ClaimMsgResponse;

      return this.apiClient.callApi(
        '/storage-providers/claim/{sp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersDealsSpGet operation.
     * @callback moduleapi/SpApi~storageProvidersDealsSpGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all storage providers deals
     * This endpoint returns all storage providers deals
     * @param {String} sp Filter by storage provider
     * @param {Object} opts Optional parameters
     * @param {String} opts.ignoreFailed Ignore Failed
     * @param {module:api/SpApi~storageProvidersDealsSpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersDealsSpGet(sp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersDealsSpGet");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        'ignore-failed': opts['ignoreFailed']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/storage-providers/deals/{sp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersFailuresSpGet operation.
     * @callback moduleapi/SpApi~storageProvidersFailuresSpGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @param {String} sp Filter by storage provider
     * @param {module:api/SpApi~storageProvidersFailuresSpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersFailuresSpGet(sp, callback) {
      
      let postBody = null;
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersFailuresSpGet");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/storage-providers/failures/{sp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersGet operation.
     * @callback moduleapi/SpApi~storageProvidersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ApiStorageProviderResp>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all storage providers
     * This endpoint returns all storage providers
     * @param {module:api/SpApi~storageProvidersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersGet(callback) {
      
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ApiStorageProviderResp];

      return this.apiClient.callApi(
        '/storage-providers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersSetInfoSpPut operation.
     * @callback moduleapi/SpApi~storageProvidersSetInfoSpPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set Storage Provider Info
     * This endpoint lets a user set storage provider info.
     * @param {module:model/MinerMinerSetInfoParams} body Storage Provider set info params
     * @param {String} sp Storage Provider to set info for
     * @param {module:api/SpApi~storageProvidersSetInfoSpPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageProvidersSetInfoSpPut(body, sp, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling storageProvidersSetInfoSpPut");
      }
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersSetInfoSpPut");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage-providers/set-info/{sp}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersStatsSpGet operation.
     * @callback moduleapi/SpApi~storageProvidersStatsSpGetCallback
     * @param {String} error Error message, if any.
     * @param {'String'{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get storage provider stats
     * This endpoint returns storage provider stats
     * @param {String} sp Filter by storage provider
     * @param {module:api/SpApi~storageProvidersStatsSpGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersStatsSpGet(sp, callback) {
      
      let postBody = null;
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersStatsSpGet");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';

      return this.apiClient.callApi(
        '/storage-providers/stats/{sp}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersSuspendSpPost operation.
     * @callback moduleapi/SpApi~storageProvidersSuspendSpPostCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {'String': 'String'}>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suspend Storage Provider
     * This endpoint lets a user suspend a storage provider.
     * @param {module:model/MinerSuspendMinerBody} body Suspend Storage Provider Body
     * @param {String} sp Storage Provider to suspend
     * @param {module:api/SpApi~storageProvidersSuspendSpPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    storageProvidersSuspendSpPost(body, sp, callback) {
      
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling storageProvidersSuspendSpPost");
      }
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersSuspendSpPost");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['*/*'];
      let accepts = ['application/json'];
      let returnType = {'String': 'String'};

      return this.apiClient.callApi(
        '/storage-providers/suspend/{sp}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the storageProvidersUnsuspendSpPut operation.
     * @callback moduleapi/SpApi~storageProvidersUnsuspendSpPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unuspend Storage Provider
     * This endpoint lets a user unsuspend a Storage Provider.
     * @param {String} sp Storage Provider to unsuspend
     * @param {module:api/SpApi~storageProvidersUnsuspendSpPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    storageProvidersUnsuspendSpPut(sp, callback) {
      
      let postBody = null;
      // verify the required parameter 'sp' is set
      if (sp === undefined || sp === null) {
        throw new Error("Missing the required parameter 'sp' when calling storageProvidersUnsuspendSpPut");
      }

      let pathParams = {
        'sp': sp
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/storage-providers/unsuspend/{sp}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}