---
swagger: "2.0"
info:
  description: "This is the API for the Estuary application."
  version: "0.0.0"
  title: "Estuary API"
  termsOfService: "http://estuary.tech"
  contact:
    name: "API Support"
    url: "https://docs.estuary.tech/feedback"
  license:
    name: "Apache 2.0 Apache-2.0 OR MIT"
    url: "https://github.com/application-research/estuary/blob/master/LICENSE.md"
host: "api.estuary.tech"
basePath: "/"
security:
- bearerAuth: []
paths:
  /admin/autoretrieve/init:
    post:
      tags:
      - "autoretrieve"
      summary: "Register autoretrieve server"
      description: "This endpoint registers a new autoretrieve server"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "addresses"
        description: "Autoretrieve's comma-separated list of addresses"
        required: true
        schema:
          type: "string"
      - in: "body"
        name: "pubKey"
        description: "Autoretrieve's public key"
        required: true
        schema:
          type: "string"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /admin/autoretrieve/list:
    get:
      tags:
      - "autoretrieve"
      summary: "List autoretrieve servers"
      description: "This endpoint lists all registered autoretrieve servers"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /admin/peering/peers:
    get:
      tags:
      - "admin"
      - "peering"
      - "peers"
      summary: "List all Peering peers"
      description: "This endpoint can be used to list all peers on Peering Service"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
    post:
      tags:
      - "admin"
      - "peering"
      - "peers"
      summary: "Add peers on Peering Service"
      description: "This endpoint can be used to add a Peer from the Peering Service"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
    delete:
      tags:
      - "admin"
      - "peering"
      - "peers"
      summary: "Remove peers on Peering Service"
      description: "This endpoint can be used to remove a Peer from the Peering Service"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /admin/peering/start:
    post:
      tags:
      - "admin"
      - "peering"
      - "peers"
      summary: "Start Peering"
      description: "This endpoint can be used to start the Peering Service"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /admin/peering/status:
    get:
      tags:
      - "admin"
      - "peering"
      - "peers"
      summary: "Check Peering Status"
      description: "This endpoint can be used to check the Peering status"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /admin/peering/stop:
    post:
      tags:
      - "admin"
      - "peering"
      - "peers"
      summary: "Stop Peering"
      description: "This endpoint can be used to stop the Peering Service"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /admin/system/config:
    get:
      tags:
      - "admin"
      summary: "Get systems(estuary/shuttle) config"
      description: "This endpoint is used to get system configs."
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /admin/users:
    get:
      tags:
      - "admin"
      summary: "Get all users"
      description: "This endpoint is used to get all users."
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /autoretrieve/heartbeat:
    post:
      tags:
      - "autoretrieve"
      summary: "Marks autoretrieve server as up"
      description: "This endpoint updates the lastConnection field for autoretrieve"
      produces:
      - "application/json"
      parameters:
      - name: "token"
        in: "header"
        description: "Autoretrieve's auth token"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /collections/:
    get:
      tags:
      - "collections"
      summary: "List all collections"
      description: "This endpoint is used to list all collections. Whenever a user\
        \ logs on estuary, it will list all collections that the user has access to.\
        \ This endpoint provides a way to list all collections to the user."
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "User ID"
        required: true
        type: "integer"
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/main.Collection"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.HttpError"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.HttpError"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.HttpError"
      x-accepts: "application/json"
    post:
      tags:
      - "collections"
      summary: "Create a new collection"
      description: "This endpoint is used to create a new collection. A collection\
        \ is a representaion of a group of objects added on the estuary. This endpoint\
        \ can be used to create a new collection."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Collection name and description"
        required: true
        schema:
          $ref: "#/definitions/main.createCollectionBody"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/main.Collection"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.HttpError"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.HttpError"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.HttpError"
      x-contentType: "application/json"
      x-accepts: "application/json"
  /collections/fs/add:
    post:
      tags:
      - "collections"
      summary: "Add a file to a collection"
      description: "This endpoint adds a file to a collection"
      produces:
      - "application/json"
      parameters:
      - name: "coluuid"
        in: "query"
        description: "Collection ID"
        required: true
        type: "string"
      - name: "content"
        in: "query"
        description: "Content"
        required: true
        type: "string"
      - name: "path"
        in: "query"
        description: "Path to file"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /collections/{coluuid}:
    get:
      tags:
      - "collections"
      summary: "Get contents in a collection"
      description: "This endpoint is used to get contents in a collection. If no colpath\
        \ query param is passed"
      produces:
      - "application/json"
      parameters:
      - name: "coluuid"
        in: "query"
        description: "Collection UUID"
        required: true
        type: "string"
      - name: "dir"
        in: "query"
        description: "Directory"
        required: false
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
      x-accepts: "application/json"
    post:
      tags:
      - "collections"
      summary: "Add contents to a collection"
      description: "This endpoint adds already-pinned contents (that have ContentIDs)\
        \ to a collection."
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Content IDs to add to collection"
        required: true
        schema:
          type: "array"
          items:
            type: "integer"
      responses:
        "200":
          description: "OK"
          schema:
            type: "object"
            additionalProperties:
              type: "string"
      x-contentType: "application/json"
      x-accepts: "application/json"
    delete:
      tags:
      - "collections"
      summary: "Deletes a collection"
      description: "This endpoint is used to delete an existing collection."
      parameters:
      - name: "coluuid"
        in: "path"
        description: "Collection ID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /collections/{coluuid}/commit:
    post:
      tags:
      - "collections"
      summary: "Produce a CID of the collection contents"
      description: "This endpoint is used to save the contents in a collection, producing\
        \ a top-level CID that references all the current CIDs in the collection."
      produces:
      - "application/json"
      parameters:
      - name: "coluuid"
        in: "path"
        description: "coluuid"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
      x-accepts: "application/json"
  /content/add:
    post:
      tags:
      - "content"
      summary: "Add new content"
      description: "This endpoint is used to upload new content."
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "file"
        in: "formData"
        description: "File to upload"
        required: true
        type: "file"
      - name: "coluuid"
        in: "path"
        description: "Collection UUID"
        required: true
        type: "string"
      - name: "dir"
        in: "path"
        description: "Directory"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/util.ContentAddResponse"
      x-contentType: "multipart/form-data"
      x-accepts: "application/json"
  /content/add-car:
    post:
      tags:
      - "content"
      summary: "Add Car object"
      description: "This endpoint is used to add a car object to the network. The\
        \ object can be a file or a directory."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Car"
        required: true
        schema:
          type: "string"
      - name: "filename"
        in: "query"
        description: "Filename"
        required: false
        type: "string"
      - name: "commp"
        in: "query"
        description: "Commp"
        required: false
        type: "string"
      - name: "size"
        in: "query"
        description: "Size"
        required: false
        type: "string"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /content/add-ipfs:
    post:
      tags:
      - "content"
      summary: "Add IPFS object"
      description: "This endpoint is used to add an IPFS object to the network. The\
        \ object can be a file or a directory."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "IPFS Body"
        required: true
        schema:
          $ref: "#/definitions/util.ContentAddIpfsBody"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /content/aggregated/{content}:
    get:
      tags:
      - "content"
      summary: "Get aggregated content stats"
      description: "This endpoint returns aggregated content stats"
      produces:
      - "application/json"
      parameters:
      - name: "content"
        in: "path"
        description: "Content ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
      x-accepts: "application/json"
  /content/all-deals:
    get:
      tags:
      - "content"
      summary: "Get all deals for a user"
      description: "This endpoint is used to get all deals for a user"
      produces:
      - "application/json"
      parameters:
      - name: "begin"
        in: "query"
        description: "Begin"
        required: true
        type: "string"
      - name: "duration"
        in: "query"
        description: "Duration"
        required: true
        type: "string"
      - name: "all"
        in: "query"
        description: "All"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /content/bw-usage/{content}:
    get:
      tags:
      - "content"
      summary: "Get content bandwidth"
      description: "This endpoint returns content bandwidth"
      produces:
      - "application/json"
      parameters:
      - name: "content"
        in: "path"
        description: "Content ID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /content/create:
    post:
      tags:
      - "content"
      summary: "Add a new content"
      description: "This endpoint adds a new content"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Content"
        required: true
        schema:
          type: "string"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /content/deals:
    get:
      tags:
      - "content"
      summary: "Content with deals"
      description: "This endpoint lists all content with deals"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        description: "Limit"
        required: false
        type: "integer"
      - name: "offset"
        in: "query"
        description: "Offset"
        required: false
        type: "integer"
      responses: {}
      x-accepts: "application/json"
  /content/ensure-replication/{datacid}:
    get:
      tags:
      - "content"
      summary: "Ensure Replication"
      description: "This endpoint ensures that the content is replicated to the specified\
        \ number of providers"
      produces:
      - "application/json"
      parameters:
      - name: "datacid"
        in: "path"
        description: "Data CID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /content/failures/{content}:
    get:
      tags:
      - "content"
      summary: "List all failures for a content"
      description: "This endpoint returns all failures for a content"
      produces:
      - "application/json"
      parameters:
      - name: "content"
        in: "path"
        description: "Content ID"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
      x-accepts: "application/json"
  /content/importdeal:
    post:
      tags:
      - "content"
      summary: "Import a deal"
      description: "This endpoint imports a deal into the shuttle."
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Import a deal"
        required: true
        schema:
          $ref: "#/definitions/main.importDealBody"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /content/list:
    get:
      tags:
      - "content"
      summary: "List all pinned content"
      description: "This endpoint lists all content"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      x-accepts: "application/json"
  /content/read/{cont}:
    get:
      tags:
      - "content"
      summary: "Read content"
      description: "This endpoint reads content from the blockstore"
      produces:
      - "application/json"
      parameters:
      - name: "cont"
        in: "path"
        description: "CID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /content/staging-zones:
    get:
      tags:
      - "content"
      summary: "Get staging zone for user"
      description: "This endpoint is used to get staging zone for user."
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /content/stats:
    get:
      tags:
      - "content"
      summary: "Get content statistics"
      description: "This endpoint is used to get content statistics. Every content\
        \ stored in the network (estuary) is tracked by a unique ID which can be used\
        \ to get information about the content. This endpoint will allow the consumer\
        \ to get the collected stats of a conten"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "path"
        description: "limit"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /content/status/{id}:
    get:
      tags:
      - "content"
      summary: "Content Status"
      description: "This endpoint returns the status of a content"
      produces:
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Content ID"
        required: true
        type: "integer"
      responses: {}
      x-accepts: "application/json"
  /deal/estimate:
    post:
      tags:
      - "deals"
      summary: "Estimate the cost of a deal"
      description: "This endpoint estimates the cost of a deal"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "The size of the deal in bytes, the replication factor, and the\
          \ duration of the deal in blocks"
        required: true
        schema:
          $ref: "#/definitions/main.estimateDealBody"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /deal/info/{dealid}:
    get:
      tags:
      - "deals"
      summary: "Get Deal Info"
      description: "This endpoint returns the deal info for a deal"
      produces:
      - "application/json"
      parameters:
      - name: "dealid"
        in: "path"
        description: "Deal ID"
        required: true
        type: "integer"
      responses: {}
      x-accepts: "application/json"
  /deal/proposal/{propcid}:
    get:
      tags:
      - "deals"
      summary: "Get Proposal"
      description: "This endpoint returns the proposal for a deal"
      produces:
      - "application/json"
      parameters:
      - name: "propcid"
        in: "path"
        description: "Proposal CID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /deal/query/{miner}:
    get:
      tags:
      - "deals"
      summary: "Query Ask"
      description: "This endpoint returns the ask for a given CID"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "CID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /deal/status-by-proposal/{propcid}:
    get:
      tags:
      - "deals"
      summary: "Get Deal Status by PropCid"
      description: "Get Deal Status by PropCid"
      produces:
      - "application/json"
      parameters:
      - name: "propcid"
        in: "path"
        description: "PropCid"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /deal/status/{miner}/{propcid}:
    get:
      tags:
      - "deals"
      summary: "Deal Status"
      description: "This endpoint returns the status of a deal"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "Miner"
        required: true
        type: "string"
      - name: "propcid"
        in: "path"
        description: "Proposal CID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /deal/transfer/in-progress:
    get:
      tags:
      - "deals"
      summary: "Transfer In Progress"
      description: "This endpoint returns the in-progress transfers"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /deal/transfer/status:
    post:
      tags:
      - "deals"
      summary: "Transfer Status"
      description: "This endpoint returns the status of a transfer"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /deals/failures:
    get:
      tags:
      - "deals"
      summary: "Get storage failures for user"
      description: "This endpoint returns a list of storage failures for user"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /deals/make/{miner}:
    post:
      tags:
      - "deals"
      summary: "Make Deal"
      description: "This endpoint makes a deal for a given content and miner"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "Miner"
        required: true
        type: "string"
      - in: "body"
        name: "dealRequest"
        description: "Deal Request"
        required: true
        schema:
          type: "string"
      responses: {}
      x-contentType: "application/json"
      x-accepts: "application/json"
  /deals/status/{deal}:
    get:
      tags:
      - "deals"
      summary: "Get Deal Status"
      description: "This endpoint returns the status of a deal"
      produces:
      - "application/json"
      parameters:
      - name: "deal"
        in: "path"
        description: "Deal ID"
        required: true
        type: "integer"
      responses: {}
      x-accepts: "application/json"
  /net/addrs:
    get:
      tags:
      - "net"
      summary: "Net Addrs"
      description: "This endpoint is used to get net addrs"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      x-accepts: "application/json"
  /pinning/pins:
    get:
      tags:
      - "pinning"
      summary: "List all pin status objects"
      description: "This endpoint lists all pin status objects"
      produces:
      - "application/json"
      parameters: []
      responses:
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.HttpError"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.HttpError"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.HttpError"
      x-accepts: "application/json"
    post:
      tags:
      - "pinning"
      summary: "Add and pin object"
      description: "This endpoint adds a pin to the IPFS daemon."
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "path"
        description: "cid"
        required: true
        type: "string"
      - name: "name"
        in: "path"
        description: "name"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /pinning/pins/{pinid}:
    get:
      tags:
      - "pinning"
      summary: "Get a pin status object"
      description: "This endpoint returns a pin status object."
      produces:
      - "application/json"
      parameters:
      - name: "pinid"
        in: "path"
        description: "cid"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
    post:
      tags:
      - "pinning"
      summary: "Replace a pinned object"
      description: "This endpoint replaces a pinned object."
      produces:
      - "application/json"
      parameters:
      - name: "pinid"
        in: "path"
        description: "Pin ID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
    delete:
      tags:
      - "pinning"
      summary: "Delete a pinned object"
      description: "This endpoint deletes a pinned object."
      produces:
      - "application/json"
      parameters:
      - name: "pinid"
        in: "path"
        description: "Pin ID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /public/by-cid/{cid}:
    get:
      tags:
      - "public"
      summary: "Get Content by Cid"
      description: "This endpoint returns the content associated with a CID"
      produces:
      - "application/json"
      parameters:
      - name: "cid"
        in: "path"
        description: "Cid"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /public/deals/failures:
    get:
      tags:
      - "deals"
      summary: "Get storage failures"
      description: "This endpoint returns a list of storage failures"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /public/info:
    get:
      tags:
      - "public"
      summary: "Get public node info"
      description: "This endpoint returns information about the node"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /public/metrics/deals-on-chain:
    get:
      tags:
      - "public"
      - "metrics"
      summary: "Get deal metrics"
      description: "This endpoint is used to get deal metrics"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /public/miners:
    get:
      tags:
      - "public"
      - "net"
      summary: "Get all miners"
      description: "This endpoint returns all miners"
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /public/miners/deals/{miner}:
    get:
      tags:
      - "public"
      - "miner"
      summary: "Get all miners deals"
      description: "This endpoint returns all miners deals"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "Filter by miner"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /public/miners/failures/{miner}:
    get:
      tags:
      - "public"
      - "net"
      summary: "Get all miners"
      description: "This endpoint returns all miners"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "Filter by miner"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /public/miners/stats/{miner}:
    get:
      tags:
      - "public"
      - "miner"
      summary: "Get miner stats"
      description: "This endpoint returns miner stats"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "Filter by miner"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /public/miners/storage/query/{miner}:
    get:
      tags:
      - "deals"
      summary: "Query Ask"
      description: "This endpoint returns the ask for a given CID"
      produces:
      - "application/json"
      parameters:
      - name: "miner"
        in: "path"
        description: "CID"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /public/net/addrs:
    get:
      tags:
      - "public"
      - "net"
      summary: "Net Addrs"
      description: "This endpoint is used to get net addrs"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      x-accepts: "application/json"
  /public/net/peers:
    get:
      tags:
      - "public"
      - "net"
      summary: "Net Peers"
      description: "This endpoint is used to get net peers"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              type: "string"
      x-accepts: "application/json"
  /public/stats:
    get:
      tags:
      - "public"
      summary: "Public stats"
      description: "This endpoint is used to get public stats."
      produces:
      - "application/json"
      parameters: []
      responses: {}
      x-accepts: "application/json"
  /user/api-keys:
    get:
      tags:
      - "User"
      summary: "Get API keys for a user"
      description: "This endpoint is used to get API keys for a user. In estuary,\
        \ each user can be given multiple API keys (tokens). This endpoint can be\
        \ used to retrieve all available API keys for a given user."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/main.getApiKeysResp"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.HttpError"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.HttpError"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.HttpError"
      x-accepts: "application/json"
    post:
      tags:
      - "User"
      summary: "Create API keys for a user"
      description: "This endpoint is used to create API keys for a user. In estuary,\
        \ each user is given an API key to access all features."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/main.getApiKeysResp"
        "400":
          description: "Bad Request"
          schema:
            $ref: "#/definitions/util.HttpError"
        "404":
          description: "Not Found"
          schema:
            $ref: "#/definitions/util.HttpError"
        "500":
          description: "Internal Server Error"
          schema:
            $ref: "#/definitions/util.HttpError"
      x-accepts: "application/json"
  /user/api-keys/{key}:
    delete:
      tags:
      - "User"
      summary: "Revoke a User API Key."
      description: "This endpoint is used to revoke a user API key. In estuary, every\
        \ user is assigned with an API key, this API key is generated and issued for\
        \ each user and is primarily use to access all estuary features. This endpoint\
        \ can be used to revoke the API key thats assigned to the user."
      produces:
      - "application/json"
      parameters:
      - name: "key"
        in: "path"
        description: "Key"
        required: true
        type: "string"
      responses: {}
      x-accepts: "application/json"
  /user/export:
    get:
      tags:
      - "User"
      summary: "Export user data"
      description: "This endpoint is used to get API keys for a user."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            type: "string"
      x-accepts: "application/json"
  /user/stats:
    get:
      tags:
      - "User"
      summary: "Create API keys for a user"
      description: "This endpoint is used to create API keys for a user."
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/main.userStatsResponse"
      x-accepts: "application/json"
securityDefinitions:
  bearerAuth:
    type: "apiKey"
    name: "Authorization"
    in: "header"
definitions:
  main.Collection:
    type: "object"
    properties:
      cid:
        type: "string"
      createdAt:
        type: "string"
      description:
        type: "string"
      name:
        type: "string"
      userId:
        type: "integer"
      uuid:
        type: "string"
    example:
      createdAt: "createdAt"
      name: "name"
      description: "description"
      userId: 0
      uuid: "uuid"
      cid: "cid"
  main.createCollectionBody:
    type: "object"
    properties:
      description:
        type: "string"
      name:
        type: "string"
  main.estimateDealBody:
    type: "object"
    properties:
      durationBlks:
        type: "integer"
      replication:
        type: "integer"
      size:
        type: "integer"
      verified:
        type: "boolean"
  main.getApiKeysResp:
    type: "object"
    properties:
      expiry:
        type: "string"
      token:
        type: "string"
    example:
      expiry: "expiry"
      token: "token"
  main.importDealBody:
    type: "object"
    properties:
      coluuid:
        type: "string"
      dealIDs:
        type: "array"
        items:
          type: "integer"
      dir:
        type: "string"
      name:
        type: "string"
  main.userStatsResponse:
    type: "object"
    properties:
      numPins:
        type: "integer"
      totalSize:
        type: "integer"
    example:
      totalSize: 6
      numPins: 0
  util.ContentAddIpfsBody:
    type: "object"
    properties:
      coluuid:
        type: "string"
      dir:
        type: "string"
      filename:
        type: "string"
      peers:
        type: "array"
        items:
          type: "string"
      root:
        type: "string"
  util.ContentAddResponse:
    type: "object"
    properties:
      cid:
        type: "string"
      estuaryId:
        type: "integer"
      providers:
        type: "array"
        items:
          type: "string"
      retrieval_url:
        type: "string"
    example:
      retrieval_url: "retrieval_url"
      estuaryId: 0
      providers:
      - "providers"
      - "providers"
      cid: "cid"
  util.HttpError:
    type: "object"
    properties:
      code:
        type: "integer"
      details:
        type: "string"
      reason:
        type: "string"
