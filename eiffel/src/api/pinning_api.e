note
 description:"[
		Estuary API
 		This is the API for the Estuary application.
  		OpenAPI spec version: 0.0.0
 	    

  	NOTE: This class is auto generated by the swagger code generator program.

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel swagger codegen", "src=https://github.com/swagger-api/swagger-codegen.git", "protocol=uri"

class
	PINNING_API

inherit

    API_I


feature -- API Access


	pinning_pins_get : detachable TYPES_IPFS_LIST_PIN_STATUS_RESPONSE
			-- List all pin status objects
			-- This endpoint lists all pin status objects
			-- 
			-- 
			-- Result TYPES_IPFS_LIST_PIN_STATUS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pinning/pins"


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"bearerAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TYPES_IPFS_LIST_PIN_STATUS_RESPONSE } l_response.data ({ TYPES_IPFS_LIST_PIN_STATUS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	pinning_pins_pinid_delete (pinid: STRING_32)
			-- Delete a pinned object
			-- This endpoint deletes a pinned object.
			-- 
			-- argument: pinid Pin ID (required)
			-- 
			-- 
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pinning/pins/{pinid}"
			l_path.replace_substring_all ("{"+"pinid"+"}", api_client.url_encode (pinid.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"bearerAuth">>)
			l_response := api_client.call_api (l_path, "Delete", l_request, agent serializer, Void)
			if l_response.has_error then
				last_error := l_response.error
			end
		end	

	pinning_pins_pinid_get (pinid: STRING_32): detachable TYPES_IPFS_PIN_STATUS_RESPONSE
			-- Get a pin status object
			-- This endpoint returns a pin status object.
			-- 
			-- argument: pinid cid (required)
			-- 
			-- 
			-- Result TYPES_IPFS_PIN_STATUS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			
			l_path := "/pinning/pins/{pinid}"
			l_path.replace_substring_all ("{"+"pinid"+"}", api_client.url_encode (pinid.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"bearerAuth">>)
			l_response := api_client.call_api (l_path, "Get", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TYPES_IPFS_PIN_STATUS_RESPONSE } l_response.data ({ TYPES_IPFS_PIN_STATUS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	pinning_pins_pinid_post (pinid: STRING_32; cid: STRING_32; name: STRING_32; origins: STRING_32; meta: STRING_32): detachable TYPES_IPFS_PIN_STATUS_RESPONSE
			-- Replace a pinned object
			-- This endpoint replaces a pinned object.
			-- 
			-- argument: pinid Pin ID (required)
			-- 
			-- argument: cid CID of new pin (required)
			-- 
			-- argument: name Name (filename) of new pin (optional)
			-- 
			-- argument: origins Origins of new pin (optional)
			-- 
			-- argument: meta Meta information of new pin (optional)
			-- 
			-- 
			-- Result TYPES_IPFS_PIN_STATUS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(meta)
			l_path := "/pinning/pins/{pinid}"
			l_path.replace_substring_all ("{"+"pinid"+"}", api_client.url_encode (pinid.out))


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"bearerAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TYPES_IPFS_PIN_STATUS_RESPONSE } l_response.data ({ TYPES_IPFS_PIN_STATUS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	

	pinning_pins_post (pin: TYPES_IPFS_PIN): detachable TYPES_IPFS_PIN_STATUS_RESPONSE
			-- Add and pin object
			-- This endpoint adds a pin to the IPFS daemon.
			-- 
			-- argument: pin Pin Body {cid:cid, name:name} (required)
			-- 
			-- 
			-- Result TYPES_IPFS_PIN_STATUS_RESPONSE
		require
		local
  			l_path: STRING
  			l_request: API_CLIENT_REQUEST
  			l_response: API_CLIENT_RESPONSE
		do
			reset_error
			create l_request
			l_request.set_body(pin)
			l_path := "/pinning/pins"


			if attached {STRING} api_client.select_header_accept (<<"application/json">>)  as l_accept then
				l_request.add_header(l_accept,"Accept");
			end
			l_request.add_header(api_client.select_header_content_type (<<>>),"Content-Type")
			l_request.set_auth_names (<<"bearerAuth">>)
			l_response := api_client.call_api (l_path, "Post", l_request, Void, agent deserializer)
			if l_response.has_error then
				last_error := l_response.error
			elseif attached { TYPES_IPFS_PIN_STATUS_RESPONSE } l_response.data ({ TYPES_IPFS_PIN_STATUS_RESPONSE }) as l_data then
				Result := l_data
			else
				create last_error.make ("Unknown error: Status response [ " + l_response.status.out + "]")
			end
		end	


end
