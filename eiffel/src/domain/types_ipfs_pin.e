note
 description:"[
		Estuary API
 		This is the API for the Estuary application.
  		OpenAPI spec version: 0.0.0
 	    

  	NOTE: This class is auto generated by the swagger code generator program.

 		 Do not edit the class manually.
 	]"
	date: "$Date$"
	revision: "$Revision$"
	EIS:"Eiffel swagger codegen", "src=https://github.com/swagger-api/swagger-codegen.git", "protocol=uri"
class TYPES_IPFS_PIN 

inherit

  ANY
      redefine
          out 
      end


feature --Access

    cid: detachable STRING_32 
      
    meta: detachable ANY 
      
    name: detachable STRING_32 
      
    origins: detachable LIST [STRING_32] 
      

feature -- Change Element  
 
    set_cid (a_name: like cid)
        -- Set 'cid' with 'a_name'.
      do
        cid := a_name
      ensure
        cid_set: cid = a_name		
      end

    set_meta (a_name: like meta)
        -- Set 'meta' with 'a_name'.
      do
        meta := a_name
      ensure
        meta_set: meta = a_name		
      end

    set_name (a_name: like name)
        -- Set 'name' with 'a_name'.
      do
        name := a_name
      ensure
        name_set: name = a_name		
      end

    set_origins (a_name: like origins)
        -- Set 'origins' with 'a_name'.
      do
        origins := a_name
      ensure
        origins_set: origins = a_name		
      end


 feature -- Status Report

    out: STRING
          -- <Precursor>
      do
        create Result.make_empty
        Result.append("%Nclass TYPES_IPFS_PIN%N")
        if attached cid as l_cid then
          Result.append ("%Ncid:")
          Result.append (l_cid.out)
          Result.append ("%N")    
        end  
        if attached meta as l_meta then
          Result.append ("%Nmeta:")
          Result.append (l_meta.out)
          Result.append ("%N")    
        end  
        if attached name as l_name then
          Result.append ("%Nname:")
          Result.append (l_name.out)
          Result.append ("%N")    
        end  
        if attached origins as l_origins then
          across l_origins as ic loop
            Result.append ("%N origins:")
            Result.append (ic.item.out)
            Result.append ("%N")
          end
        end 
      end
end


