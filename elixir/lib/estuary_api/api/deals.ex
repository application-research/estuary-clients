# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule EstuaryAPI.Api.Deals do
  @moduledoc """
  API calls for all endpoints tagged `Deals`.
  """

  alias EstuaryAPI.Connection
  import EstuaryAPI.RequestBuilder


  @doc """
  Estimate the cost of a deal
  This endpoint estimates the cost of a deal

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - body (MainEstimateDealBody): The size of the deal in bytes, the replication factor, and the duration of the deal in blocks
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_estimate_post(Tesla.Env.client, EstuaryAPI.Model.MainEstimateDealBody.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_estimate_post(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/deal/estimate")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get Deal Info
  This endpoint returns the deal info for a deal

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - dealid (integer()): Deal ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_info_dealid_get(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_info_dealid_get(connection, dealid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deal/info/#{dealid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get Proposal
  This endpoint returns the proposal for a deal

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - propcid (String.t): Proposal CID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_proposal_propcid_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_proposal_propcid_get(connection, propcid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deal/proposal/#{propcid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Query Ask
  This endpoint returns the ask for a given CID

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - miner (String.t): CID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_query_miner_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_query_miner_get(connection, miner, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deal/query/#{miner}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get Deal Status by PropCid
  Get Deal Status by PropCid

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - propcid (String.t): PropCid
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_status_by_proposal_propcid_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_status_by_proposal_propcid_get(connection, propcid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deal/status-by-proposal/#{propcid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deal Status
  This endpoint returns the status of a deal

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - miner (String.t): Miner
  - propcid (String.t): Proposal CID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_status_miner_propcid_get(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_status_miner_propcid_get(connection, miner, propcid, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deal/status/#{miner}/#{propcid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Transfer In Progress
  This endpoint returns the in-progress transfers

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_transfer_in_progress_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_transfer_in_progress_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deal/transfer/in-progress")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Transfer Status
  This endpoint returns the status of a transfer

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deal_transfer_status_post(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deal_transfer_status_post(connection, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/deal/transfer/status")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get storage failures for user
  This endpoint returns a list of storage failures for user

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deals_failures_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deals_failures_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deals/failures")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Make Deal
  This endpoint makes a deal for a given content and miner

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - miner (String.t): Miner
  - deal_request (String.t): Deal Request
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deals_make_miner_post(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deals_make_miner_post(connection, miner, deal_request, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/deals/make/#{miner}")
    |> add_param(:body, :"dealRequest", deal_request)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get Deal Status
  This endpoint returns the status of a deal

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - deal (integer()): Deal ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec deals_status_deal_get(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def deals_status_deal_get(connection, deal, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/deals/status/#{deal}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get storage failures
  This endpoint returns a list of storage failures

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec public_deals_failures_get(Tesla.Env.client, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def public_deals_failures_get(connection, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/public/deals/failures")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Query Ask
  This endpoint returns the ask for a given CID

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - miner (String.t): CID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec public_miners_storage_query_miner_get(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def public_miners_storage_query_miner_get(connection, miner, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/public/miners/storage/query/#{miner}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end
end
