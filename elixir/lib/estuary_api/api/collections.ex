# NOTE: This class is auto generated by the swagger code generator program.
# https://github.com/swagger-api/swagger-codegen.git
# Do not edit the class manually.

defmodule EstuaryAPI.Api.Collections do
  @moduledoc """
  API calls for all endpoints tagged `Collections`.
  """

  alias EstuaryAPI.Connection
  import EstuaryAPI.RequestBuilder


  @doc """
  Produce a CID of the collection contents
  This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - coluuid (String.t): coluuid
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %EstuaryAPI.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec collections_coluuid_commit_post(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def collections_coluuid_commit_post(connection, coluuid, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/collections/#{coluuid}/commit")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Deletes a collection
  This endpoint is used to delete an existing collection.

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - coluuid (String.t): Collection ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec collections_coluuid_delete(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def collections_coluuid_delete(connection, coluuid, _opts \\ []) do
    %{}
    |> method(:delete)
    |> url("/collections/#{coluuid}")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Get contents in a collection
  This endpoint is used to get contents in a collection. If no colpath query param is passed

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - coluuid (String.t): Collection UUID
  - opts (KeywordList): [optional] Optional parameters
    - :dir (String.t): Directory

  ## Returns

  {:ok, %EstuaryAPI.Model.String.t{}} on success
  {:error, info} on failure
  """
  @spec collections_coluuid_get(Tesla.Env.client, String.t, keyword()) :: {:ok, String.t} | {:error, Tesla.Env.t}
  def collections_coluuid_get(connection, coluuid, opts \\ []) do
    optional_params = %{
      :"dir" => :query
    }
    %{}
    |> method(:get)
    |> url("/collections/#{coluuid}")
    |> add_param(:query, :"coluuid", coluuid)
    |> add_optional_params(optional_params, opts)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  Add contents to a collection
  This endpoint adds already-pinned contents (that have ContentIDs) to a collection.

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - body ([integer()]): Content IDs to add to collection
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec collections_coluuid_post(Tesla.Env.client, list(Integer.t), keyword()) :: {:ok, map()} | {:error, Tesla.Env.t}
  def collections_coluuid_post(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/collections/#{coluuid}")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode()
  end

  @doc """
  Add a file to a collection
  This endpoint adds a file to a collection

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - coluuid (String.t): Collection ID
  - content (String.t): Content
  - path (String.t): Path to file
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %{}} on success
  {:error, info} on failure
  """
  @spec collections_fs_add_post(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:error, Tesla.Env.t}
  def collections_fs_add_post(connection, coluuid, content, path, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/collections/fs/add")
    |> add_param(:query, :"coluuid", coluuid)
    |> add_param(:query, :"content", content)
    |> add_param(:query, :"path", path)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(false)
  end

  @doc """
  List all collections
  This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - id (integer()): User ID
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, [%MainCollection{}, ...]} on success
  {:error, info} on failure
  """
  @spec collections_get(Tesla.Env.client, integer(), keyword()) :: {:ok, list(EstuaryAPI.Model.MainCollection.t)} | {:error, Tesla.Env.t}
  def collections_get(connection, id, _opts \\ []) do
    %{}
    |> method(:get)
    |> url("/collections/")
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode([%EstuaryAPI.Model.MainCollection{}])
  end

  @doc """
  Create a new collection
  This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.

  ## Parameters

  - connection (EstuaryAPI.Connection): Connection to server
  - body (MainCreateCollectionBody): Collection name and description
  - opts (KeywordList): [optional] Optional parameters

  ## Returns

  {:ok, %EstuaryAPI.Model.MainCollection{}} on success
  {:error, info} on failure
  """
  @spec collections_post(Tesla.Env.client, EstuaryAPI.Model.MainCreateCollectionBody.t, keyword()) :: {:ok, EstuaryAPI.Model.MainCollection.t} | {:error, Tesla.Env.t}
  def collections_post(connection, body, _opts \\ []) do
    %{}
    |> method(:post)
    |> url("/collections/")
    |> add_param(:body, :"body", body)
    |> Enum.into([])
    |> (&Connection.request(connection, &1)).()
    |> decode(%EstuaryAPI.Model.MainCollection{})
  end
end
