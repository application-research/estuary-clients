//
// PublicAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class PublicAPI: APIBase {
    /**
     Get Full Content by Cid
     - parameter cid: (path) Cid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCidGet(cid: String, completion: @escaping ((_ error: ErrorResponse?) -> Void)) {
        getCidGetWithRequestBuilder(cid: cid).execute { (response, error) -> Void in
            completion(error)
        }
    }


    /**
     Get Full Content by Cid
     - GET /get/{cid}
     - This endpoint returns the content associated with a CID
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - parameter cid: (path) Cid 
     - returns: RequestBuilder<Void> 
     */
    open class func getCidGetWithRequestBuilder(cid: String) -> RequestBuilder<Void> {
        var path = "/get/{cid}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get Content by Cid
     - parameter cid: (path) Cid 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicByCidCidGet(cid: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        publicByCidCidGetWithRequestBuilder(cid: cid).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Content by Cid
     - GET /public/by-cid/{cid}
     - This endpoint returns the content record associated with a CID
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter cid: (path) Cid 
     - returns: RequestBuilder<String> 
     */
    open class func publicByCidCidGetWithRequestBuilder(cid: String) -> RequestBuilder<String> {
        var path = "/public/by-cid/{cid}"
        let cidPreEscape = "\(cid)"
        let cidPostEscape = cidPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{cid}", with: cidPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get public node info
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicInfoGet(completion: @escaping ((_ data: ApiPublicNodeInfo?, _ error: ErrorResponse?) -> Void)) {
        publicInfoGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get public node info
     - GET /public/info
     - This endpoint returns information about the node
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "primaryAddress" : { }
}}]
     - returns: RequestBuilder<ApiPublicNodeInfo> 
     */
    open class func publicInfoGetWithRequestBuilder() -> RequestBuilder<ApiPublicNodeInfo> {
        let path = "/public/info"
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<ApiPublicNodeInfo>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get deal metrics
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicMetricsDealsOnChainGet(completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        publicMetricsDealsOnChainGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get deal metrics
     - GET /public/metrics/deals-on-chain
     - This endpoint is used to get deal metrics
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<String> 
     */
    open class func publicMetricsDealsOnChainGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/public/metrics/deals-on-chain"
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all miners deals
     - parameter miner: (path) Filter by miner 
     - parameter ignoreFailed: (query) Ignore Failed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicMinersDealsMinerGet(miner: String, ignoreFailed: String? = nil, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        publicMinersDealsMinerGetWithRequestBuilder(miner: miner, ignoreFailed: ignoreFailed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all miners deals
     - GET /public/miners/deals/{miner}
     - This endpoint returns all miners deals
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter miner: (path) Filter by miner 
     - parameter ignoreFailed: (query) Ignore Failed (optional)
     - returns: RequestBuilder<String> 
     */
    open class func publicMinersDealsMinerGetWithRequestBuilder(miner: String, ignoreFailed: String? = nil) -> RequestBuilder<String> {
        var path = "/public/miners/deals/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
                        "ignore-failed": ignoreFailed
        ])

        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all miners
     - parameter miner: (path) Filter by miner 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicMinersFailuresMinerGet(miner: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        publicMinersFailuresMinerGetWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all miners
     - GET /public/miners/failures/{miner}
     - This endpoint returns all miners
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter miner: (path) Filter by miner 
     - returns: RequestBuilder<String> 
     */
    open class func publicMinersFailuresMinerGetWithRequestBuilder(miner: String) -> RequestBuilder<String> {
        var path = "/public/miners/failures/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get miner stats
     - parameter miner: (path) Filter by miner 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicMinersStatsMinerGet(miner: String, completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        publicMinersStatsMinerGetWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get miner stats
     - GET /public/miners/stats/{miner}
     - This endpoint returns miner stats
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter miner: (path) Filter by miner 
     - returns: RequestBuilder<String> 
     */
    open class func publicMinersStatsMinerGetWithRequestBuilder(miner: String) -> RequestBuilder<String> {
        var path = "/public/miners/stats/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Net Addrs
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicNetAddrsGet(completion: @escaping ((_ data: [String]?, _ error: ErrorResponse?) -> Void)) {
        publicNetAddrsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Net Addrs
     - GET /public/net/addrs
     - This endpoint is used to get net addrs
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - returns: RequestBuilder<[String]> 
     */
    open class func publicNetAddrsGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/public/net/addrs"
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Net Peers
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicNetPeersGet(completion: @escaping ((_ data: [String]?, _ error: ErrorResponse?) -> Void)) {
        publicNetPeersGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Net Peers
     - GET /public/net/peers
     - This endpoint is used to get net peers
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=[ "", "" ]}]
     - returns: RequestBuilder<[String]> 
     */
    open class func publicNetPeersGetWithRequestBuilder() -> RequestBuilder<[String]> {
        let path = "/public/net/peers"
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[String]>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Public stats
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicStatsGet(completion: @escaping ((_ data: String?, _ error: ErrorResponse?) -> Void)) {
        publicStatsGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Public stats
     - GET /public/stats
     - This endpoint is used to get public stats.
     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - returns: RequestBuilder<String> 
     */
    open class func publicStatsGetWithRequestBuilder() -> RequestBuilder<String> {
        let path = "/public/stats"
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
