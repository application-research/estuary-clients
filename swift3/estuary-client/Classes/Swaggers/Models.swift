// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for case let (key, value) as (String, String) in rawHeader {
            header[key] = value
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        switch Decoders.decode(clazz: T.self, source: source, instance: nil) {
    	    case let .success(value):
                return .success(value)
            case let .failure(error):
                return .failure(error)
        }
    }

    static open func decode<T: RawRepresentable>(clazz: T.Type, source: AnyObject) -> Decoded<T> {
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }
        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> where T: RawRepresentable {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decodeOptional(clazz: T.self, source: sourceValue) {
                case let .success(value): if let value = value { values.append(value) }
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject>(clazz: T, source: AnyObject) -> Decoded<T?> where T.RawValue == U {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for [AddressAddress]
        Decoders.addDecoder(clazz: [AddressAddress].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AddressAddress]> in
            return Decoders.decode(clazz: [AddressAddress].self, source: source)
        }

        // Decoder for AddressAddress
        Decoders.addDecoder(clazz: AddressAddress.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AddressAddress> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AddressAddress() : instance as! AddressAddress
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AddressAddress", actual: "\(source)"))
            }
        }
        // Decoder for [ApiChannelIDParam]
        Decoders.addDecoder(clazz: [ApiChannelIDParam].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiChannelIDParam]> in
            return Decoders.decode(clazz: [ApiChannelIDParam].self, source: source)
        }

        // Decoder for ApiChannelIDParam
        Decoders.addDecoder(clazz: ApiChannelIDParam.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiChannelIDParam> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiChannelIDParam() : instance as! ApiChannelIDParam
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["initiator"] as AnyObject?) {
                case let .success(value): _result.initiator = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["responder"] as AnyObject?) {
                case let .success(value): _result.responder = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiChannelIDParam", actual: "\(source)"))
            }
        }
        // Decoder for [ApiClaimMsgResponse]
        Decoders.addDecoder(clazz: [ApiClaimMsgResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiClaimMsgResponse]> in
            return Decoders.decode(clazz: [ApiClaimMsgResponse].self, source: source)
        }

        // Decoder for ApiClaimMsgResponse
        Decoders.addDecoder(clazz: ApiClaimMsgResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiClaimMsgResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiClaimMsgResponse() : instance as! ApiClaimMsgResponse
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hexmsg"] as AnyObject?) {
                case let .success(value): _result.hexmsg = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiClaimMsgResponse", actual: "\(source)"))
            }
        }
        // Decoder for [ApiClaimResponse]
        Decoders.addDecoder(clazz: [ApiClaimResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiClaimResponse]> in
            return Decoders.decode(clazz: [ApiClaimResponse].self, source: source)
        }

        // Decoder for ApiClaimResponse
        Decoders.addDecoder(clazz: ApiClaimResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiClaimResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiClaimResponse() : instance as! ApiClaimResponse
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["success"] as AnyObject?) {
                case let .success(value): _result.success = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiClaimResponse", actual: "\(source)"))
            }
        }
        // Decoder for [ApiCreateCollectionBody]
        Decoders.addDecoder(clazz: [ApiCreateCollectionBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiCreateCollectionBody]> in
            return Decoders.decode(clazz: [ApiCreateCollectionBody].self, source: source)
        }

        // Decoder for ApiCreateCollectionBody
        Decoders.addDecoder(clazz: ApiCreateCollectionBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiCreateCollectionBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiCreateCollectionBody() : instance as! ApiCreateCollectionBody
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiCreateCollectionBody", actual: "\(source)"))
            }
        }
        // Decoder for [ApiDeleteContentFromCollectionBody]
        Decoders.addDecoder(clazz: [ApiDeleteContentFromCollectionBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiDeleteContentFromCollectionBody]> in
            return Decoders.decode(clazz: [ApiDeleteContentFromCollectionBody].self, source: source)
        }

        // Decoder for ApiDeleteContentFromCollectionBody
        Decoders.addDecoder(clazz: ApiDeleteContentFromCollectionBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiDeleteContentFromCollectionBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiDeleteContentFromCollectionBody() : instance as! ApiDeleteContentFromCollectionBody
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["by"] as AnyObject?) {
                case let .success(value): _result.by = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?) {
                case let .success(value): _result.value = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiDeleteContentFromCollectionBody", actual: "\(source)"))
            }
        }
        // Decoder for [ApiEmptyResp]
        Decoders.addDecoder(clazz: [ApiEmptyResp].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiEmptyResp]> in
            return Decoders.decode(clazz: [ApiEmptyResp].self, source: source)
        }

        // Decoder for ApiEmptyResp
        Decoders.addDecoder(clazz: ApiEmptyResp.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiEmptyResp> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiEmptyResp() : instance as! ApiEmptyResp
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiEmptyResp", actual: "\(source)"))
            }
        }
        // Decoder for [ApiEstimateDealBody]
        Decoders.addDecoder(clazz: [ApiEstimateDealBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiEstimateDealBody]> in
            return Decoders.decode(clazz: [ApiEstimateDealBody].self, source: source)
        }

        // Decoder for ApiEstimateDealBody
        Decoders.addDecoder(clazz: ApiEstimateDealBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiEstimateDealBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiEstimateDealBody() : instance as! ApiEstimateDealBody
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationBlks"] as AnyObject?) {
                case let .success(value): _result.durationBlks = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["replication"] as AnyObject?) {
                case let .success(value): _result.replication = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                case let .success(value): _result.size = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"] as AnyObject?) {
                case let .success(value): _result.verified = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiEstimateDealBody", actual: "\(source)"))
            }
        }
        // Decoder for [ApiGetApiKeysResp]
        Decoders.addDecoder(clazz: [ApiGetApiKeysResp].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiGetApiKeysResp]> in
            return Decoders.decode(clazz: [ApiGetApiKeysResp].self, source: source)
        }

        // Decoder for ApiGetApiKeysResp
        Decoders.addDecoder(clazz: ApiGetApiKeysResp.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiGetApiKeysResp> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiGetApiKeysResp() : instance as! ApiGetApiKeysResp
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["expiry"] as AnyObject?) {
                case let .success(value): _result.expiry = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["label"] as AnyObject?) {
                case let .success(value): _result.label = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["token"] as AnyObject?) {
                case let .success(value): _result.token = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["tokenHash"] as AnyObject?) {
                case let .success(value): _result.tokenHash = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiGetApiKeysResp", actual: "\(source)"))
            }
        }
        // Decoder for [ApiMinerResp]
        Decoders.addDecoder(clazz: [ApiMinerResp].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiMinerResp]> in
            return Decoders.decode(clazz: [ApiMinerResp].self, source: source)
        }

        // Decoder for ApiMinerResp
        Decoders.addDecoder(clazz: ApiMinerResp.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiMinerResp> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiMinerResp() : instance as! ApiMinerResp
                switch Decoders.decodeOptional(clazz: AddressAddress.self, source: sourceDictionary["addr"] as AnyObject?) {
                case let .success(value): _result.addr = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: MinerMinerChainInfo.self, source: sourceDictionary["chain_info"] as AnyObject?) {
                case let .success(value): _result.chainInfo = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["suspended"] as AnyObject?) {
                case let .success(value): _result.suspended = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["suspendedReason"] as AnyObject?) {
                case let .success(value): _result.suspendedReason = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["version"] as AnyObject?) {
                case let .success(value): _result.version = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiMinerResp", actual: "\(source)"))
            }
        }
        // Decoder for [ApiPublicNodeInfo]
        Decoders.addDecoder(clazz: [ApiPublicNodeInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ApiPublicNodeInfo]> in
            return Decoders.decode(clazz: [ApiPublicNodeInfo].self, source: source)
        }

        // Decoder for ApiPublicNodeInfo
        Decoders.addDecoder(clazz: ApiPublicNodeInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ApiPublicNodeInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ApiPublicNodeInfo() : instance as! ApiPublicNodeInfo
                switch Decoders.decodeOptional(clazz: AddressAddress.self, source: sourceDictionary["primaryAddress"] as AnyObject?) {
                case let .success(value): _result.primaryAddress = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ApiPublicNodeInfo", actual: "\(source)"))
            }
        }
        // Decoder for [AutoretrieveInitBody]
        Decoders.addDecoder(clazz: [AutoretrieveInitBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[AutoretrieveInitBody]> in
            return Decoders.decode(clazz: [AutoretrieveInitBody].self, source: source)
        }

        // Decoder for AutoretrieveInitBody
        Decoders.addDecoder(clazz: AutoretrieveInitBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AutoretrieveInitBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? AutoretrieveInitBody() : instance as! AutoretrieveInitBody
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["addresses"] as AnyObject?) {
                case let .success(value): _result.addresses = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pubKey"] as AnyObject?) {
                case let .success(value): _result.pubKey = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "AutoretrieveInitBody", actual: "\(source)"))
            }
        }
        // Decoder for [CidCid]
        Decoders.addDecoder(clazz: [CidCid].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CidCid]> in
            return Decoders.decode(clazz: [CidCid].self, source: source)
        }

        // Decoder for CidCid
        Decoders.addDecoder(clazz: CidCid.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CidCid> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? CidCid() : instance as! CidCid
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "CidCid", actual: "\(source)"))
            }
        }
        // Decoder for [CollectionsCidType]
        Decoders.addDecoder(clazz: [CollectionsCidType].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CollectionsCidType]> in
            return Decoders.decode(clazz: [CollectionsCidType].self, source: source)
        }

        // Decoder for CollectionsCidType
        Decoders.addDecoder(clazz: CollectionsCidType.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CollectionsCidType> in
            //TODO: I don't think we need this anymore
            return Decoders.decode(clazz: CollectionsCidType.self, source: source, instance: instance)
        }
        // Decoder for [CollectionsCollection]
        Decoders.addDecoder(clazz: [CollectionsCollection].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CollectionsCollection]> in
            return Decoders.decode(clazz: [CollectionsCollection].self, source: source)
        }

        // Decoder for CollectionsCollection
        Decoders.addDecoder(clazz: CollectionsCollection.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CollectionsCollection> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? CollectionsCollection() : instance as! CollectionsCollection
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"] as AnyObject?) {
                case let .success(value): _result.cid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdAt"] as AnyObject?) {
                case let .success(value): _result.createdAt = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                case let .success(value): _result.description = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["userId"] as AnyObject?) {
                case let .success(value): _result.userId = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uuid"] as AnyObject?) {
                case let .success(value): _result.uuid = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "CollectionsCollection", actual: "\(source)"))
            }
        }
        // Decoder for [CollectionsCollectionListResponse]
        Decoders.addDecoder(clazz: [CollectionsCollectionListResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[CollectionsCollectionListResponse]> in
            return Decoders.decode(clazz: [CollectionsCollectionListResponse].self, source: source)
        }

        // Decoder for CollectionsCollectionListResponse
        Decoders.addDecoder(clazz: CollectionsCollectionListResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CollectionsCollectionListResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? CollectionsCollectionListResponse() : instance as! CollectionsCollectionListResponse
                switch Decoders.decodeOptional(clazz: UtilDbCID.self, source: sourceDictionary["cid"] as AnyObject?) {
                case let .success(value): _result.cid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coluuid"] as AnyObject?) {
                case let .success(value): _result.coluuid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contId"] as AnyObject?) {
                case let .success(value): _result.contId = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dir"] as AnyObject?) {
                case let .success(value): _result.dir = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                case let .success(value): _result.size = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: CollectionsCidType.self, source: sourceDictionary["type"] as AnyObject?) {
                case let .success(value): _result.type = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["updatedAt"] as AnyObject?) {
                case let .success(value): _result.updatedAt = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "CollectionsCollectionListResponse", actual: "\(source)"))
            }
        }
        // Decoder for [ContentAddBody]
        Decoders.addDecoder(clazz: [ContentAddBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[ContentAddBody]> in
            return Decoders.decode(clazz: [ContentAddBody].self, source: source)
        }

        // Decoder for ContentAddBody
        Decoders.addDecoder(clazz: ContentAddBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ContentAddBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? ContentAddBody() : instance as! ContentAddBody
                switch Decoders.decodeOptional(clazz: Data.self, source: sourceDictionary["data"] as AnyObject?) {
                case let .success(value): _result.data = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["filename"] as AnyObject?) {
                case let .success(value): _result.filename = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "ContentAddBody", actual: "\(source)"))
            }
        }
        // Decoder for [MinerClaimMinerBody]
        Decoders.addDecoder(clazz: [MinerClaimMinerBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MinerClaimMinerBody]> in
            return Decoders.decode(clazz: [MinerClaimMinerBody].self, source: source)
        }

        // Decoder for MinerClaimMinerBody
        Decoders.addDecoder(clazz: MinerClaimMinerBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MinerClaimMinerBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MinerClaimMinerBody() : instance as! MinerClaimMinerBody
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["claim"] as AnyObject?) {
                case let .success(value): _result.claim = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: AddressAddress.self, source: sourceDictionary["miner"] as AnyObject?) {
                case let .success(value): _result.miner = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MinerClaimMinerBody", actual: "\(source)"))
            }
        }
        // Decoder for [MinerMinerChainInfo]
        Decoders.addDecoder(clazz: [MinerMinerChainInfo].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MinerMinerChainInfo]> in
            return Decoders.decode(clazz: [MinerMinerChainInfo].self, source: source)
        }

        // Decoder for MinerMinerChainInfo
        Decoders.addDecoder(clazz: MinerMinerChainInfo.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MinerMinerChainInfo> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MinerMinerChainInfo() : instance as! MinerMinerChainInfo
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["addresses"] as AnyObject?) {
                case let .success(value): _result.addresses = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"] as AnyObject?) {
                case let .success(value): _result.owner = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["peerId"] as AnyObject?) {
                case let .success(value): _result.peerId = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["worker"] as AnyObject?) {
                case let .success(value): _result.worker = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MinerMinerChainInfo", actual: "\(source)"))
            }
        }
        // Decoder for [MinerMinerSetInfoParams]
        Decoders.addDecoder(clazz: [MinerMinerSetInfoParams].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MinerMinerSetInfoParams]> in
            return Decoders.decode(clazz: [MinerMinerSetInfoParams].self, source: source)
        }

        // Decoder for MinerMinerSetInfoParams
        Decoders.addDecoder(clazz: MinerMinerSetInfoParams.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MinerMinerSetInfoParams> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MinerMinerSetInfoParams() : instance as! MinerMinerSetInfoParams
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MinerMinerSetInfoParams", actual: "\(source)"))
            }
        }
        // Decoder for [MinerSuspendMinerBody]
        Decoders.addDecoder(clazz: [MinerSuspendMinerBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[MinerSuspendMinerBody]> in
            return Decoders.decode(clazz: [MinerSuspendMinerBody].self, source: source)
        }

        // Decoder for MinerSuspendMinerBody
        Decoders.addDecoder(clazz: MinerSuspendMinerBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MinerSuspendMinerBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? MinerSuspendMinerBody() : instance as! MinerSuspendMinerBody
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?) {
                case let .success(value): _result.reason = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "MinerSuspendMinerBody", actual: "\(source)"))
            }
        }
        // Decoder for [PeeringPeeringPeer]
        Decoders.addDecoder(clazz: [PeeringPeeringPeer].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[PeeringPeeringPeer]> in
            return Decoders.decode(clazz: [PeeringPeeringPeer].self, source: source)
        }

        // Decoder for PeeringPeeringPeer
        Decoders.addDecoder(clazz: PeeringPeeringPeer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PeeringPeeringPeer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? PeeringPeeringPeer() : instance as! PeeringPeeringPeer
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["Addrs"] as AnyObject?) {
                case let .success(value): _result.addrs = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["Connected"] as AnyObject?) {
                case let .success(value): _result.connected = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ID"] as AnyObject?) {
                case let .success(value): _result.ID = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "PeeringPeeringPeer", actual: "\(source)"))
            }
        }
        // Decoder for [TypesIpfsListPinStatusResponse]
        Decoders.addDecoder(clazz: [TypesIpfsListPinStatusResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TypesIpfsListPinStatusResponse]> in
            return Decoders.decode(clazz: [TypesIpfsListPinStatusResponse].self, source: source)
        }

        // Decoder for TypesIpfsListPinStatusResponse
        Decoders.addDecoder(clazz: TypesIpfsListPinStatusResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TypesIpfsListPinStatusResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TypesIpfsListPinStatusResponse() : instance as! TypesIpfsListPinStatusResponse
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?) {
                case let .success(value): _result.count = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [TypesIpfsPinStatusResponse].self, source: sourceDictionary["results"] as AnyObject?) {
                case let .success(value): _result.results = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TypesIpfsListPinStatusResponse", actual: "\(source)"))
            }
        }
        // Decoder for [TypesIpfsPin]
        Decoders.addDecoder(clazz: [TypesIpfsPin].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TypesIpfsPin]> in
            return Decoders.decode(clazz: [TypesIpfsPin].self, source: source)
        }

        // Decoder for TypesIpfsPin
        Decoders.addDecoder(clazz: TypesIpfsPin.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TypesIpfsPin> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TypesIpfsPin() : instance as! TypesIpfsPin
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"] as AnyObject?) {
                case let .success(value): _result.cid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["meta"] as AnyObject?) {
                case let .success(value): _result.meta = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["origins"] as AnyObject?) {
                case let .success(value): _result.origins = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TypesIpfsPin", actual: "\(source)"))
            }
        }
        // Decoder for [TypesIpfsPinStatusResponse]
        Decoders.addDecoder(clazz: [TypesIpfsPinStatusResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TypesIpfsPinStatusResponse]> in
            return Decoders.decode(clazz: [TypesIpfsPinStatusResponse].self, source: source)
        }

        // Decoder for TypesIpfsPinStatusResponse
        Decoders.addDecoder(clazz: TypesIpfsPinStatusResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TypesIpfsPinStatusResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? TypesIpfsPinStatusResponse() : instance as! TypesIpfsPinStatusResponse
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["created"] as AnyObject?) {
                case let .success(value): _result.created = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["delegates"] as AnyObject?) {
                case let .success(value): _result.delegates = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Any.self, source: sourceDictionary["info"] as AnyObject?) {
                case let .success(value): _result.info = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: TypesIpfsPin.self, source: sourceDictionary["pin"] as AnyObject?) {
                case let .success(value): _result.pin = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["requestid"] as AnyObject?) {
                case let .success(value): _result.requestid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: TypesPinningStatus.self, source: sourceDictionary["status"] as AnyObject?) {
                case let .success(value): _result.status = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "TypesIpfsPinStatusResponse", actual: "\(source)"))
            }
        }
        // Decoder for [TypesPinningStatus]
        Decoders.addDecoder(clazz: [TypesPinningStatus].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[TypesPinningStatus]> in
            return Decoders.decode(clazz: [TypesPinningStatus].self, source: source)
        }

        // Decoder for TypesPinningStatus
        Decoders.addDecoder(clazz: TypesPinningStatus.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<TypesPinningStatus> in
            //TODO: I don't think we need this anymore
            return Decoders.decode(clazz: TypesPinningStatus.self, source: source, instance: instance)
        }
        // Decoder for [UtilContentAddResponse]
        Decoders.addDecoder(clazz: [UtilContentAddResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilContentAddResponse]> in
            return Decoders.decode(clazz: [UtilContentAddResponse].self, source: source)
        }

        // Decoder for UtilContentAddResponse
        Decoders.addDecoder(clazz: UtilContentAddResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilContentAddResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UtilContentAddResponse() : instance as! UtilContentAddResponse
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["cid"] as AnyObject?) {
                case let .success(value): _result.cid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estuaryId"] as AnyObject?) {
                case let .success(value): _result.estuaryId = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["estuary_retrieval_url"] as AnyObject?) {
                case let .success(value): _result.estuaryRetrievalUrl = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["providers"] as AnyObject?) {
                case let .success(value): _result.providers = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["retrieval_url"] as AnyObject?) {
                case let .success(value): _result.retrievalUrl = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UtilContentAddResponse", actual: "\(source)"))
            }
        }
        // Decoder for [UtilContentCreateBody]
        Decoders.addDecoder(clazz: [UtilContentCreateBody].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilContentCreateBody]> in
            return Decoders.decode(clazz: [UtilContentCreateBody].self, source: source)
        }

        // Decoder for UtilContentCreateBody
        Decoders.addDecoder(clazz: UtilContentCreateBody.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilContentCreateBody> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UtilContentCreateBody() : instance as! UtilContentCreateBody
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["coluuid"] as AnyObject?) {
                case let .success(value): _result.coluuid = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["dir"] as AnyObject?) {
                case let .success(value): _result.dir = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["location"] as AnyObject?) {
                case let .success(value): _result.location = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                case let .success(value): _result.name = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["overwrite"] as AnyObject?) {
                case let .success(value): _result.overwrite = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["root"] as AnyObject?) {
                case let .success(value): _result.root = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: UtilContentType.self, source: sourceDictionary["type"] as AnyObject?) {
                case let .success(value): _result.type = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UtilContentCreateBody", actual: "\(source)"))
            }
        }
        // Decoder for [UtilContentType]
        Decoders.addDecoder(clazz: [UtilContentType].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilContentType]> in
            return Decoders.decode(clazz: [UtilContentType].self, source: source)
        }

        // Decoder for UtilContentType
        Decoders.addDecoder(clazz: UtilContentType.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilContentType> in
            //TODO: I don't think we need this anymore
            return Decoders.decode(clazz: UtilContentType.self, source: source, instance: instance)
        }
        // Decoder for [UtilDbCID]
        Decoders.addDecoder(clazz: [UtilDbCID].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilDbCID]> in
            return Decoders.decode(clazz: [UtilDbCID].self, source: source)
        }

        // Decoder for UtilDbCID
        Decoders.addDecoder(clazz: UtilDbCID.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilDbCID> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UtilDbCID() : instance as! UtilDbCID
                switch Decoders.decodeOptional(clazz: CidCid.self, source: sourceDictionary["cid"] as AnyObject?) {
                case let .success(value): _result.cid = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UtilDbCID", actual: "\(source)"))
            }
        }
        // Decoder for [UtilHttpError]
        Decoders.addDecoder(clazz: [UtilHttpError].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilHttpError]> in
            return Decoders.decode(clazz: [UtilHttpError].self, source: source)
        }

        // Decoder for UtilHttpError
        Decoders.addDecoder(clazz: UtilHttpError.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilHttpError> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UtilHttpError() : instance as! UtilHttpError
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["code"] as AnyObject?) {
                case let .success(value): _result.code = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["details"] as AnyObject?) {
                case let .success(value): _result.details = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["reason"] as AnyObject?) {
                case let .success(value): _result.reason = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UtilHttpError", actual: "\(source)"))
            }
        }
        // Decoder for [UtilUserSettings]
        Decoders.addDecoder(clazz: [UtilUserSettings].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilUserSettings]> in
            return Decoders.decode(clazz: [UtilUserSettings].self, source: source)
        }

        // Decoder for UtilUserSettings
        Decoders.addDecoder(clazz: UtilUserSettings.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilUserSettings> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UtilUserSettings() : instance as! UtilUserSettings
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["contentAddingDisabled"] as AnyObject?) {
                case let .success(value): _result.contentAddingDisabled = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["dealDuration"] as AnyObject?) {
                case let .success(value): _result.dealDuration = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["dealMakingDisabled"] as AnyObject?) {
                case let .success(value): _result.dealMakingDisabled = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["fileStagingThreshold"] as AnyObject?) {
                case let .success(value): _result.fileStagingThreshold = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["flags"] as AnyObject?) {
                case let .success(value): _result.flags = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["replication"] as AnyObject?) {
                case let .success(value): _result.replication = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["uploadEndpoints"] as AnyObject?) {
                case let .success(value): _result.uploadEndpoints = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["verified"] as AnyObject?) {
                case let .success(value): _result.verified = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UtilUserSettings", actual: "\(source)"))
            }
        }
        // Decoder for [UtilViewerResponse]
        Decoders.addDecoder(clazz: [UtilViewerResponse].self) { (source: AnyObject, instance: AnyObject?) -> Decoded<[UtilViewerResponse]> in
            return Decoders.decode(clazz: [UtilViewerResponse].self, source: source)
        }

        // Decoder for UtilViewerResponse
        Decoders.addDecoder(clazz: UtilViewerResponse.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UtilViewerResponse> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let _result = instance == nil ? UtilViewerResponse() : instance as! UtilViewerResponse
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["address"] as AnyObject?) {
                case let .success(value): _result.address = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["auth_expiry"] as AnyObject?) {
                case let .success(value): _result.authExpiry = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                case let .success(value): _result.id = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["miners"] as AnyObject?) {
                case let .success(value): _result.miners = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["perms"] as AnyObject?) {
                case let .success(value): _result.perms = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: UtilUserSettings.self, source: sourceDictionary["settings"] as AnyObject?) {
                case let .success(value): _result.settings = value
                case let .failure(error): break
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["username"] as AnyObject?) {
                case let .success(value): _result.username = value
                case let .failure(error): break
                }
                return .success(_result)
            } else {
                return .failure(.typeMismatch(expected: "UtilViewerResponse", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
