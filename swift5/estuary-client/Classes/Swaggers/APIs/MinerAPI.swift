//
// MinerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class MinerAPI {
    /**
     Get Claim Miner Message

     - parameter miner: (path) Miner claim message 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func minerClaimMinerGet(miner: String, completion: @escaping ((_ data: ApiClaimMsgResponse?,_ error: Error?) -> Void)) {
        minerClaimMinerGetWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get Claim Miner Message
     - GET /miner/claim/{miner}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "hexmsg" : "hexmsg"
}}]
     - parameter miner: (path) Miner claim message 

     - returns: RequestBuilder<ApiClaimMsgResponse> 
     */
    open class func minerClaimMinerGetWithRequestBuilder(miner: String) -> RequestBuilder<ApiClaimMsgResponse> {
        var path = "/miner/claim/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiClaimMsgResponse>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Claim Miner

     - parameter body: (body) Claim Miner Body 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func minerClaimPost(body: MinerClaimMinerBody, completion: @escaping ((_ data: ApiClaimResponse?,_ error: Error?) -> Void)) {
        minerClaimPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Claim Miner
     - POST /miner/claim

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={
  "success" : true
}}]
     - parameter body: (body) Claim Miner Body 

     - returns: RequestBuilder<ApiClaimResponse> 
     */
    open class func minerClaimPostWithRequestBuilder(body: MinerClaimMinerBody) -> RequestBuilder<ApiClaimResponse> {
        let path = "/miner/claim"
        let URLString = estuary-clientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiClaimResponse>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Set Miner Info

     - parameter body: (body) Miner set info params 
     - parameter miner: (path) Miner to set info for 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func minerSetInfoMinerPut(body: MinerMinerSetInfoParams, miner: String, completion: @escaping ((_ data: ApiEmptyResp?,_ error: Error?) -> Void)) {
        minerSetInfoMinerPutWithRequestBuilder(body: body, miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Set Miner Info
     - PUT /miner/set-info/{miner}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={ }}]
     - parameter body: (body) Miner set info params 
     - parameter miner: (path) Miner to set info for 

     - returns: RequestBuilder<ApiEmptyResp> 
     */
    open class func minerSetInfoMinerPutWithRequestBuilder(body: MinerMinerSetInfoParams, miner: String) -> RequestBuilder<ApiEmptyResp> {
        var path = "/miner/set-info/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiEmptyResp>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Suspend Miner

     - parameter body: (body) Suspend Miner Body 
     - parameter miner: (path) Miner to suspend 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func minerSuspendMinerPost(body: MinerSuspendMinerBody, miner: String, completion: @escaping ((_ data: ApiEmptyResp?,_ error: Error?) -> Void)) {
        minerSuspendMinerPostWithRequestBuilder(body: body, miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Suspend Miner
     - POST /miner/suspend/{miner}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={ }}]
     - parameter body: (body) Suspend Miner Body 
     - parameter miner: (path) Miner to suspend 

     - returns: RequestBuilder<ApiEmptyResp> 
     */
    open class func minerSuspendMinerPostWithRequestBuilder(body: MinerSuspendMinerBody, miner: String) -> RequestBuilder<ApiEmptyResp> {
        var path = "/miner/suspend/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiEmptyResp>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Unuspend Miner

     - parameter miner: (path) Miner to unsuspend 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func minerUnsuspendMinerPut(miner: String, completion: @escaping ((_ data: ApiEmptyResp?,_ error: Error?) -> Void)) {
        minerUnsuspendMinerPutWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Unuspend Miner
     - PUT /miner/unsuspend/{miner}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example={ }}]
     - parameter miner: (path) Miner to unsuspend 

     - returns: RequestBuilder<ApiEmptyResp> 
     */
    open class func minerUnsuspendMinerPutWithRequestBuilder(miner: String) -> RequestBuilder<ApiEmptyResp> {
        var path = "/miner/unsuspend/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ApiEmptyResp>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get all miners deals

     - parameter miner: (path) Filter by miner 
     - parameter ignoreFailed: (query) Ignore Failed (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicMinersDealsMinerGet(miner: String, ignoreFailed: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        publicMinersDealsMinerGetWithRequestBuilder(miner: miner, ignoreFailed: ignoreFailed).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get all miners deals
     - GET /public/miners/deals/{miner}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter miner: (path) Filter by miner 
     - parameter ignoreFailed: (query) Ignore Failed (optional)

     - returns: RequestBuilder<String> 
     */
    open class func publicMinersDealsMinerGetWithRequestBuilder(miner: String, ignoreFailed: String? = nil) -> RequestBuilder<String> {
        var path = "/public/miners/deals/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "ignore-failed": ignoreFailed
        ])


        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Get miner stats

     - parameter miner: (path) Filter by miner 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func publicMinersStatsMinerGet(miner: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        publicMinersStatsMinerGetWithRequestBuilder(miner: miner).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Get miner stats
     - GET /public/miners/stats/{miner}

     - API Key:
       - type: apiKey Authorization 
       - name: bearerAuth
     - examples: [{contentType=application/json, example=""}]
     - parameter miner: (path) Filter by miner 

     - returns: RequestBuilder<String> 
     */
    open class func publicMinersStatsMinerGetWithRequestBuilder(miner: String) -> RequestBuilder<String> {
        var path = "/public/miners/stats/{miner}"
        let minerPreEscape = "\(miner)"
        let minerPostEscape = minerPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{miner}", with: minerPostEscape, options: .literal, range: nil)
        let URLString = estuary-clientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = estuary-clientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
