/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#pragma once

#include "SwaggerBaseModel.h"
#include "SwaggerContentApi.h"

#include "SwaggerHelpers.h"
#include "SwaggerMain_importDealBody.h"
#include "SwaggerUtil_ContentAddIpfsBody.h"
#include "SwaggerUtil_ContentAddResponse.h"
#include "SwaggerUtil_ContentCreateBody.h"
#include "SwaggerUtil_HttpError.h"

namespace Swagger 
{

/* Add Car object
 *
 * This endpoint is used to add a car object to the network. The object can be a file or a directory.
*/
class SWAGGER_API SwaggerContentApi::ContentAddCarPostRequest : public Request
{
public:
    virtual ~ContentAddCarPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Car */
	FString Body;
	/* Ignore Dupes */
	TOptional<FString> IgnoreDupes;
	/* Filename */
	TOptional<FString> Filename;
};

class SWAGGER_API SwaggerContentApi::ContentAddCarPostResponse : public Response
{
public:
    virtual ~ContentAddCarPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Add IPFS object
 *
 * This endpoint is used to add an IPFS object to the network. The object can be a file or a directory.
*/
class SWAGGER_API SwaggerContentApi::ContentAddIpfsPostRequest : public Request
{
public:
    virtual ~ContentAddIpfsPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* IPFS Body */
	SwaggerUtil_ContentAddIpfsBody Body;
	/* Ignore Dupes */
	TOptional<FString> IgnoreDupes;
};

class SWAGGER_API SwaggerContentApi::ContentAddIpfsPostResponse : public Response
{
public:
    virtual ~ContentAddIpfsPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Add new content
 *
 * This endpoint is used to upload new content.
*/
class SWAGGER_API SwaggerContentApi::ContentAddPostRequest : public Request
{
public:
    virtual ~ContentAddPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* File to upload */
	HttpFileInput Data;
	/* Filenam to use for upload */
	TOptional<FString> Filename;
	/* Collection UUID */
	TOptional<FString> Coluuid;
	/* Replication value */
	TOptional<int32> Replication;
	/* Ignore Dupes true/false */
	TOptional<FString> IgnoreDupes;
	/* Lazy Provide true/false */
	TOptional<FString> LazyProvide;
	/* Directory */
	TOptional<FString> Dir;
};

class SWAGGER_API SwaggerContentApi::ContentAddPostResponse : public Response
{
public:
    virtual ~ContentAddPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    SwaggerUtil_ContentAddResponse Content;
};

/* Get aggregated content stats
 *
 * This endpoint returns aggregated content stats
*/
class SWAGGER_API SwaggerContentApi::ContentAggregatedContentGetRequest : public Request
{
public:
    virtual ~ContentAggregatedContentGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Content ID */
	FString Content;
};

class SWAGGER_API SwaggerContentApi::ContentAggregatedContentGetResponse : public Response
{
public:
    virtual ~ContentAggregatedContentGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Get all deals for a user
 *
 * This endpoint is used to get all deals for a user
*/
class SWAGGER_API SwaggerContentApi::ContentAllDealsGetRequest : public Request
{
public:
    virtual ~ContentAllDealsGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Begin */
	FString Begin;
	/* Duration */
	FString Duration;
	/* All */
	FString All;
};

class SWAGGER_API SwaggerContentApi::ContentAllDealsGetResponse : public Response
{
public:
    virtual ~ContentAllDealsGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Get content bandwidth
 *
 * This endpoint returns content bandwidth
*/
class SWAGGER_API SwaggerContentApi::ContentBwUsageContentGetRequest : public Request
{
public:
    virtual ~ContentBwUsageContentGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Content ID */
	FString Content;
};

class SWAGGER_API SwaggerContentApi::ContentBwUsageContentGetResponse : public Response
{
public:
    virtual ~ContentBwUsageContentGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Add a new content
 *
 * This endpoint adds a new content
*/
class SWAGGER_API SwaggerContentApi::ContentCreatePostRequest : public Request
{
public:
    virtual ~ContentCreatePostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Content */
	SwaggerUtil_ContentCreateBody Req;
	/* Ignore Dupes */
	TOptional<FString> IgnoreDupes;
};

class SWAGGER_API SwaggerContentApi::ContentCreatePostResponse : public Response
{
public:
    virtual ~ContentCreatePostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Content with deals
 *
 * This endpoint lists all content with deals
*/
class SWAGGER_API SwaggerContentApi::ContentDealsGetRequest : public Request
{
public:
    virtual ~ContentDealsGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Limit */
	TOptional<int32> Limit;
	/* Offset */
	TOptional<int32> Offset;
};

class SWAGGER_API SwaggerContentApi::ContentDealsGetResponse : public Response
{
public:
    virtual ~ContentDealsGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Ensure Replication
 *
 * This endpoint ensures that the content is replicated to the specified number of providers
*/
class SWAGGER_API SwaggerContentApi::ContentEnsureReplicationDatacidGetRequest : public Request
{
public:
    virtual ~ContentEnsureReplicationDatacidGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Data CID */
	FString Datacid;
};

class SWAGGER_API SwaggerContentApi::ContentEnsureReplicationDatacidGetResponse : public Response
{
public:
    virtual ~ContentEnsureReplicationDatacidGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* List all failures for a content
 *
 * This endpoint returns all failures for a content
*/
class SWAGGER_API SwaggerContentApi::ContentFailuresContentGetRequest : public Request
{
public:
    virtual ~ContentFailuresContentGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Content ID */
	FString Content;
};

class SWAGGER_API SwaggerContentApi::ContentFailuresContentGetResponse : public Response
{
public:
    virtual ~ContentFailuresContentGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Content
 *
 * This endpoint returns a content by its ID
*/
class SWAGGER_API SwaggerContentApi::ContentIdGetRequest : public Request
{
public:
    virtual ~ContentIdGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Content ID */
	int32 Id;
};

class SWAGGER_API SwaggerContentApi::ContentIdGetResponse : public Response
{
public:
    virtual ~ContentIdGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Import a deal
 *
 * This endpoint imports a deal into the shuttle.
*/
class SWAGGER_API SwaggerContentApi::ContentImportdealPostRequest : public Request
{
public:
    virtual ~ContentImportdealPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Import a deal */
	SwaggerMain_importDealBody Body;
};

class SWAGGER_API SwaggerContentApi::ContentImportdealPostResponse : public Response
{
public:
    virtual ~ContentImportdealPostResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* List all pinned content
 *
 * This endpoint lists all content
*/
class SWAGGER_API SwaggerContentApi::ContentListGetRequest : public Request
{
public:
    virtual ~ContentListGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerContentApi::ContentListGetResponse : public Response
{
public:
    virtual ~ContentListGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Read content
 *
 * This endpoint reads content from the blockstore
*/
class SWAGGER_API SwaggerContentApi::ContentReadContGetRequest : public Request
{
public:
    virtual ~ContentReadContGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* CID */
	FString Cont;
};

class SWAGGER_API SwaggerContentApi::ContentReadContGetResponse : public Response
{
public:
    virtual ~ContentReadContGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Get staging zone for user
 *
 * This endpoint is used to get staging zone for user.
*/
class SWAGGER_API SwaggerContentApi::ContentStagingZonesGetRequest : public Request
{
public:
    virtual ~ContentStagingZonesGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerContentApi::ContentStagingZonesGetResponse : public Response
{
public:
    virtual ~ContentStagingZonesGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Get content statistics
 *
 * This endpoint is used to get content statistics. Every content stored in the network (estuary) is tracked by a unique ID which can be used to get information about the content. This endpoint will allow the consumer to get the collected stats of a conten
*/
class SWAGGER_API SwaggerContentApi::ContentStatsGetRequest : public Request
{
public:
    virtual ~ContentStatsGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* limit */
	FString Limit;
	/* offset */
	FString Offset;
};

class SWAGGER_API SwaggerContentApi::ContentStatsGetResponse : public Response
{
public:
    virtual ~ContentStatsGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

/* Content Status
 *
 * This endpoint returns the status of a content
*/
class SWAGGER_API SwaggerContentApi::ContentStatusIdGetRequest : public Request
{
public:
    virtual ~ContentStatusIdGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
	/* Content ID */
	int32 Id;
};

class SWAGGER_API SwaggerContentApi::ContentStatusIdGetResponse : public Response
{
public:
    virtual ~ContentStatusIdGetResponse() {}
	void SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode) final;
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    FString Content;
};

}
