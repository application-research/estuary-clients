/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#pragma once

#include "SwaggerBaseModel.h"
#include "SwaggerPeersApi.h"


namespace Swagger 
{

/* Remove peers on Peering Service
 *
 * This endpoint can be used to remove a Peer from the Peering Service
*/
class SWAGGER_API SwaggerPeersApi::AdminPeeringPeersDeleteRequest : public Request
{
public:
    virtual ~AdminPeeringPeersDeleteRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerPeersApi::AdminPeeringPeersDeleteResponse : public Response
{
public:
    virtual ~AdminPeeringPeersDeleteResponse() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* List all Peering peers
 *
 * This endpoint can be used to list all peers on Peering Service
*/
class SWAGGER_API SwaggerPeersApi::AdminPeeringPeersGetRequest : public Request
{
public:
    virtual ~AdminPeeringPeersGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerPeersApi::AdminPeeringPeersGetResponse : public Response
{
public:
    virtual ~AdminPeeringPeersGetResponse() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Add peers on Peering Service
 *
 * This endpoint can be used to add a Peer from the Peering Service
*/
class SWAGGER_API SwaggerPeersApi::AdminPeeringPeersPostRequest : public Request
{
public:
    virtual ~AdminPeeringPeersPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerPeersApi::AdminPeeringPeersPostResponse : public Response
{
public:
    virtual ~AdminPeeringPeersPostResponse() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Start Peering
 *
 * This endpoint can be used to start the Peering Service
*/
class SWAGGER_API SwaggerPeersApi::AdminPeeringStartPostRequest : public Request
{
public:
    virtual ~AdminPeeringStartPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerPeersApi::AdminPeeringStartPostResponse : public Response
{
public:
    virtual ~AdminPeeringStartPostResponse() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Check Peering Status
 *
 * This endpoint can be used to check the Peering status
*/
class SWAGGER_API SwaggerPeersApi::AdminPeeringStatusGetRequest : public Request
{
public:
    virtual ~AdminPeeringStatusGetRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerPeersApi::AdminPeeringStatusGetResponse : public Response
{
public:
    virtual ~AdminPeeringStatusGetResponse() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

/* Stop Peering
 *
 * This endpoint can be used to stop the Peering Service
*/
class SWAGGER_API SwaggerPeersApi::AdminPeeringStopPostRequest : public Request
{
public:
    virtual ~AdminPeeringStopPostRequest() {}
	void SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const final;
	FString ComputePath() const final;
    
};

class SWAGGER_API SwaggerPeersApi::AdminPeeringStopPostResponse : public Response
{
public:
    virtual ~AdminPeeringStopPostResponse() {}
	bool FromJson(const TSharedPtr<FJsonValue>& JsonObject) final;
    
    
};

}
