/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerDealsApi.h"

#include "SwaggerDealsApiOperations.h"
#include "SwaggerModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace Swagger 
{

SwaggerDealsApi::SwaggerDealsApi() 
: Url(TEXT("https://api.estuary.tech"))
{
}

SwaggerDealsApi::~SwaggerDealsApi() {}

void SwaggerDealsApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void SwaggerDealsApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void SwaggerDealsApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool SwaggerDealsApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogSwagger, Error, TEXT("SwaggerDealsApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void SwaggerDealsApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType == TEXT("application/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType == TEXT("text/plain"))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogSwagger, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

bool SwaggerDealsApi::DealEstimatePost(const DealEstimatePostRequest& Request, const FDealEstimatePostDelegate& Delegate /*= FDealEstimatePostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealEstimatePostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealEstimatePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealEstimatePostDelegate Delegate) const
{
	DealEstimatePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealInfoDealidGet(const DealInfoDealidGetRequest& Request, const FDealInfoDealidGetDelegate& Delegate /*= FDealInfoDealidGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealInfoDealidGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealInfoDealidGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealInfoDealidGetDelegate Delegate) const
{
	DealInfoDealidGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealProposalPropcidGet(const DealProposalPropcidGetRequest& Request, const FDealProposalPropcidGetDelegate& Delegate /*= FDealProposalPropcidGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealProposalPropcidGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealProposalPropcidGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealProposalPropcidGetDelegate Delegate) const
{
	DealProposalPropcidGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealQueryMinerGet(const DealQueryMinerGetRequest& Request, const FDealQueryMinerGetDelegate& Delegate /*= FDealQueryMinerGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealQueryMinerGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealQueryMinerGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealQueryMinerGetDelegate Delegate) const
{
	DealQueryMinerGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealStatusByProposalPropcidGet(const DealStatusByProposalPropcidGetRequest& Request, const FDealStatusByProposalPropcidGetDelegate& Delegate /*= FDealStatusByProposalPropcidGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealStatusByProposalPropcidGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealStatusByProposalPropcidGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealStatusByProposalPropcidGetDelegate Delegate) const
{
	DealStatusByProposalPropcidGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealStatusMinerPropcidGet(const DealStatusMinerPropcidGetRequest& Request, const FDealStatusMinerPropcidGetDelegate& Delegate /*= FDealStatusMinerPropcidGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealStatusMinerPropcidGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealStatusMinerPropcidGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealStatusMinerPropcidGetDelegate Delegate) const
{
	DealStatusMinerPropcidGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealTransferInProgressGet(const DealTransferInProgressGetRequest& Request, const FDealTransferInProgressGetDelegate& Delegate /*= FDealTransferInProgressGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealTransferInProgressGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealTransferInProgressGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealTransferInProgressGetDelegate Delegate) const
{
	DealTransferInProgressGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealTransferStatusPost(const DealTransferStatusPostRequest& Request, const FDealTransferStatusPostDelegate& Delegate /*= FDealTransferStatusPostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealTransferStatusPostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealTransferStatusPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealTransferStatusPostDelegate Delegate) const
{
	DealTransferStatusPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealsFailuresGet(const DealsFailuresGetRequest& Request, const FDealsFailuresGetDelegate& Delegate /*= FDealsFailuresGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealsFailuresGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealsFailuresGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealsFailuresGetDelegate Delegate) const
{
	DealsFailuresGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealsMakeMinerPost(const DealsMakeMinerPostRequest& Request, const FDealsMakeMinerPostDelegate& Delegate /*= FDealsMakeMinerPostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealsMakeMinerPostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealsMakeMinerPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealsMakeMinerPostDelegate Delegate) const
{
	DealsMakeMinerPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::DealsStatusDealGet(const DealsStatusDealGetRequest& Request, const FDealsStatusDealGetDelegate& Delegate /*= FDealsStatusDealGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnDealsStatusDealGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnDealsStatusDealGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FDealsStatusDealGetDelegate Delegate) const
{
	DealsStatusDealGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::PublicDealsFailuresGet(const PublicDealsFailuresGetRequest& Request, const FPublicDealsFailuresGetDelegate& Delegate /*= FPublicDealsFailuresGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnPublicDealsFailuresGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnPublicDealsFailuresGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicDealsFailuresGetDelegate Delegate) const
{
	PublicDealsFailuresGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerDealsApi::PublicMinersStorageQueryMinerGet(const PublicMinersStorageQueryMinerGetRequest& Request, const FPublicMinersStorageQueryMinerGetDelegate& Delegate /*= FPublicMinersStorageQueryMinerGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerDealsApi::OnPublicMinersStorageQueryMinerGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerDealsApi::OnPublicMinersStorageQueryMinerGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicMinersStorageQueryMinerGetDelegate Delegate) const
{
	PublicMinersStorageQueryMinerGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
