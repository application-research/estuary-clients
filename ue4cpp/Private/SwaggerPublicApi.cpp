/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerPublicApi.h"

#include "SwaggerPublicApiOperations.h"
#include "SwaggerModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace Swagger 
{

SwaggerPublicApi::SwaggerPublicApi() 
: Url(TEXT("https://api.estuary.tech"))
{
}

SwaggerPublicApi::~SwaggerPublicApi() {}

void SwaggerPublicApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void SwaggerPublicApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void SwaggerPublicApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool SwaggerPublicApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogSwagger, Error, TEXT("SwaggerPublicApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void SwaggerPublicApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType == TEXT("application/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType == TEXT("text/plain"))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogSwagger, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

bool SwaggerPublicApi::PublicByCidCidGet(const PublicByCidCidGetRequest& Request, const FPublicByCidCidGetDelegate& Delegate /*= FPublicByCidCidGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicByCidCidGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicByCidCidGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicByCidCidGetDelegate Delegate) const
{
	PublicByCidCidGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicInfoGet(const PublicInfoGetRequest& Request, const FPublicInfoGetDelegate& Delegate /*= FPublicInfoGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicInfoGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicInfoGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicInfoGetDelegate Delegate) const
{
	PublicInfoGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicMetricsDealsOnChainGet(const PublicMetricsDealsOnChainGetRequest& Request, const FPublicMetricsDealsOnChainGetDelegate& Delegate /*= FPublicMetricsDealsOnChainGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicMetricsDealsOnChainGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicMetricsDealsOnChainGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicMetricsDealsOnChainGetDelegate Delegate) const
{
	PublicMetricsDealsOnChainGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicMinersDealsMinerGet(const PublicMinersDealsMinerGetRequest& Request, const FPublicMinersDealsMinerGetDelegate& Delegate /*= FPublicMinersDealsMinerGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicMinersDealsMinerGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicMinersDealsMinerGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicMinersDealsMinerGetDelegate Delegate) const
{
	PublicMinersDealsMinerGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicMinersFailuresMinerGet(const PublicMinersFailuresMinerGetRequest& Request, const FPublicMinersFailuresMinerGetDelegate& Delegate /*= FPublicMinersFailuresMinerGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicMinersFailuresMinerGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicMinersFailuresMinerGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicMinersFailuresMinerGetDelegate Delegate) const
{
	PublicMinersFailuresMinerGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicMinersGet(const PublicMinersGetRequest& Request, const FPublicMinersGetDelegate& Delegate /*= FPublicMinersGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicMinersGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicMinersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicMinersGetDelegate Delegate) const
{
	PublicMinersGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicMinersStatsMinerGet(const PublicMinersStatsMinerGetRequest& Request, const FPublicMinersStatsMinerGetDelegate& Delegate /*= FPublicMinersStatsMinerGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicMinersStatsMinerGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicMinersStatsMinerGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicMinersStatsMinerGetDelegate Delegate) const
{
	PublicMinersStatsMinerGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicNetAddrsGet(const PublicNetAddrsGetRequest& Request, const FPublicNetAddrsGetDelegate& Delegate /*= FPublicNetAddrsGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicNetAddrsGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicNetAddrsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicNetAddrsGetDelegate Delegate) const
{
	PublicNetAddrsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicNetPeersGet(const PublicNetPeersGetRequest& Request, const FPublicNetPeersGetDelegate& Delegate /*= FPublicNetPeersGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicNetPeersGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicNetPeersGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicNetPeersGetDelegate Delegate) const
{
	PublicNetPeersGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerPublicApi::PublicStatsGet(const PublicStatsGetRequest& Request, const FPublicStatsGetDelegate& Delegate /*= FPublicStatsGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerPublicApi::OnPublicStatsGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerPublicApi::OnPublicStatsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FPublicStatsGetDelegate Delegate) const
{
	PublicStatsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
