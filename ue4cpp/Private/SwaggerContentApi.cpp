/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerContentApi.h"

#include "SwaggerContentApiOperations.h"
#include "SwaggerModule.h"

#include "HttpModule.h"
#include "Serialization/JsonSerializer.h"

namespace Swagger 
{

SwaggerContentApi::SwaggerContentApi() 
: Url(TEXT("https://api.estuary.tech"))
{
}

SwaggerContentApi::~SwaggerContentApi() {}

void SwaggerContentApi::SetURL(const FString& InUrl)
{
	Url = InUrl;
}

void SwaggerContentApi::AddHeaderParam(const FString& Key, const FString& Value)
{
	AdditionalHeaderParams.Add(Key, Value);
}

void SwaggerContentApi::ClearHeaderParams()
{
	AdditionalHeaderParams.Reset();
}

bool SwaggerContentApi::IsValid() const
{
	if (Url.IsEmpty())
	{
		UE_LOG(LogSwagger, Error, TEXT("SwaggerContentApi: Endpoint Url is not set, request cannot be performed"));
		return false;
	}

	return true;
}

void SwaggerContentApi::HandleResponse(FHttpResponsePtr HttpResponse, bool bSucceeded, Response& InOutResponse) const
{
	InOutResponse.SetHttpResponse(HttpResponse);
	InOutResponse.SetSuccessful(bSucceeded);

	if (bSucceeded && HttpResponse.IsValid())
	{
		InOutResponse.SetHttpResponseCode((EHttpResponseCodes::Type)HttpResponse->GetResponseCode());
		FString ContentType = HttpResponse->GetContentType();
		FString Content;

		if (ContentType == TEXT("application/json"))
		{
			Content = HttpResponse->GetContentAsString();

			TSharedPtr<FJsonValue> JsonValue;
			auto Reader = TJsonReaderFactory<>::Create(Content);

			if (FJsonSerializer::Deserialize(Reader, JsonValue) && JsonValue.IsValid())
			{
				if (InOutResponse.FromJson(JsonValue))
					return; // Successfully parsed
			}
		}
		else if(ContentType == TEXT("text/plain"))
		{
			Content = HttpResponse->GetContentAsString();
			InOutResponse.SetResponseString(Content);
			return; // Successfully parsed
		}

		// Report the parse error but do not mark the request as unsuccessful. Data could be partial or malformed, but the request succeeded.
		UE_LOG(LogSwagger, Error, TEXT("Failed to deserialize Http response content (type:%s):\n%s"), *ContentType , *Content);
		return;
	}

	// By default, assume we failed to establish connection
	InOutResponse.SetHttpResponseCode(EHttpResponseCodes::RequestTimeout);
}

bool SwaggerContentApi::ContentAddCarPost(const ContentAddCarPostRequest& Request, const FContentAddCarPostDelegate& Delegate /*= FContentAddCarPostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentAddCarPostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentAddCarPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentAddCarPostDelegate Delegate) const
{
	ContentAddCarPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentAddIpfsPost(const ContentAddIpfsPostRequest& Request, const FContentAddIpfsPostDelegate& Delegate /*= FContentAddIpfsPostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentAddIpfsPostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentAddIpfsPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentAddIpfsPostDelegate Delegate) const
{
	ContentAddIpfsPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentAddPost(const ContentAddPostRequest& Request, const FContentAddPostDelegate& Delegate /*= FContentAddPostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentAddPostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentAddPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentAddPostDelegate Delegate) const
{
	ContentAddPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentAggregatedContentGet(const ContentAggregatedContentGetRequest& Request, const FContentAggregatedContentGetDelegate& Delegate /*= FContentAggregatedContentGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentAggregatedContentGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentAggregatedContentGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentAggregatedContentGetDelegate Delegate) const
{
	ContentAggregatedContentGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentAllDealsGet(const ContentAllDealsGetRequest& Request, const FContentAllDealsGetDelegate& Delegate /*= FContentAllDealsGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentAllDealsGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentAllDealsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentAllDealsGetDelegate Delegate) const
{
	ContentAllDealsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentBwUsageContentGet(const ContentBwUsageContentGetRequest& Request, const FContentBwUsageContentGetDelegate& Delegate /*= FContentBwUsageContentGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentBwUsageContentGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentBwUsageContentGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentBwUsageContentGetDelegate Delegate) const
{
	ContentBwUsageContentGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentCreatePost(const ContentCreatePostRequest& Request, const FContentCreatePostDelegate& Delegate /*= FContentCreatePostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentCreatePostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentCreatePostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentCreatePostDelegate Delegate) const
{
	ContentCreatePostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentDealsGet(const ContentDealsGetRequest& Request, const FContentDealsGetDelegate& Delegate /*= FContentDealsGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentDealsGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentDealsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentDealsGetDelegate Delegate) const
{
	ContentDealsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentEnsureReplicationDatacidGet(const ContentEnsureReplicationDatacidGetRequest& Request, const FContentEnsureReplicationDatacidGetDelegate& Delegate /*= FContentEnsureReplicationDatacidGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentEnsureReplicationDatacidGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentEnsureReplicationDatacidGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentEnsureReplicationDatacidGetDelegate Delegate) const
{
	ContentEnsureReplicationDatacidGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentFailuresContentGet(const ContentFailuresContentGetRequest& Request, const FContentFailuresContentGetDelegate& Delegate /*= FContentFailuresContentGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentFailuresContentGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentFailuresContentGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentFailuresContentGetDelegate Delegate) const
{
	ContentFailuresContentGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentImportdealPost(const ContentImportdealPostRequest& Request, const FContentImportdealPostDelegate& Delegate /*= FContentImportdealPostDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentImportdealPostResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentImportdealPostResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentImportdealPostDelegate Delegate) const
{
	ContentImportdealPostResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentListGet(const ContentListGetRequest& Request, const FContentListGetDelegate& Delegate /*= FContentListGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentListGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentListGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentListGetDelegate Delegate) const
{
	ContentListGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentReadContGet(const ContentReadContGetRequest& Request, const FContentReadContGetDelegate& Delegate /*= FContentReadContGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentReadContGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentReadContGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentReadContGetDelegate Delegate) const
{
	ContentReadContGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentStagingZonesGet(const ContentStagingZonesGetRequest& Request, const FContentStagingZonesGetDelegate& Delegate /*= FContentStagingZonesGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentStagingZonesGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentStagingZonesGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentStagingZonesGetDelegate Delegate) const
{
	ContentStagingZonesGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentStatsGet(const ContentStatsGetRequest& Request, const FContentStatsGetDelegate& Delegate /*= FContentStatsGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentStatsGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentStatsGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentStatsGetDelegate Delegate) const
{
	ContentStatsGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

bool SwaggerContentApi::ContentStatusIdGet(const ContentStatusIdGetRequest& Request, const FContentStatusIdGetDelegate& Delegate /*= FContentStatusIdGetDelegate()*/) const
{
	if (!IsValid())
		return false;

	TSharedRef<IHttpRequest> HttpRequest = FHttpModule::Get().CreateRequest();
	HttpRequest->SetURL(*(Url + Request.ComputePath()));

	for(const auto& It : AdditionalHeaderParams)
	{
		HttpRequest->SetHeader(It.Key, It.Value);
	}

	Request.SetupHttpRequest(HttpRequest);
	
	HttpRequest->OnProcessRequestComplete().BindRaw(this, &SwaggerContentApi::OnContentStatusIdGetResponse, Delegate);
	return HttpRequest->ProcessRequest();
}

void SwaggerContentApi::OnContentStatusIdGetResponse(FHttpRequestPtr HttpRequest, FHttpResponsePtr HttpResponse, bool bSucceeded, FContentStatusIdGetDelegate Delegate) const
{
	ContentStatusIdGetResponse Response;
	HandleResponse(HttpResponse, bSucceeded, Response);
	Delegate.ExecuteIfBound(Response);
}

}
