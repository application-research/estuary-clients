/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ApipublicNodeInfo
import io.swagger.client.models.UtilHttpError

import estuary-client.infrastructure.*

class PublicApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Get Full Content by Cid
     * This endpoint returns the content associated with a CID
     * @param cid Cid 
     * @return void
     */
    fun getCidGet(cid: kotlin.String): Unit {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/get/{cid}".replace("{" + "cid" + "}", "$cid")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Content by Cid
     * This endpoint returns the content record associated with a CID
     * @param cid Cid 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicByCidCidGet(cid: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/by-cid/{cid}".replace("{" + "cid" + "}", "$cid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get public node info
     * This endpoint returns information about the node
     * @return ApipublicNodeInfo
     */
    @Suppress("UNCHECKED_CAST")
    fun publicInfoGet(): ApipublicNodeInfo {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/info"
        )
        val response = request<ApipublicNodeInfo>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as ApipublicNodeInfo
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get deal metrics
     * This endpoint is used to get deal metrics
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMetricsDealsOnChainGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/metrics/deals-on-chain"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all miners deals
     * This endpoint returns all miners deals
     * @param miner Filter by miner 
     * @param ignoreFailed Ignore Failed (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersDealsMinerGet(miner: kotlin.String, ignoreFailed: kotlin.String? = null): kotlin.String {
        val localVariableQuery: MultiValueMap = mapOf("ignore-failed" to listOf("$ignoreFailed"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners/deals/{miner}".replace("{" + "miner" + "}", "$miner"), query = localVariableQuery
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all miners
     * This endpoint returns all miners
     * @param miner Filter by miner 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersFailuresMinerGet(miner: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners/failures/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all miners
     * This endpoint returns all miners
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get miner stats
     * This endpoint returns miner stats
     * @param miner Filter by miner 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersStatsMinerGet(miner: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners/stats/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Net Addrs
     * This endpoint is used to get net addrs
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun publicNetAddrsGet(): kotlin.Array<kotlin.String> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/net/addrs"
        )
        val response = request<kotlin.Array<kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Net Peers
     * This endpoint is used to get net peers
     * @return kotlin.Array<kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun publicNetPeersGet(): kotlin.Array<kotlin.String> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/net/peers"
        )
        val response = request<kotlin.Array<kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Public stats
     * This endpoint is used to get public stats.
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicStatsGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/stats"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
