/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.UtilHttpError

import estuary-client.infrastructure.*

class AutoretrieveApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Register autoretrieve server
     * This endpoint registers a new autoretrieve server
     * @param addresses  
     * @param pubKey  
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun adminAutoretrieveInitPost(addresses: kotlin.String, pubKey: kotlin.String): kotlin.String {
        val localVariableBody: kotlin.Any? = mapOf("addresses" to "$addresses", "pubKey" to "$pubKey")
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("Content-Type" to "multipart/form-data")
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/admin/autoretrieve/init", headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List autoretrieve servers
     * This endpoint lists all registered autoretrieve servers
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun adminAutoretrieveListGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/admin/autoretrieve/list"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Marks autoretrieve server as up
     * This endpoint updates the lastConnection field for autoretrieve
     * @param token Autoretrieve&#x27;s auth token 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun autoretrieveHeartbeatPost(token: kotlin.String): kotlin.String {
        
        val localVariableHeaders: kotlin.collections.Map<kotlin.String, kotlin.String> = mapOf("token" to token)
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/autoretrieve/heartbeat", headers = localVariableHeaders
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
