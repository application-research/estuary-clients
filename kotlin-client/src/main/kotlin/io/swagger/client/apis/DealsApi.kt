/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.MainChannelIDParam
import io.swagger.client.models.MainestimateDealBody
import io.swagger.client.models.UtilHttpError

import estuary-client.infrastructure.*

class DealsApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Estimate the cost of a deal
     * This endpoint estimates the cost of a deal
     * @param body The size of the deal in bytes, the replication factor, and the duration of the deal in blocks 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealEstimatePost(body: MainestimateDealBody): kotlin.String {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/deal/estimate"
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Deal Info
     * This endpoint returns the deal info for a deal
     * @param dealid Deal ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealInfoDealidGet(dealid: kotlin.Int): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deal/info/{dealid}".replace("{" + "dealid" + "}", "$dealid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Proposal
     * This endpoint returns the proposal for a deal
     * @param propcid Proposal CID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealProposalPropcidGet(propcid: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deal/proposal/{propcid}".replace("{" + "propcid" + "}", "$propcid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Query Ask
     * This endpoint returns the ask for a given CID
     * @param miner CID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealQueryMinerGet(miner: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deal/query/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Deal Status by PropCid
     * Get Deal Status by PropCid
     * @param propcid PropCid 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealStatusByProposalPropcidGet(propcid: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deal/status-by-proposal/{propcid}".replace("{" + "propcid" + "}", "$propcid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deal Status
     * This endpoint returns the status of a deal
     * @param miner Miner 
     * @param propcid Proposal CID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealStatusMinerPropcidGet(miner: kotlin.String, propcid: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deal/status/{miner}/{propcid}".replace("{" + "miner" + "}", "$miner").replace("{" + "propcid" + "}", "$propcid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Transfer In Progress
     * This endpoint returns the in-progress transfers
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealTransferInProgressGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deal/transfer/in-progress"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Transfer Status
     * This endpoint returns the status of a transfer
     * @param body Channel ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealTransferStatusPost(body: MainChannelIDParam): kotlin.String {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/deal/transfer/status"
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get storage failures for user
     * This endpoint returns a list of storage failures for user
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealsFailuresGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deals/failures"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Make Deal
     * This endpoint makes a deal for a given content and miner
     * @param body Deal Request 
     * @param miner Miner 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealsMakeMinerPost(body: kotlin.String, miner: kotlin.String): kotlin.String {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/deals/make/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Deal Status
     * This endpoint returns the status of a deal
     * @param deal Deal ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun dealsStatusDealGet(deal: kotlin.Int): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/deals/status/{deal}".replace("{" + "deal" + "}", "$deal")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get storage failures
     * This endpoint returns a list of storage failures
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicDealsFailuresGet(): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/deals/failures"
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Query Ask
     * This endpoint returns the ask for a given CID
     * @param miner CID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersStorageQueryMinerGet(miner: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners/storage/query/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
