/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.ApicreateCollectionBody
import io.swagger.client.models.ApideleteContentFromCollectionBody
import io.swagger.client.models.CollectionsCollection
import io.swagger.client.models.CollectionsCollectionListResponse
import io.swagger.client.models.UtilHttpError

import estuary-client.infrastructure.*

class CollectionsApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Produce a CID of the collection contents
     * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
     * @param coluuid coluuid 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsColuuidCommitPost(coluuid: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/collections/{coluuid}/commit".replace("{" + "coluuid" + "}", "$coluuid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a content from a collection
     * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
     * @param body Variable to use when filtering for files (must be either &#x27;path&#x27; or &#x27;content_id&#x27;) 
     * @param coluuid Collection ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsColuuidContentsDelete(body: ApideleteContentFromCollectionBody, coluuid: kotlin.String): kotlin.String {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/collections/{coluuid}/contents".replace("{" + "coluuid" + "}", "$coluuid")
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Deletes a collection
     * This endpoint is used to delete an existing collection.
     * @param coluuid Collection ID 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsColuuidDelete(coluuid: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/collections/{coluuid}".replace("{" + "coluuid" + "}", "$coluuid")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get contents in a collection
     * This endpoint is used to get contents in a collection. If no colpath query param is passed
     * @param coluuid coluuid 
     * @param dir Directory (optional)
     * @return kotlin.Array<CollectionsCollectionListResponse>
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsColuuidGet(coluuid: kotlin.String, dir: kotlin.String? = null): kotlin.Array<CollectionsCollectionListResponse> {
        val localVariableQuery: MultiValueMap = mapOf("dir" to listOf("$dir"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/collections/{coluuid}".replace("{" + "coluuid" + "}", "$coluuid"), query = localVariableQuery
        )
        val response = request<kotlin.Array<CollectionsCollectionListResponse>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CollectionsCollectionListResponse>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add contents to a collection
     * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
     * @param body Content IDs to add to collection 
     * @param coluuid Collection UUID 
     * @param dir Directory (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsColuuidPost(body: kotlin.Array<kotlin.Int>, coluuid: kotlin.String, dir: kotlin.String? = null): kotlin.String {
        val localVariableBody: kotlin.Any? = body
        val localVariableQuery: MultiValueMap = mapOf("dir" to listOf("$dir"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/collections/{coluuid}".replace("{" + "coluuid" + "}", "$coluuid"), query = localVariableQuery
        )
        val response = request<kotlin.String>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add a file to a collection
     * This endpoint adds a file to a collection
     * @param coluuid Collection ID 
     * @param content Content 
     * @param path Path to file 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsFsAddPost(coluuid: kotlin.String, content: kotlin.String, path: kotlin.String): kotlin.String {
        val localVariableQuery: MultiValueMap = mapOf("coluuid" to listOf("$coluuid"), "content" to listOf("$content"), "path" to listOf("$path"))
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/collections/fs/add", query = localVariableQuery
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List all collections
     * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
     * @return kotlin.Array<CollectionsCollection>
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsGet(): kotlin.Array<CollectionsCollection> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/collections/"
        )
        val response = request<kotlin.Array<CollectionsCollection>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<CollectionsCollection>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create a new collection
     * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
     * @param body Collection name and description 
     * @return CollectionsCollection
     */
    @Suppress("UNCHECKED_CAST")
    fun collectionsPost(body: ApicreateCollectionBody): CollectionsCollection {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/collections/"
        )
        val response = request<CollectionsCollection>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as CollectionsCollection
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
