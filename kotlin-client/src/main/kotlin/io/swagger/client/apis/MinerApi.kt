/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.GithubComApplicationResearchEstuaryApiV1claimMsgResponse
import io.swagger.client.models.GithubComApplicationResearchEstuaryApiV1claimResponse
import io.swagger.client.models.MinerClaimMinerBody
import io.swagger.client.models.MinerMinerSetInfoParams
import io.swagger.client.models.MinerSuspendMinerBody
import io.swagger.client.models.UtilHttpError

import estuary-client.infrastructure.*

class MinerApi(basePath: kotlin.String = "//api.estuary.tech/") : ApiClient(basePath) {

    /**
     * Get Claim Miner Message
     * This endpoint lets a user get the message in order to claim a miner
     * @param miner Miner claim message 
     * @return GithubComApplicationResearchEstuaryApiV1claimMsgResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun minerClaimMinerGet(miner: kotlin.String): GithubComApplicationResearchEstuaryApiV1claimMsgResponse {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/miner/claim/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<GithubComApplicationResearchEstuaryApiV1claimMsgResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GithubComApplicationResearchEstuaryApiV1claimMsgResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Claim Miner
     * This endpoint lets a user claim a miner
     * @param body Claim Miner Body 
     * @return GithubComApplicationResearchEstuaryApiV1claimResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun minerClaimPost(body: MinerClaimMinerBody): GithubComApplicationResearchEstuaryApiV1claimResponse {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/miner/claim"
        )
        val response = request<GithubComApplicationResearchEstuaryApiV1claimResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as GithubComApplicationResearchEstuaryApiV1claimResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Set Miner Info
     * This endpoint lets a user set miner info.
     * @param body Miner set info params 
     * @param miner Miner to set info for 
     * @return kotlin.collections.Map<kotlin.String, kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun minerSetInfoMinerPut(body: MinerMinerSetInfoParams, miner: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.String> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/miner/set-info/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.String>>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Suspend Miner
     * This endpoint lets a user suspend a miner.
     * @param body Suspend Miner Body 
     * @param miner Miner to suspend 
     * @return kotlin.collections.Map<kotlin.String, kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun minerSuspendMinerPost(body: MinerSuspendMinerBody, miner: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.String> {
        val localVariableBody: kotlin.Any? = body
        
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/miner/suspend/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.String>>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Unuspend Miner
     * This endpoint lets a user unsuspend a miner.
     * @param miner Miner to unsuspend 
     * @return kotlin.collections.Map<kotlin.String, kotlin.String>
     */
    @Suppress("UNCHECKED_CAST")
    fun minerUnsuspendMinerPut(miner: kotlin.String): kotlin.collections.Map<kotlin.String, kotlin.String> {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/miner/unsuspend/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.collections.Map<kotlin.String, kotlin.String>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.collections.Map<kotlin.String, kotlin.String>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get all miners deals
     * This endpoint returns all miners deals
     * @param miner Filter by miner 
     * @param ignoreFailed Ignore Failed (optional)
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersDealsMinerGet(miner: kotlin.String, ignoreFailed: kotlin.String? = null): kotlin.String {
        val localVariableQuery: MultiValueMap = mapOf("ignore-failed" to listOf("$ignoreFailed"))
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners/deals/{miner}".replace("{" + "miner" + "}", "$miner"), query = localVariableQuery
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get miner stats
     * This endpoint returns miner stats
     * @param miner Filter by miner 
     * @return kotlin.String
     */
    @Suppress("UNCHECKED_CAST")
    fun publicMinersStatsMinerGet(miner: kotlin.String): kotlin.String {
        
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/public/miners/stats/{miner}".replace("{" + "miner" + "}", "$miner")
        )
        val response = request<kotlin.String>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.String
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
