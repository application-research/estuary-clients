/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
  MainDeleteContentFromCollectionBody,
  MainCreateCollectionBody,
  CollectionsCollection,
} from './models';

/**
 * collectionsColuuidCommitPost - parameters interface
 */
export interface ICollectionsColuuidCommitPostParams {
  coluuid: string;
}

/**
 * collectionsColuuidContentsDelete - parameters interface
 */
export interface ICollectionsColuuidContentsDeleteParams {
  coluuid: string;
  contentid: string;
  body: MainDeleteContentFromCollectionBody;
}

/**
 * collectionsColuuidDelete - parameters interface
 */
export interface ICollectionsColuuidDeleteParams {
  coluuid: string;
}

/**
 * collectionsColuuidGet - parameters interface
 */
export interface ICollectionsColuuidGetParams {
  coluuid: string;
  dir?: string;
}

/**
 * collectionsColuuidPost - parameters interface
 */
export interface ICollectionsColuuidPostParams {
  coluuid: string;
  contentIDs: Array<number>;
}

/**
 * collectionsFsAddPost - parameters interface
 */
export interface ICollectionsFsAddPostParams {
  coluuid: string;
  content: string;
  path: string;
}

/**
 * collectionsGet - parameters interface
 */
export interface ICollectionsGetParams {
}

/**
 * collectionsPost - parameters interface
 */
export interface ICollectionsPostParams {
  body: MainCreateCollectionBody;
}

/**
 * CollectionsApi - API class
 */
@autoinject()
export class CollectionsApi extends Api {

  /**
   * Creates a new CollectionsApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Produce a CID of the collection contents
   * This endpoint is used to save the contents in a collection, producing a top-level CID that references all the current CIDs in the collection.
   * @param params.coluuid coluuid
   */
  async collectionsColuuidCommitPost(params: ICollectionsColuuidCommitPostParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsColuuidCommitPost', params, 'coluuid');

    // Create URL to call
    const url = `${this.basePath}/collections/{coluuid}/commit`
      .replace(`{${'coluuid'}}`, encodeURIComponent(`${params['coluuid']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes a content from a collection
   * This endpoint is used to delete an existing content from an existing collection. If two or more files with the same contentid exist in the collection, delete the one in the specified path
   * @param params.coluuid Collection ID
   * @param params.contentid Content ID
   * @param params.body Variable to use when filtering for files (must be either &#39;path&#39; or &#39;content_id&#39;)
   */
  async collectionsColuuidContentsDelete(params: ICollectionsColuuidContentsDeleteParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsColuuidContentsDelete', params, 'coluuid');
    this.ensureParamIsSet('collectionsColuuidContentsDelete', params, 'contentid');
    this.ensureParamIsSet('collectionsColuuidContentsDelete', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/collections/{coluuid}/contents`
      .replace(`{${'coluuid'}}`, encodeURIComponent(`${params['coluuid']}`))
      .replace(`{${'contentid'}}`, encodeURIComponent(`${params['contentid']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Deletes a collection
   * This endpoint is used to delete an existing collection.
   * @param params.coluuid Collection ID
   */
  async collectionsColuuidDelete(params: ICollectionsColuuidDeleteParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsColuuidDelete', params, 'coluuid');

    // Create URL to call
    const url = `${this.basePath}/collections/{coluuid}`
      .replace(`{${'coluuid'}}`, encodeURIComponent(`${params['coluuid']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get contents in a collection
   * This endpoint is used to get contents in a collection. If no colpath query param is passed
   * @param params.coluuid coluuid
   * @param params.dir Directory
   */
  async collectionsColuuidGet(params: ICollectionsColuuidGetParams): Promise<string> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsColuuidGet', params, 'coluuid');

    // Create URL to call
    const url = `${this.basePath}/collections/{coluuid}`
      .replace(`{${'coluuid'}}`, encodeURIComponent(`${params['coluuid']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()
      // Set query parameters
      .withParams({ 
        'dir': params['dir'],
      })

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add contents to a collection
   * This endpoint adds already-pinned contents (that have ContentIDs) to a collection.
   * @param params.coluuid coluuid
   * @param params.contentIDs Content IDs to add to collection
   */
  async collectionsColuuidPost(params: ICollectionsColuuidPostParams): Promise<{ [key: string]: string; }> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsColuuidPost', params, 'coluuid');
    this.ensureParamIsSet('collectionsColuuidPost', params, 'contentIDs');

    // Create URL to call
    const url = `${this.basePath}/collections/{coluuid}`
      .replace(`{${'coluuid'}}`, encodeURIComponent(`${params['coluuid']}`));

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['contentIDs'] || {}))

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add a file to a collection
   * This endpoint adds a file to a collection
   * @param params.coluuid Collection ID
   * @param params.content Content
   * @param params.path Path to file
   */
  async collectionsFsAddPost(params: ICollectionsFsAddPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsFsAddPost', params, 'coluuid');
    this.ensureParamIsSet('collectionsFsAddPost', params, 'content');
    this.ensureParamIsSet('collectionsFsAddPost', params, 'path');

    // Create URL to call
    const url = `${this.basePath}/collections/fs/add`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Set query parameters
      .withParams({ 
        'coluuid': params['coluuid'],
        'content': params['content'],
        'path': params['path'],
      })

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List all collections
   * This endpoint is used to list all collections. Whenever a user logs on estuary, it will list all collections that the user has access to. This endpoint provides a way to list all collections to the user.
   */
  async collectionsGet(): Promise<Array<CollectionsCollection>> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/collections/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Create a new collection
   * This endpoint is used to create a new collection. A collection is a representaion of a group of objects added on the estuary. This endpoint can be used to create a new collection.
   * @param params.body Collection name and description
   */
  async collectionsPost(params: ICollectionsPostParams): Promise<CollectionsCollection> {
    // Verify required parameters are set
    this.ensureParamIsSet('collectionsPost', params, 'body');

    // Create URL to call
    const url = `${this.basePath}/collections/`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['body'] || {}))

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

