/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
} from './models';

/**
 * adminAutoretrieveInitPost - parameters interface
 */
export interface IAdminAutoretrieveInitPostParams {
  addresses: string;
  pubKey: string;
}

/**
 * adminAutoretrieveListGet - parameters interface
 */
export interface IAdminAutoretrieveListGetParams {
}

/**
 * autoretrieveHeartbeatPost - parameters interface
 */
export interface IAutoretrieveHeartbeatPostParams {
  token: string;
}

/**
 * AutoretrieveApi - API class
 */
@autoinject()
export class AutoretrieveApi extends Api {

  /**
   * Creates a new AutoretrieveApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Register autoretrieve server
   * This endpoint registers a new autoretrieve server
   * @param params.addresses Autoretrieve&#39;s comma-separated list of addresses
   * @param params.pubKey Autoretrieve&#39;s public key
   */
  async adminAutoretrieveInitPost(params: IAdminAutoretrieveInitPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('adminAutoretrieveInitPost', params, 'addresses');
    this.ensureParamIsSet('adminAutoretrieveInitPost', params, 'pubKey');

    // Create URL to call
    const url = `${this.basePath}/admin/autoretrieve/init`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      // Encode body parameter
      .withHeader('content-type', 'application/json')
      .withContent(JSON.stringify(params['pubKey'] || {}))

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List autoretrieve servers
   * This endpoint lists all registered autoretrieve servers
   */
  async adminAutoretrieveListGet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/autoretrieve/list`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Marks autoretrieve server as up
   * This endpoint updates the lastConnection field for autoretrieve
   * @param params.token Autoretrieve&#39;s auth token
   */
  async autoretrieveHeartbeatPost(params: IAutoretrieveHeartbeatPostParams): Promise<any> {
    // Verify required parameters are set
    this.ensureParamIsSet('autoretrieveHeartbeatPost', params, 'token');

    // Create URL to call
    const url = `${this.basePath}/autoretrieve/heartbeat`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()
      .withHeader('token', params['token'])
      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

