/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { autoinject } from 'aurelia-framework';
import { HttpClient } from 'aurelia-http-client';
import { Api } from './Api';
import { AuthStorage } from './AuthStorage';
import {
} from './models';

/**
 * adminPeeringPeersDelete - parameters interface
 */
export interface IAdminPeeringPeersDeleteParams {
}

/**
 * adminPeeringPeersGet - parameters interface
 */
export interface IAdminPeeringPeersGetParams {
}

/**
 * adminPeeringPeersPost - parameters interface
 */
export interface IAdminPeeringPeersPostParams {
}

/**
 * adminPeeringStartPost - parameters interface
 */
export interface IAdminPeeringStartPostParams {
}

/**
 * adminPeeringStatusGet - parameters interface
 */
export interface IAdminPeeringStatusGetParams {
}

/**
 * adminPeeringStopPost - parameters interface
 */
export interface IAdminPeeringStopPostParams {
}

/**
 * adminSystemConfigGet - parameters interface
 */
export interface IAdminSystemConfigGetParams {
}

/**
 * adminUsersGet - parameters interface
 */
export interface IAdminUsersGetParams {
}

/**
 * AdminApi - API class
 */
@autoinject()
export class AdminApi extends Api {

  /**
   * Creates a new AdminApi class.
   *
   * @param httpClient The Aurelia HTTP client to be injected.
   * @param authStorage A storage for authentication data.
   */
  constructor(httpClient: HttpClient, authStorage: AuthStorage) {
    super(httpClient, authStorage);
  }

  /**
   * Remove peers on Peering Service
   * This endpoint can be used to remove a Peer from the Peering Service
   */
  async adminPeeringPeersDelete(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/peering/peers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asDelete()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * List all Peering peers
   * This endpoint can be used to list all peers on Peering Service
   */
  async adminPeeringPeersGet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/peering/peers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Add peers on Peering Service
   * This endpoint can be used to add a Peer from the Peering Service
   */
  async adminPeeringPeersPost(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/peering/peers`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Start Peering
   * This endpoint can be used to start the Peering Service
   */
  async adminPeeringStartPost(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/peering/start`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Check Peering Status
   * This endpoint can be used to check the Peering status
   */
  async adminPeeringStatusGet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/peering/status`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Stop Peering
   * This endpoint can be used to stop the Peering Service
   */
  async adminPeeringStopPost(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/peering/stop`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asPost()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get systems(estuary/shuttle) config
   * This endpoint is used to get system configs.
   */
  async adminSystemConfigGet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/system/config`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

  /**
   * Get all users
   * This endpoint is used to get all users.
   */
  async adminUsersGet(): Promise<any> {
    // Verify required parameters are set

    // Create URL to call
    const url = `${this.basePath}/admin/users`;

    const response = await this.httpClient.createRequest(url)
      // Set HTTP method
      .asGet()

      // Authentication 'bearerAuth' required
      .withHeader('Authorization', this.authStorage.getbearerAuth())
      // Send the request
      .send();

    if (response.statusCode < 200 || response.statusCode >= 300) {
      throw new Error(response.content);
    }

    // Extract the content
    return response.content;
  }

}

