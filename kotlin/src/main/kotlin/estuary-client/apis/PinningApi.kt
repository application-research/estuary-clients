/**
* Estuary API
* This is the API for the Estuary application.
*
* OpenAPI spec version: 0.0.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
package estuary-client.apis

import estuary-client.models.TypesIpfsListPinStatusResponse
import estuary-client.models.TypesIpfsPin
import estuary-client.models.TypesIpfsPinStatusResponse
import estuary-client.models.UtilHttpError

import estuary-client.infrastructure.*

class PinningApi(basePath: kotlin.String = "https://api.estuary.tech") : ApiClient(basePath) {

    /**
    * List all pin status objects
    * This endpoint lists all pin status objects
    * @return TypesIpfsListPinStatusResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun pinningPinsGet() : TypesIpfsListPinStatusResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/pinning/pins",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TypesIpfsListPinStatusResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TypesIpfsListPinStatusResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Delete a pinned object
    * This endpoint deletes a pinned object.
    * @param pinid Pin ID 
    * @return void
    */
    fun pinningPinsPinidDelete(pinid: kotlin.String) : Unit {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.DELETE,
            "/pinning/pins/{pinid}".replace("{"+"pinid"+"}", "$pinid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<Unit>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Get a pin status object
    * This endpoint returns a pin status object.
    * @param pinid cid 
    * @return TypesIpfsPinStatusResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun pinningPinsPinidGet(pinid: kotlin.String) : TypesIpfsPinStatusResponse {
        val localVariableBody: kotlin.Any? = null
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.GET,
            "/pinning/pins/{pinid}".replace("{"+"pinid"+"}", "$pinid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TypesIpfsPinStatusResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TypesIpfsPinStatusResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Replace a pinned object
    * This endpoint replaces a pinned object.
    * @param pinid Pin ID 
    * @param cid CID of new pin 
    * @param name Name (filename) of new pin (optional)
    * @param origins Origins of new pin (optional)
    * @param meta Meta information of new pin (optional)
    * @return TypesIpfsPinStatusResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun pinningPinsPinidPost(pinid: kotlin.String, cid: kotlin.String, name: kotlin.String, origins: kotlin.String, meta: kotlin.String) : TypesIpfsPinStatusResponse {
        val localVariableBody: kotlin.Any? = cidnameoriginsmeta
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/pinning/pins/{pinid}".replace("{"+"pinid"+"}", "$pinid"),
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TypesIpfsPinStatusResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TypesIpfsPinStatusResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

    /**
    * Add and pin object
    * This endpoint adds a pin to the IPFS daemon.
    * @param pin Pin Body {cid:cid, name:name} 
    * @return TypesIpfsPinStatusResponse
    */
    @Suppress("UNCHECKED_CAST")
    fun pinningPinsPost(pin: TypesIpfsPin) : TypesIpfsPinStatusResponse {
        val localVariableBody: kotlin.Any? = pin
        val localVariableQuery: MultiValueMap = mapOf()
        
        val contentHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf()
        val acceptsHeaders: kotlin.collections.Map<kotlin.String,kotlin.String> = mapOf("Accept" to "application/json")
        val localVariableHeaders: kotlin.collections.MutableMap<kotlin.String,kotlin.String> = mutableMapOf()
        localVariableHeaders.putAll(contentHeaders)
        localVariableHeaders.putAll(acceptsHeaders)
        
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/pinning/pins",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val response = request<TypesIpfsPinStatusResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as TypesIpfsPinStatusResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
            else -> throw kotlin.IllegalStateException("Undefined ResponseType.")
        }
    }

}
