/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.28.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Util.ContentAddResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Util.ContentAddResponse::Util.ContentAddResponse()
{
    m_Cid = utility::conversions::to_string_t("");
    m_CidIsSet = false;
    m_EstuaryId = 0;
    m_EstuaryIdIsSet = false;
    m_ProvidersIsSet = false;
    m_Retrieval_url = utility::conversions::to_string_t("");
    m_Retrieval_urlIsSet = false;
}

Util.ContentAddResponse::~Util.ContentAddResponse()
{
}

void Util.ContentAddResponse::validate()
{
    // TODO: implement validation
}

web::json::value Util.ContentAddResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CidIsSet)
    {
        val[utility::conversions::to_string_t("cid")] = ModelBase::toJson(m_Cid);
    }
    if(m_EstuaryIdIsSet)
    {
        val[utility::conversions::to_string_t("estuaryId")] = ModelBase::toJson(m_EstuaryId);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Providers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("providers")] = web::json::value::array(jsonArray);
        }
    }
    if(m_Retrieval_urlIsSet)
    {
        val[utility::conversions::to_string_t("retrieval_url")] = ModelBase::toJson(m_Retrieval_url);
    }

    return val;
}

void Util.ContentAddResponse::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cid")];
        if(!fieldValue.is_null())
        {
            setCid(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("estuaryId")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("estuaryId")];
        if(!fieldValue.is_null())
        {
            setEstuaryId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    {
        m_Providers.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("providers")))
        {
        for( auto& item : val[utility::conversions::to_string_t("providers")].as_array() )
        {
            m_Providers.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("retrieval_url")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("retrieval_url")];
        if(!fieldValue.is_null())
        {
            setRetrievalUrl(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Util.ContentAddResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cid"), m_Cid));
        
    }
    if(m_EstuaryIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("estuaryId"), m_EstuaryId));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Providers )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("providers"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_Retrieval_urlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("retrieval_url"), m_Retrieval_url));
        
    }
}

void Util.ContentAddResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cid")))
    {
        setCid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("estuaryId")))
    {
        setEstuaryId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("estuaryId"))));
    }
    {
        m_Providers.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("providers")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("providers"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Providers.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("retrieval_url")))
    {
        setRetrievalUrl(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("retrieval_url"))));
    }
}

utility::string_t Util.ContentAddResponse::getCid() const
{
    return m_Cid;
}


void Util.ContentAddResponse::setCid(utility::string_t value)
{
    m_Cid = value;
    m_CidIsSet = true;
}
bool Util.ContentAddResponse::cidIsSet() const
{
    return m_CidIsSet;
}

void Util.ContentAddResponse::unsetCid()
{
    m_CidIsSet = false;
}

int32_t Util.ContentAddResponse::getEstuaryId() const
{
    return m_EstuaryId;
}


void Util.ContentAddResponse::setEstuaryId(int32_t value)
{
    m_EstuaryId = value;
    m_EstuaryIdIsSet = true;
}
bool Util.ContentAddResponse::estuaryIdIsSet() const
{
    return m_EstuaryIdIsSet;
}

void Util.ContentAddResponse::unsetEstuaryId()
{
    m_EstuaryIdIsSet = false;
}

std::vector<utility::string_t>& Util.ContentAddResponse::getProviders()
{
    return m_Providers;
}

void Util.ContentAddResponse::setProviders(std::vector<utility::string_t> value)
{
    m_Providers = value;
    m_ProvidersIsSet = true;
}
bool Util.ContentAddResponse::providersIsSet() const
{
    return m_ProvidersIsSet;
}

void Util.ContentAddResponse::unsetProviders()
{
    m_ProvidersIsSet = false;
}

utility::string_t Util.ContentAddResponse::getRetrievalUrl() const
{
    return m_Retrieval_url;
}


void Util.ContentAddResponse::setRetrievalUrl(utility::string_t value)
{
    m_Retrieval_url = value;
    m_Retrieval_urlIsSet = true;
}
bool Util.ContentAddResponse::retrievalUrlIsSet() const
{
    return m_Retrieval_urlIsSet;
}

void Util.ContentAddResponse::unsetRetrieval_url()
{
    m_Retrieval_urlIsSet = false;
}

}
}
}
}

