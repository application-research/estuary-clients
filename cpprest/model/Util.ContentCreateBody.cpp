/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.29.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Util.ContentCreateBody.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Util.ContentCreateBody::Util.ContentCreateBody()
{
    m_Coluuid = utility::conversions::to_string_t("");
    m_ColuuidIsSet = false;
    m_Dir = utility::conversions::to_string_t("");
    m_DirIsSet = false;
    m_Location = utility::conversions::to_string_t("");
    m_LocationIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Root = utility::conversions::to_string_t("");
    m_RootIsSet = false;
    m_Type = 0;
    m_TypeIsSet = false;
}

Util.ContentCreateBody::~Util.ContentCreateBody()
{
}

void Util.ContentCreateBody::validate()
{
    // TODO: implement validation
}

web::json::value Util.ContentCreateBody::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ColuuidIsSet)
    {
        val[utility::conversions::to_string_t("coluuid")] = ModelBase::toJson(m_Coluuid);
    }
    if(m_DirIsSet)
    {
        val[utility::conversions::to_string_t("dir")] = ModelBase::toJson(m_Dir);
    }
    if(m_LocationIsSet)
    {
        val[utility::conversions::to_string_t("location")] = ModelBase::toJson(m_Location);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_RootIsSet)
    {
        val[utility::conversions::to_string_t("root")] = ModelBase::toJson(m_Root);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t("type")] = ModelBase::toJson(m_Type);
    }

    return val;
}

void Util.ContentCreateBody::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("coluuid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("coluuid")];
        if(!fieldValue.is_null())
        {
            setColuuid(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dir")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dir")];
        if(!fieldValue.is_null())
        {
            setDir(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("location")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("location")];
        if(!fieldValue.is_null())
        {
            setLocation(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("root")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("root")];
        if(!fieldValue.is_null())
        {
            setRoot(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("type")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("type")];
        if(!fieldValue.is_null())
        {
            setType(ModelBase::int32_tFromJson(fieldValue));
        }
    }
}

void Util.ContentCreateBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ColuuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coluuid"), m_Coluuid));
        
    }
    if(m_DirIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dir"), m_Dir));
        
    }
    if(m_LocationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("location"), m_Location));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    if(m_RootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("root"), m_Root));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("type"), m_Type));
    }
}

void Util.ContentCreateBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("coluuid")))
    {
        setColuuid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("coluuid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dir")))
    {
        setDir(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dir"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("location")))
    {
        setLocation(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("location"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("root")))
    {
        setRoot(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("root"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("type")))
    {
        setType(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("type"))));
    }
}

utility::string_t Util.ContentCreateBody::getColuuid() const
{
    return m_Coluuid;
}


void Util.ContentCreateBody::setColuuid(utility::string_t value)
{
    m_Coluuid = value;
    m_ColuuidIsSet = true;
}
bool Util.ContentCreateBody::coluuidIsSet() const
{
    return m_ColuuidIsSet;
}

void Util.ContentCreateBody::unsetColuuid()
{
    m_ColuuidIsSet = false;
}

utility::string_t Util.ContentCreateBody::getDir() const
{
    return m_Dir;
}


void Util.ContentCreateBody::setDir(utility::string_t value)
{
    m_Dir = value;
    m_DirIsSet = true;
}
bool Util.ContentCreateBody::dirIsSet() const
{
    return m_DirIsSet;
}

void Util.ContentCreateBody::unsetDir()
{
    m_DirIsSet = false;
}

utility::string_t Util.ContentCreateBody::getLocation() const
{
    return m_Location;
}


void Util.ContentCreateBody::setLocation(utility::string_t value)
{
    m_Location = value;
    m_LocationIsSet = true;
}
bool Util.ContentCreateBody::locationIsSet() const
{
    return m_LocationIsSet;
}

void Util.ContentCreateBody::unsetLocation()
{
    m_LocationIsSet = false;
}

utility::string_t Util.ContentCreateBody::getName() const
{
    return m_Name;
}


void Util.ContentCreateBody::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Util.ContentCreateBody::nameIsSet() const
{
    return m_NameIsSet;
}

void Util.ContentCreateBody::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t Util.ContentCreateBody::getRoot() const
{
    return m_Root;
}


void Util.ContentCreateBody::setRoot(utility::string_t value)
{
    m_Root = value;
    m_RootIsSet = true;
}
bool Util.ContentCreateBody::rootIsSet() const
{
    return m_RootIsSet;
}

void Util.ContentCreateBody::unsetRoot()
{
    m_RootIsSet = false;
}

int32_t Util.ContentCreateBody::getType() const
{
    return m_Type;
}


void Util.ContentCreateBody::setType(int32_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool Util.ContentCreateBody::typeIsSet() const
{
    return m_TypeIsSet;
}

void Util.ContentCreateBody::unsetType()
{
    m_TypeIsSet = false;
}

}
}
}
}

