/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.28.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Main.deleteContentFromCollectionBody.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Main.deleteContentFromCollectionBody::Main.deleteContentFromCollectionBody()
{
    m_By = utility::conversions::to_string_t("");
    m_ByIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

Main.deleteContentFromCollectionBody::~Main.deleteContentFromCollectionBody()
{
}

void Main.deleteContentFromCollectionBody::validate()
{
    // TODO: implement validation
}

web::json::value Main.deleteContentFromCollectionBody::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ByIsSet)
    {
        val[utility::conversions::to_string_t("by")] = ModelBase::toJson(m_By);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

void Main.deleteContentFromCollectionBody::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("by")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("by")];
        if(!fieldValue.is_null())
        {
            setBy(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("value")];
        if(!fieldValue.is_null())
        {
            setValue(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Main.deleteContentFromCollectionBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("by"), m_By));
        
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
        
    }
}

void Main.deleteContentFromCollectionBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("by")))
    {
        setBy(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("by"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        setValue(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("value"))));
    }
}

utility::string_t Main.deleteContentFromCollectionBody::getBy() const
{
    return m_By;
}


void Main.deleteContentFromCollectionBody::setBy(utility::string_t value)
{
    m_By = value;
    m_ByIsSet = true;
}
bool Main.deleteContentFromCollectionBody::byIsSet() const
{
    return m_ByIsSet;
}

void Main.deleteContentFromCollectionBody::unsetBy()
{
    m_ByIsSet = false;
}

utility::string_t Main.deleteContentFromCollectionBody::getValue() const
{
    return m_Value;
}


void Main.deleteContentFromCollectionBody::setValue(utility::string_t value)
{
    m_Value = value;
    m_ValueIsSet = true;
}
bool Main.deleteContentFromCollectionBody::valueIsSet() const
{
    return m_ValueIsSet;
}

void Main.deleteContentFromCollectionBody::unsetValue()
{
    m_ValueIsSet = false;
}

}
}
}
}

