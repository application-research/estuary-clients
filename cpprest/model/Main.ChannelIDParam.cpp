/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.28.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Main.ChannelIDParam.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Main.ChannelIDParam::Main.ChannelIDParam()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Initiator = utility::conversions::to_string_t("");
    m_InitiatorIsSet = false;
    m_Responder = utility::conversions::to_string_t("");
    m_ResponderIsSet = false;
}

Main.ChannelIDParam::~Main.ChannelIDParam()
{
}

void Main.ChannelIDParam::validate()
{
    // TODO: implement validation
}

web::json::value Main.ChannelIDParam::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InitiatorIsSet)
    {
        val[utility::conversions::to_string_t("initiator")] = ModelBase::toJson(m_Initiator);
    }
    if(m_ResponderIsSet)
    {
        val[utility::conversions::to_string_t("responder")] = ModelBase::toJson(m_Responder);
    }

    return val;
}

void Main.ChannelIDParam::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("id")];
        if(!fieldValue.is_null())
        {
            setId(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("initiator")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("initiator")];
        if(!fieldValue.is_null())
        {
            setInitiator(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("responder")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("responder")];
        if(!fieldValue.is_null())
        {
            setResponder(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Main.ChannelIDParam::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_InitiatorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("initiator"), m_Initiator));
        
    }
    if(m_ResponderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("responder"), m_Responder));
        
    }
}

void Main.ChannelIDParam::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("id"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("initiator")))
    {
        setInitiator(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("initiator"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("responder")))
    {
        setResponder(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("responder"))));
    }
}

int32_t Main.ChannelIDParam::getId() const
{
    return m_Id;
}


void Main.ChannelIDParam::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool Main.ChannelIDParam::idIsSet() const
{
    return m_IdIsSet;
}

void Main.ChannelIDParam::unsetId()
{
    m_IdIsSet = false;
}

utility::string_t Main.ChannelIDParam::getInitiator() const
{
    return m_Initiator;
}


void Main.ChannelIDParam::setInitiator(utility::string_t value)
{
    m_Initiator = value;
    m_InitiatorIsSet = true;
}
bool Main.ChannelIDParam::initiatorIsSet() const
{
    return m_InitiatorIsSet;
}

void Main.ChannelIDParam::unsetInitiator()
{
    m_InitiatorIsSet = false;
}

utility::string_t Main.ChannelIDParam::getResponder() const
{
    return m_Responder;
}


void Main.ChannelIDParam::setResponder(utility::string_t value)
{
    m_Responder = value;
    m_ResponderIsSet = true;
}
bool Main.ChannelIDParam::responderIsSet() const
{
    return m_ResponderIsSet;
}

void Main.ChannelIDParam::unsetResponder()
{
    m_ResponderIsSet = false;
}

}
}
}
}

