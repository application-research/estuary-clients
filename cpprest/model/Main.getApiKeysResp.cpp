/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.29.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Main.getApiKeysResp.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Main.getApiKeysResp::Main.getApiKeysResp()
{
    m_Expiry = utility::conversions::to_string_t("");
    m_ExpiryIsSet = false;
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Token = utility::conversions::to_string_t("");
    m_TokenIsSet = false;
    m_TokenHash = utility::conversions::to_string_t("");
    m_TokenHashIsSet = false;
}

Main.getApiKeysResp::~Main.getApiKeysResp()
{
}

void Main.getApiKeysResp::validate()
{
    // TODO: implement validation
}

web::json::value Main.getApiKeysResp::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ExpiryIsSet)
    {
        val[utility::conversions::to_string_t("expiry")] = ModelBase::toJson(m_Expiry);
    }
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t("label")] = ModelBase::toJson(m_Label);
    }
    if(m_TokenIsSet)
    {
        val[utility::conversions::to_string_t("token")] = ModelBase::toJson(m_Token);
    }
    if(m_TokenHashIsSet)
    {
        val[utility::conversions::to_string_t("tokenHash")] = ModelBase::toJson(m_TokenHash);
    }

    return val;
}

void Main.getApiKeysResp::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("expiry")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("expiry")];
        if(!fieldValue.is_null())
        {
            setExpiry(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("label")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("label")];
        if(!fieldValue.is_null())
        {
            setLabel(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("token")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("token")];
        if(!fieldValue.is_null())
        {
            setToken(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tokenHash")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("tokenHash")];
        if(!fieldValue.is_null())
        {
            setTokenHash(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Main.getApiKeysResp::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ExpiryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expiry"), m_Expiry));
        
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("label"), m_Label));
        
    }
    if(m_TokenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("token"), m_Token));
        
    }
    if(m_TokenHashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tokenHash"), m_TokenHash));
        
    }
}

void Main.getApiKeysResp::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("expiry")))
    {
        setExpiry(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("expiry"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("label")))
    {
        setLabel(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("label"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("token")))
    {
        setToken(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("token"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tokenHash")))
    {
        setTokenHash(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("tokenHash"))));
    }
}

utility::string_t Main.getApiKeysResp::getExpiry() const
{
    return m_Expiry;
}


void Main.getApiKeysResp::setExpiry(utility::string_t value)
{
    m_Expiry = value;
    m_ExpiryIsSet = true;
}
bool Main.getApiKeysResp::expiryIsSet() const
{
    return m_ExpiryIsSet;
}

void Main.getApiKeysResp::unsetExpiry()
{
    m_ExpiryIsSet = false;
}

utility::string_t Main.getApiKeysResp::getLabel() const
{
    return m_Label;
}


void Main.getApiKeysResp::setLabel(utility::string_t value)
{
    m_Label = value;
    m_LabelIsSet = true;
}
bool Main.getApiKeysResp::labelIsSet() const
{
    return m_LabelIsSet;
}

void Main.getApiKeysResp::unsetLabel()
{
    m_LabelIsSet = false;
}

utility::string_t Main.getApiKeysResp::getToken() const
{
    return m_Token;
}


void Main.getApiKeysResp::setToken(utility::string_t value)
{
    m_Token = value;
    m_TokenIsSet = true;
}
bool Main.getApiKeysResp::tokenIsSet() const
{
    return m_TokenIsSet;
}

void Main.getApiKeysResp::unsetToken()
{
    m_TokenIsSet = false;
}

utility::string_t Main.getApiKeysResp::getTokenHash() const
{
    return m_TokenHash;
}


void Main.getApiKeysResp::setTokenHash(utility::string_t value)
{
    m_TokenHash = value;
    m_TokenHashIsSet = true;
}
bool Main.getApiKeysResp::tokenHashIsSet() const
{
    return m_TokenHashIsSet;
}

void Main.getApiKeysResp::unsetTokenHash()
{
    m_TokenHashIsSet = false;
}

}
}
}
}

