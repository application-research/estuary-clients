/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.28.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Util.HttpError.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Util.HttpError::Util.HttpError()
{
    m_Code = 0;
    m_CodeIsSet = false;
    m_Details = utility::conversions::to_string_t("");
    m_DetailsIsSet = false;
    m_Reason = utility::conversions::to_string_t("");
    m_ReasonIsSet = false;
}

Util.HttpError::~Util.HttpError()
{
}

void Util.HttpError::validate()
{
    // TODO: implement validation
}

web::json::value Util.HttpError::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t("code")] = ModelBase::toJson(m_Code);
    }
    if(m_DetailsIsSet)
    {
        val[utility::conversions::to_string_t("details")] = ModelBase::toJson(m_Details);
    }
    if(m_ReasonIsSet)
    {
        val[utility::conversions::to_string_t("reason")] = ModelBase::toJson(m_Reason);
    }

    return val;
}

void Util.HttpError::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("code")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("code")];
        if(!fieldValue.is_null())
        {
            setCode(ModelBase::int32_tFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("details")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("details")];
        if(!fieldValue.is_null())
        {
            setDetails(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reason")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("reason")];
        if(!fieldValue.is_null())
        {
            setReason(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Util.HttpError::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("code"), m_Code));
    }
    if(m_DetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("details"), m_Details));
        
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reason"), m_Reason));
        
    }
}

void Util.HttpError::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("code")))
    {
        setCode(ModelBase::int32_tFromHttpContent(multipart->getContent(utility::conversions::to_string_t("code"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("details")))
    {
        setDetails(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("details"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reason")))
    {
        setReason(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("reason"))));
    }
}

int32_t Util.HttpError::getCode() const
{
    return m_Code;
}


void Util.HttpError::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool Util.HttpError::codeIsSet() const
{
    return m_CodeIsSet;
}

void Util.HttpError::unsetCode()
{
    m_CodeIsSet = false;
}

utility::string_t Util.HttpError::getDetails() const
{
    return m_Details;
}


void Util.HttpError::setDetails(utility::string_t value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool Util.HttpError::detailsIsSet() const
{
    return m_DetailsIsSet;
}

void Util.HttpError::unsetDetails()
{
    m_DetailsIsSet = false;
}

utility::string_t Util.HttpError::getReason() const
{
    return m_Reason;
}


void Util.HttpError::setReason(utility::string_t value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}
bool Util.HttpError::reasonIsSet() const
{
    return m_ReasonIsSet;
}

void Util.HttpError::unsetReason()
{
    m_ReasonIsSet = false;
}

}
}
}
}

