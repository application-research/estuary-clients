/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.29.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Types.IpfsPin.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Types.IpfsPin::Types.IpfsPin()
{
    m_Cid = utility::conversions::to_string_t("");
    m_CidIsSet = false;
    m_MetaIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_OriginsIsSet = false;
}

Types.IpfsPin::~Types.IpfsPin()
{
}

void Types.IpfsPin::validate()
{
    // TODO: implement validation
}

web::json::value Types.IpfsPin::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CidIsSet)
    {
        val[utility::conversions::to_string_t("cid")] = ModelBase::toJson(m_Cid);
    }
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t("meta")] = ModelBase::toJson(m_Meta);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Origins )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("origins")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void Types.IpfsPin::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("cid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("cid")];
        if(!fieldValue.is_null())
        {
            setCid(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("meta")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("meta")];
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromJson(fieldValue);
            setMeta( newItem );
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_Origins.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("origins")))
        {
        for( auto& item : val[utility::conversions::to_string_t("origins")].as_array() )
        {
            m_Origins.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

void Types.IpfsPin::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_CidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cid"), m_Cid));
        
    }
    if(m_MetaIsSet)
    {
        if (m_Meta.get())
        {
            m_Meta->toMultipart(multipart, utility::conversions::to_string_t("meta."));
        }
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Origins )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("origins"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
}

void Types.IpfsPin::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("cid")))
    {
        setCid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("cid"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("meta")))
    {
        if(multipart->hasContent(utility::conversions::to_string_t("meta")))
        {
            std::shared_ptr<Object> newItem(nullptr);
            newItem->fromMultiPart(multipart, utility::conversions::to_string_t("meta."));
            setMeta( newItem );
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
    {
        m_Origins.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("origins")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("origins"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Origins.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
}

utility::string_t Types.IpfsPin::getCid() const
{
    return m_Cid;
}


void Types.IpfsPin::setCid(utility::string_t value)
{
    m_Cid = value;
    m_CidIsSet = true;
}
bool Types.IpfsPin::cidIsSet() const
{
    return m_CidIsSet;
}

void Types.IpfsPin::unsetCid()
{
    m_CidIsSet = false;
}

std::shared_ptr<Object> Types.IpfsPin::getMeta() const
{
    return m_Meta;
}


void Types.IpfsPin::setMeta(std::shared_ptr<Object> value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}
bool Types.IpfsPin::metaIsSet() const
{
    return m_MetaIsSet;
}

void Types.IpfsPin::unsetMeta()
{
    m_MetaIsSet = false;
}

utility::string_t Types.IpfsPin::getName() const
{
    return m_Name;
}


void Types.IpfsPin::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Types.IpfsPin::nameIsSet() const
{
    return m_NameIsSet;
}

void Types.IpfsPin::unsetName()
{
    m_NameIsSet = false;
}

std::vector<utility::string_t>& Types.IpfsPin::getOrigins()
{
    return m_Origins;
}

void Types.IpfsPin::setOrigins(std::vector<utility::string_t> value)
{
    m_Origins = value;
    m_OriginsIsSet = true;
}
bool Types.IpfsPin::originsIsSet() const
{
    return m_OriginsIsSet;
}

void Types.IpfsPin::unsetOrigins()
{
    m_OriginsIsSet = false;
}

}
}
}
}

