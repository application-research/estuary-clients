/**
 * Estuary API
 * This is the API for the Estuary application.
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator 2.4.28.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Main.importDealBody.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Main.importDealBody::Main.importDealBody()
{
    m_Coluuid = utility::conversions::to_string_t("");
    m_ColuuidIsSet = false;
    m_DealIDsIsSet = false;
    m_Dir = utility::conversions::to_string_t("");
    m_DirIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

Main.importDealBody::~Main.importDealBody()
{
}

void Main.importDealBody::validate()
{
    // TODO: implement validation
}

web::json::value Main.importDealBody::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ColuuidIsSet)
    {
        val[utility::conversions::to_string_t("coluuid")] = ModelBase::toJson(m_Coluuid);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_DealIDs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[utility::conversions::to_string_t("dealIDs")] = web::json::value::array(jsonArray);
        }
    }
    if(m_DirIsSet)
    {
        val[utility::conversions::to_string_t("dir")] = ModelBase::toJson(m_Dir);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }

    return val;
}

void Main.importDealBody::fromJson(web::json::value& val)
{
    if(val.has_field(utility::conversions::to_string_t("coluuid")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("coluuid")];
        if(!fieldValue.is_null())
        {
            setColuuid(ModelBase::stringFromJson(fieldValue));
        }
    }
    {
        m_DealIDs.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(utility::conversions::to_string_t("dealIDs")))
        {
        for( auto& item : val[utility::conversions::to_string_t("dealIDs")].as_array() )
        {
            m_DealIDs.push_back(ModelBase::int32_tFromJson(item));
        }
        }
    }
    if(val.has_field(utility::conversions::to_string_t("dir")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("dir")];
        if(!fieldValue.is_null())
        {
            setDir(ModelBase::stringFromJson(fieldValue));
        }
    }
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        web::json::value& fieldValue = val[utility::conversions::to_string_t("name")];
        if(!fieldValue.is_null())
        {
            setName(ModelBase::stringFromJson(fieldValue));
        }
    }
}

void Main.importDealBody::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(m_ColuuidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("coluuid"), m_Coluuid));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_DealIDs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dealIDs"), web::json::value::array(jsonArray), utility::conversions::to_string_t("application/json")));
        }
    }
    if(m_DirIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("dir"), m_Dir));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
        
    }
}

void Main.importDealBody::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("coluuid")))
    {
        setColuuid(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("coluuid"))));
    }
    {
        m_DealIDs.clear();
        if(multipart->hasContent(utility::conversions::to_string_t("dealIDs")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dealIDs"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_DealIDs.push_back(ModelBase::int32_tFromJson(item));
        }
        }
    }
    if(multipart->hasContent(utility::conversions::to_string_t("dir")))
    {
        setDir(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("dir"))));
    }
    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(utility::conversions::to_string_t("name"))));
    }
}

utility::string_t Main.importDealBody::getColuuid() const
{
    return m_Coluuid;
}


void Main.importDealBody::setColuuid(utility::string_t value)
{
    m_Coluuid = value;
    m_ColuuidIsSet = true;
}
bool Main.importDealBody::coluuidIsSet() const
{
    return m_ColuuidIsSet;
}

void Main.importDealBody::unsetColuuid()
{
    m_ColuuidIsSet = false;
}

std::vector<int32_t>& Main.importDealBody::getDealIDs()
{
    return m_DealIDs;
}

void Main.importDealBody::setDealIDs(std::vector<int32_t> value)
{
    m_DealIDs = value;
    m_DealIDsIsSet = true;
}
bool Main.importDealBody::dealIDsIsSet() const
{
    return m_DealIDsIsSet;
}

void Main.importDealBody::unsetDealIDs()
{
    m_DealIDsIsSet = false;
}

utility::string_t Main.importDealBody::getDir() const
{
    return m_Dir;
}


void Main.importDealBody::setDir(utility::string_t value)
{
    m_Dir = value;
    m_DirIsSet = true;
}
bool Main.importDealBody::dirIsSet() const
{
    return m_DirIsSet;
}

void Main.importDealBody::unsetDir()
{
    m_DirIsSet = false;
}

utility::string_t Main.importDealBody::getName() const
{
    return m_Name;
}


void Main.importDealBody::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool Main.importDealBody::nameIsSet() const
{
    return m_NameIsSet;
}

void Main.importDealBody::unsetName()
{
    m_NameIsSet = false;
}

}
}
}
}

